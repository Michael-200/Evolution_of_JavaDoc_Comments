[@Overridepublic void setMemoryMaximumSize(String memoryMaximumSize) #com.intellij.ant (4346-4553)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param memoryMaximumSize the option value 

----------------------

, @Overridepublic void setDepend(boolean depend) #com.intellij.ant (5190-5365)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param depend the option value 

----------------------

, @Overridepublic void setOptimize(boolean optimize) #com.intellij.ant (4926-5107)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param optimize the option value 

----------------------

, @Overridepublic void setDebugLevel(String v) #com.intellij.ant (3526-3694)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param v the option value 

----------------------

, @Overridepublic void setCompiler(String compiler) #com.intellij.ant (5942-6122)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param compiler the option value 

----------------------

, @Overridepublic void setFork(boolean f) #com.intellij.ant (5442-5605)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param f the option value 

----------------------

, @Overridepublic void setExecutable(String forkExec) #com.intellij.ant (5673-5855)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param forkExec the option value 

----------------------

, @Overridepublic void setMemoryInitialSize(String memoryInitialSize) #com.intellij.ant (4029-4236)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param memoryInitialSize the option value 

----------------------

, @Overridepublic void setListfiles(boolean list) #com.intellij.ant (3774-3948)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param list the option value 

----------------------

, @Overridepublic void setEncoding(String encoding) #com.intellij.ant (4663-4843)       (Javac2.java)

The overridden setter method that warns about unsupported option.  @param encoding the option value 

----------------------

][@NotNullPsiParameterList createParameterList(String @NotNull [] names, PsiType @NotNull [] types) throws IncorrectOperationException#com.intellij.psi (3265-3588)       (JVMElementFactory.java)

Creates a parameter list from the specified parameter names and types.  @throws IncorrectOperationException if some of the parameter names or types are invalid. 

----------------------

, @Override@NotNullPsiParameterList createParameterList(String @NotNull [] names, PsiType @NotNull [] types) throws IncorrectOperationException#com.intellij.psi (14374-14708)       (PsiElementFactory.java)

Creates a parameter list from the specified parameter names and types.  @throws IncorrectOperationException if any of the parameter names or types are invalid. 

----------------------

][@NullablePsiElement getFirstBodyElement()#com.intellij.psi (1285-1473)       (PsiCodeBlock.java)

Returns the first PSI element contained in the block.  @return the first PSI element, or null if the block is empty. 

----------------------

, @NullablePsiElement getLastBodyElement()#com.intellij.psi (1477-1662)       (PsiCodeBlock.java)

Returns the last PSI element contained in the block.  @return the last PSI element, or null if the block is empty. 

----------------------

][@Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public DownloadableLibraryType(@NotNull @Nls(capitalization = Nls.Capitalization.Title) String libraryCategoryName, @NotNull String libraryTypeId, @NotNull String groupId, @Nullable Icon icon, URL @NotNull ... localUrls) #com.intellij.framework.library (2266-2916)       (DownloadableLibraryType.java)

 @deprecated The constructor is meant to maintain the binary compatibility with external plugins.Please use the constructors with a messagePointer for { @link DownloadableLibraryType#myLibraryCategoryName} 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")protected DownloadableLibraryType(@NotNull @Nls(capitalization = Nls.Capitalization.Title) String libraryCategoryName,@NotNull String libraryTypeId,@NotNull String groupId,URL @NotNull ... localUrls) #com.intellij.framework.library (1578-2186)       (DownloadableLibraryType.java)

 @deprecated The constructor is meant to maintain the binary compatibility with external plugins.Please use the constructors with a messagePointer for { @link DownloadableLibraryType#myLibraryCategoryName} 

----------------------

][public static Enumeration getSystemResources(String name) throws IOException#java.lang (25734-26341)       (aClassLoader.java)

Get an Enumeration of URLs to resources with a given name using thethe system classloader. The enumeration firsts lists the resources withthe given name that can be found by the bootstrap classloader followedby the resources with the given name that can be found on the classpath.  @param name the name of the resource relative to the system classloader @return an Enumeration of URLs to the resources @throws IOException if IO errors occur in the process @since 1.2 

----------------------

, public static Enumeration getSystemResources(String name) throws IOException#java.lang (28804-29411)       (aClassLoader_hl.java)

Get an Enumeration of URLs to resources with a given name using thethe system classloader. The enumeration firsts lists the resources withthe given name that can be found by the bootstrap classloader followedby the resources with the given name that can be found on the classpath.  @param name the name of the resource relative to the system classloader @return an Enumeration of URLs to the resources @throws IOException if IO errors occur in the process @since 1.2 

----------------------

][public static boolean isStringType(PsiElementFactory factory, PsiType type) #org.jetbrains.java.generate.psi (5333-5592)       (PsiAdapter.java)

Is the given field a { @link String} type?  @param factory element factory. @param typetype. @return true if it's a String type. 

----------------------

, public static boolean isDateType(PsiElementFactory factory, PsiType type) #org.jetbrains.java.generate.psi (6001-6264)       (PsiAdapter.java)

Is the given field a { @link java.util.Date} type?  @param factory element factory. @param typetype. @return true if it's a Date type. 

----------------------

, public static boolean isCalendarType(PsiElementFactory factory, PsiType type) #org.jetbrains.java.generate.psi (6334-6609)       (PsiAdapter.java)

Is the given field a { @link java.util.Calendar} type?  @param factory element factory. @param typetype. @return true if it's a Calendar type. 

----------------------

, public static boolean isMapType(PsiElementFactory factory, PsiType type) #org.jetbrains.java.generate.psi (4349-4609)       (PsiAdapter.java)

Is the given field a { @link java.util.Map} type?  @param factory element factory. @param typetype. @return true if it's a Map type. 

----------------------

, public static boolean isCollectionType(PsiElementFactory factory, PsiType type) #org.jetbrains.java.generate.psi (3992-4273)       (PsiAdapter.java)

Is the given field a { @link java.util.Collection} type?  @param factory element factory. @param typetype. @return true if it's a Collection type. 

----------------------

, public static boolean isListType(PsiElementFactory factory, PsiType type) #org.jetbrains.java.generate.psi (5003-5265)       (PsiAdapter.java)

Is the given field a { @link java.util.List} type?  @param factory element factory. @param typetype. @return true if it's a Map type. 

----------------------

, public static boolean isSetType(PsiElementFactory factory, PsiType type) #org.jetbrains.java.generate.psi (4676-4936)       (PsiAdapter.java)

Is the given field a { @link java.util.Set} type?  @param factory element factory. @param typetype. @return true if it's a Map type. 

----------------------

][public CFGBuilder ifNotNull() #com.intellij.codeInspection.dataFlow (11383-11794)       (CFGBuilder.java)

Generate instructions to start a conditional block which is executed if top stack value is not null.<p>Stack before: ... value<p>Stack after: ...<p>The conditional block must end with { @link #end()} and may contain one { @link #elseBranch()} inside.Nested conditional blocks are acceptable.  @return this builder 

----------------------

, public CFGBuilder ifNull() #com.intellij.codeInspection.dataFlow (11855-12259)       (CFGBuilder.java)

Generate instructions to start a conditional block which is executed if top stack value is null.<p>Stack before: ... value<p>Stack after: ...<p>The conditional block must end with { @link #end()} and may contain one { @link #elseBranch()} inside.Nested conditional blocks are acceptable.  @return this builder 

----------------------

][class _JavaLexer implements FlexLexer #com.intellij.lang.java.lexer (516-710)       (_JavaLexer.java)

This class is a scanner generated by <a href="http:www.jflex.de">JFlex<a> 1.7.0from the specification file <tt>_JavaLexer.flex<tt> 

----------------------

, class _JavaDocLexer implements FlexLexer #com.intellij.lang.java.lexer (343-543)       (_JavaDocLexer.java)

This class is a scanner generated by <a href="http:www.jflex.de">JFlex<a> 1.7.0from the specification file <tt>_JavaDocLexer.flex<tt> 

----------------------

, class _SPILexer implements FlexLexer #com.intellij.spi.parsing (915-1107)       (_SPILexer.java)

This class is a scanner generated by <a href="http:www.jflex.de">JFlex<a> 1.7.0from the specification file <tt>_SPILexer.flex<tt> 

----------------------

][@Nullablepublic Wrap createChildBlockWrap(ASTBlock block, CommonCodeStyleSettings settings, ReservedWrapsProvider reservedWrapsProvider) #com.intellij.psi.formatter.java.wrap (4499-5370)       (JavaWrapManager.java)

Creates { @link Wrap wrap} to be used with the children blocks of the the given block.  @param block target block which sub-blocks should use wrap created by the current method @param settingscode formatting settings to consider during wrap construction @param reservedWrapsProvider reserved { @code 'element type -> wrap instance'} mappings provider. <b>Note:<b> this argument is considered to be a part of legacy heritage and is intended to be removed as soon as formatting code refactoring is done @returnwrap to use for the sub-blocks of the given block 

----------------------

, @Nullablepublic Wrap create(ASTBlock block, CommonCodeStyleSettings settings, ReservedWrapsProvider reservedWrapsProvider) #com.intellij.psi.formatter.java.wrap.impl (1492-2349)       (JavaChildBlockWrapFactory.java)

Creates { @link Wrap wrap} to be used with the children blocks of the the given block.  @param block target block which sub-blocks should use wrap created by the current method @param settingscode formatting settings to consider during wrap construction @param reservedWrapsProvider reserved { @code 'element type -> wrap instance'} mappings provider. <b>Note:<b> this argument is considered to be a part of legacy heritage and is intended to be removed as soon as formatting code refactoring is done @returnwrap to use for the sub-blocks of the given block 

----------------------

][default void addMessage(@NotNull CompilerMessageCategory category, @Nls(capitalization = Nls.Capitalization.Sentence) String message, @Nullable String url, int lineNum, int columnNum) #com.intellij.openapi.compiler (1273-2003)       (CompileContext.java)

Allows to add a message to be shown in Compiler message view.If correct url, line and column numbers are supplied, the navigation to the specified file is available from the view.  @param categorythe category of a message (information, error, warning). @param message the text of the message. @param url a url to the file to which the message applies, null if not available. @param lineNum a line number, -1 if not available. @param columnNum a column number, -1 if not available. 

----------------------

, default void addMessage(@NotNull CompilerMessageCategory category,@Nls(capitalization = Nls.Capitalization.Sentence) String message,@Nullable String url, int lineNum, int columnNum, @Nullable Navigatable navigatable) #com.intellij.openapi.compiler (2077-2934)       (CompileContext.java)

Allows to add a message to be shown in Compiler message view, with a specified Navigatablethat is used to navigate to the error location.  @param categorythe category of a message (information, error, warning). @param message the text of the message. @param url a url to the file to which the message applies, null if not available. @param lineNum a line number, -1 if not available. @param columnNum a column number, -1 if not available. @param navigatable the navigatable pointing to the error location. 

----------------------

][public void setMethodName(String regexp) #org.jetbrains.java.generate.config (5692-5871)       (FilterPattern.java)

Sets a filtering using regular expression on the method name.  @param regexp the regular expression. 

----------------------

, public void setFieldName(String regexp) #org.jetbrains.java.generate.config (4028-4205)       (FilterPattern.java)

Sets a filtering using regular expression on the field name.  @param regexp the regular expression. 

----------------------

][@NotNullpublic static PsiClassType getJavaLangThrowable(@NotNull PsiManager manager, @NotNull GlobalSearchScope resolveScope) #com.intellij.psi (7086-7468)       (PsiType.java)

Returns the class type for the java.lang.Throwable class.  @param managerthe PSI manager used to create the class type. @param resolveScope the scope in which the class is searched. @return the class instance. 

----------------------

, @NotNullpublic static PsiClassType getJavaLangClass(@NotNull PsiManager manager, @NotNull GlobalSearchScope resolveScope) #com.intellij.psi (6608-6982)       (PsiType.java)

Returns the class type for the java.lang.Class class.  @param managerthe PSI manager used to create the class type. @param resolveScope the scope in which the class is searched. @return the class instance. 

----------------------

, @NotNullpublic static PsiClassType getJavaLangRuntimeException(@NotNull PsiManager manager, @NotNull GlobalSearchScope resolveScope) #com.intellij.psi (8535-8931)       (PsiType.java)

Returns the class type for the java.lang.RuntimeException class.  @param managerthe PSI manager used to create the class type. @param resolveScope the scope in which the class is searched. @return the class instance. 

----------------------

, @NotNullpublic static PsiClassType getJavaLangString(@NotNull PsiManager manager, @NotNull GlobalSearchScope resolveScope) #com.intellij.psi (7576-7952)       (PsiType.java)

Returns the class type for the java.lang.String class.  @param managerthe PSI manager used to create the class type. @param resolveScope the scope in which the class is searched. @return the class instance. 

----------------------

, @NotNullpublic static PsiClassType getJavaLangError(@NotNull PsiManager manager, @NotNull GlobalSearchScope resolveScope) #com.intellij.psi (8057-8431)       (PsiType.java)

Returns the class type for the java.lang.Error class.  @param managerthe PSI manager used to create the class type. @param resolveScope the scope in which the class is searched. @return the class instance. 

----------------------

, @NotNullpublic static PsiClassType getJavaLangObject(@NotNull PsiManager manager, @NotNull GlobalSearchScope resolveScope) #com.intellij.psi (6127-6503)       (PsiType.java)

Returns the class type for the java.lang.Object class.  @param managerthe PSI manager used to create the class type. @param resolveScope the scope in which the class is searched. @return the class instance. 

----------------------

][public interface JvmAnnotationArrayValue extends JvmAnnotationAttributeValue #com.intellij.lang.jvm.annotation (251-469)       (JvmAnnotationArrayValue.java)

Represents an <a href="https:docs.oracle.comjavasespecsjvmsse8htmljvms-4.html#jvms-4.7.16.1-130">array_value<a> struct. 

----------------------

, public interface JvmAnnotationConstantValue extends JvmAnnotationAttributeValue #com.intellij.lang.jvm.annotation (228-453)       (JvmAnnotationConstantValue.java)

Represents a <a href="https:docs.oracle.comjavasespecsjvmsse8htmljvms-4.html#jvms-4.7.16.1-130">const_value_index<a> value. 

----------------------

, public interface JvmNestedAnnotationValue extends JvmAnnotationAttributeValue #com.intellij.lang.jvm.annotation (271-495)       (JvmNestedAnnotationValue.java)

Represents an <a href="https:docs.oracle.comjavasespecsjvmsse8htmljvms-4.html#jvms-4.7.16.1-130">annotation_value<a> struct. 

----------------------

, public interface JvmAnnotationEnumFieldValue extends JvmAnnotationAttributeValue #com.intellij.lang.jvm.annotation (390-617)       (JvmAnnotationEnumFieldValue.java)

Represents an <a href="https:docs.oracle.comjavasespecsjvmsse8htmljvms-4.html#jvms-4.7.16.1-130">enum_const_value<a> struct. 

----------------------

, public interface JvmAnnotationClassValue extends JvmAnnotationAttributeValue #com.intellij.lang.jvm.annotation (308-529)       (JvmAnnotationClassValue.java)

Represents a <a href="https:docs.oracle.comjavasespecsjvmsse8htmljvms-4.html#jvms-4.7.16.1-130">class_info_index<a> value. 

----------------------

][boolean isConvertibleFrom(@NotNull Exact other)#com.intellij.codeInspection.dataFlow (7111-7291)       (TypeConstraint.java)

 @param other type to test convertibility @return true if this type is convertible from the other type 

----------------------

, boolean isAssignableFrom(@NotNull Exact other)#com.intellij.codeInspection.dataFlow (6928-7105)       (TypeConstraint.java)

 @param other type to test assignability @return true if this type is assignable from the other type 

----------------------

][@NotNullpublic SuggestedNameInfo suggestUniqueVariableName(@NotNull SuggestedNameInfo baseNameInfo, PsiElement place, boolean lookForward) #com.intellij.psi.codeStyle (7833-8546)       (JavaCodeStyleManager.java)

Suggests a unique names for the variable used at the specified location. The resulting name info may contain names whichshadow existing names.  @param baseNameInfo the base name info for the variable. @param placethe location where the variable will be used. @param lookForwardif true, the existing variables are searched in both directions; if false - only backward @return the generated unique name info. 

----------------------

, @NotNullpublic abstract SuggestedNameInfo suggestUniqueVariableName(@NotNull SuggestedNameInfo baseNameInfo,PsiElement place,boolean ignorePlaceName,boolean lookForward)#com.intellij.psi.codeStyle (9281-10154)       (JavaCodeStyleManager.java)

Suggests a unique name for the variable used at the specified location.  @param baseNameInfothe base name info for the variable. @param place the location where the variable will be used. @param ignorePlaceName if true and place is PsiNamedElement, place.getName() would be still treated as unique name @param lookForward if true, the existing variables are searched in both directions; if false - only backward @return the generated unique name 

----------------------

][void setThisType(PsiType psiType)#com.intellij.psi (1097-1293)       (JavaCodeFragment.java)

Sets the type corresponding to the { @code this} keyword in the code fragment.  @param psiType the type of { @code this} in the fragment. 

----------------------

, void setSuperType(PsiType superType)#com.intellij.psi (1484-1687)       (JavaCodeFragment.java)

Sets the type corresponding to the { @code super} keyword in the code fragment.  @param superType the type of { @code super} in the fragment. 

----------------------

, PsiType getSuperType()#com.intellij.psi (1297-1480)       (JavaCodeFragment.java)

Returns the type corresponding to the { @code super} keyword in the code fragment.  @return the type of { @code super} in the fragment. 

----------------------

][@NotNullpublic static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) #com.intellij.psi.util (20510-20925)       (PropertyUtilBase.java)

Consider using { @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateSetterPrototype(PsiField)}or { @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateSimpleSetterPrototype(PsiField)}to add  @Override annotation 

----------------------

, @NotNullpublic static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass) #com.intellij.psi.util (20040-20435)       (PropertyUtilBase.java)

Consider using { @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateSetterPrototype(PsiField)}or { @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateSimpleSetterPrototype(PsiField)}to add  @Override annotation 

----------------------

, @NotNullpublic static PsiMethod generateSetterPrototype(@NotNull PsiField field) #com.intellij.psi.util (19601-19961)       (PropertyUtilBase.java)

Consider using { @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateSetterPrototype(PsiField)}or { @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateSimpleSetterPrototype(PsiField)}to add  @Override annotation 

----------------------

, @NotNullpublic static PsiMethod generateGetterPrototype(@NotNull PsiField field) #com.intellij.psi.util (18302-18662)       (PropertyUtilBase.java)

Consider using { @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateGetterPrototype(PsiField)} or{ @link com.intellij.codeInsight.generation.GenerateMembersUtil#generateSimpleGetterPrototype(PsiField)}to add  @Override annotation 

----------------------

][public class PsiJShellRootClassImpl extends ASTWrapperPsiElement implements PsiJShellRootClass #com.intellij.psi.impl.source (1356-1745)       (PsiJShellRootClassImpl.java)

 @author Eugene Zhuravlevaccording to JShell spec, a snippet must correspond to one of the following JLS syntax productions:ExpressionStatementClassDeclarationInterfaceDeclarationMethodDeclarationFieldDeclarationImportDeclaration 

----------------------

, public class PsiJShellImportHolderImpl extends ASTWrapperPsiElement implements PsiJShellImportHolder #com.intellij.psi.impl.source (1076-1471)       (PsiJShellImportHolderImpl.java)

 @author Eugene Zhuravlevaccording to JShell spec, a snippet must correspond to one of the following JLS syntax productions:ExpressionStatementClassDeclarationInterfaceDeclarationMethodDeclarationFieldDeclarationImportDeclaration 

----------------------

][protected void doFileTest(String filePathBefore, String filePathAfter, boolean ignoreTrailingSpaces) #com.intellij.testFramework (3221-3695)       (EditorActionTestCase.java)

Same as doTextTest but texts are retrieved from the data files. @param filePathBefore source file's relative path from %IDEA_INSTALLATION_HOME%testData @param filePathAfter expected file's relative path from %IDEA_INSTALLATION_HOME%testData @param ignoreTrailingSpacestrue if trailing spaces should be ignored. @throws Exception 

----------------------

, protected void doFileTest(String filePathBefore, String filePathAfter) throws Exception #com.intellij.testFramework (2775-3159)       (EditorActionTestCase.java)

Same as doTextTest but texts are retrieved from the data files. @param filePathBefore source file's relative path from %IDEA_INSTALLATION_HOME%testData @param filePathAfter expected file's relative path from %IDEA_INSTALLATION_HOME%testData @throws Exception 

----------------------

][public class PsiMethodReferenceType extends PsiType #com.intellij.psi (721-851)       (PsiMethodReferenceType.java)

A type which represents a function denoted by a method reference. 

----------------------

, public class PsiLambdaExpressionType extends PsiType #com.intellij.psi (721-853)       (PsiLambdaExpressionType.java)

A type which represents a function denoted by a lambda expression. 

----------------------

][private int zzStartRead#com.intellij.spi.parsing (14340-14440)       (_SPILexer.java)

 startRead marks the beginning of the yytext() string in the buffer 

----------------------

, private int zzStartRead#com.intellij.lang.java.lexer (29106-29206)       (_JavaLexer.java)

 startRead marks the beginning of the yytext() string in the buffer 

----------------------

, private int zzStartRead#com.intellij.lang.java.lexer (15058-15158)       (_JavaDocLexer.java)

 startRead marks the beginning of the yytext() string in the buffer 

----------------------

][public void testSpans4() #com.intellij.uiDesigner.core (19452-19598)       (GridBagConverterTest.java)

button (can grow, span 2 ) | text field 1 (span 1)text field 2 (want grow, span 2) | empty 

----------------------

, public void test4() #com.intellij.uiDesigner.core (5568-5709)       (SpansTest.java)

button (can grow, span 2 ) | text field 1 (span 1)text field 2 (want grow, span 2) | empty 

----------------------

][private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute()#com.intellij.lang.java.lexer (27676-27830)       (_JavaLexer.java)

ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState<code> 

----------------------

, private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute()#com.intellij.spi.parsing (13013-13167)       (_SPILexer.java)

ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState<code> 

----------------------

, private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute()#com.intellij.lang.java.lexer (13637-13791)       (_JavaDocLexer.java)

ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState<code> 

----------------------

][@Nullablepublic String getShortClassTypeName(@NotNull LighterASTNode var) #com.intellij.psi.impl.source (5595-6062)       (FileLocalResolver.java)

Determine the type name of the given variable. Can be used to later iterate over all classes with this name for lightweight checksbefore loading AST and fully resolving the type. @param var Variable node @return the short name of the class corresponding to the type of the variable, or null if the variable is not of class type orthe type is generic 

----------------------

, @Nullablepublic String getShortClassTypeName(@NotNull LighterASTNode var, int arrayDepth) #com.intellij.psi.impl.source (6112-6681)       (FileLocalResolver.java)

Determine the type name of the given variable, unwrapping the expected array type. Can be used to later iterate over all classes with this name for lightweight checksbefore loading AST and fully resolving the type. @param var Variable node @param arrayDepth Expected array depth @return the short name of the class corresponding to the type of the variable, or null if the variable is not of class type orthe type is generic 

----------------------

][public static final InputStream getSystemResourceAsStream(String name)#java.lang (30299-30588)       (aClassLoader_hl.java)

Get a resource using the system classloader.  @param name the name of the resource relative to the system classloader @return an input stream for the resource, or null @since 1.1 

----------------------

, public static final InputStream getSystemResourceAsStream(String name)#java.lang (27229-27518)       (aClassLoader.java)

Get a resource using the system classloader.  @param name the name of the resource relative to the system classloader @return an input stream for the resource, or null @since 1.1 

----------------------

][boolean isAccessible(@NotNull PsiMember member, @NotNull PsiElement place, @Nullable PsiClass accessObjectClass)#com.intellij.psi (5751-5986)       (PsiResolveHelper.java)

Returns { @code true} if a member is accessible from a given place according to JLS 6.6 "Access Control". 

----------------------

, boolean isAccessible(@NotNull PsiMember member, @Nullable PsiModifierList modifierList, @NotNull PsiElement place, @Nullable PsiClass accessObjectClass, @Nullable PsiElement currentFileResolveScope)#com.intellij.psi (5334-5747)       (PsiResolveHelper.java)

Returns { @code true} if a member is accessible from a given place according to JLS 6.6 "Access Control". 

----------------------

, boolean isAccessible(@NotNull PsiPackage pkg, @NotNull PsiElement place)#com.intellij.psi (5990-6186)       (PsiResolveHelper.java)

Returns { @code true} if a package is accessible from a given place according to JLS 6.6 "Access Control". 

----------------------

][private boolean zzRefill() throws java.io.IOException #com.intellij.spi.parsing (16196-16425)       (_SPILexer.java)

Refills the input buffer.  @return{ @code false}, iff there was new input.  @exception java.io.IOExceptionif any IO-Error occurs 

----------------------

, private boolean zzRefill() throws java.io.IOException #com.intellij.lang.java.lexer (31288-31517)       (_JavaLexer.java)

Refills the input buffer.  @return{ @code false}, iff there was new input.  @exception java.io.IOExceptionif any IO-Error occurs 

----------------------

, private boolean zzRefill() throws java.io.IOException #com.intellij.lang.java.lexer (17384-17613)       (_JavaDocLexer.java)

Refills the input buffer.  @return{ @code false}, iff there was new input.  @exception java.io.IOExceptionif any IO-Error occurs 

----------------------

][@NotNullpublic abstract List<CompileTask> getBeforeTasks()#com.intellij.openapi.compiler (5632-5839)       (CompilerManager.java)

Returns the list of all tasks to be executed before compilation.  @return all tasks to be executed before compilation. 

----------------------

, @NotNullpublic abstract List<CompileTask> getAfterTaskList()#com.intellij.openapi.compiler (5843-6050)       (CompilerManager.java)

Returns the list of all tasks to be executed after compilation.  @return all tasks to be executed after compilation. 

----------------------

][public void test2() #com.intellij.uiDesigner.core (2758-2898)       (TextAreasTest.java)

textfield1 | textfield2 textfield3 (span 2) important: hspan should be greater than 0 

----------------------

, public void testTextAreas2() #com.intellij.uiDesigner.core (22812-22961)       (GridBagConverterTest.java)

textfield1 | textfield2 textfield3 (span 2) important: hspan should be greater than 0 

----------------------

][public boolean mutatesArg(int n) #com.intellij.codeInspection.dataFlow (1522-1669)       (MutationSignature.java)

 @param n argument number (zero-based) @return true if the method may mutate given argument 

----------------------

, public boolean preservesArg(int n) #com.intellij.codeInspection.dataFlow (1894-2046)       (MutationSignature.java)

 @param n argument number (zero-based) @return true if the method never mutates given argument 

----------------------

][public interface PsiResourceVariable extends PsiLocalVariable, PsiResourceListElement #com.intellij.psi (671-912)       (PsiResourceVariable.java)

Represents a resource variable of try-with-resources statement (automatic resource management) introduced in JDK 7.  @see PsiResourceList 

----------------------

, public interface PsiResourceList extends PsiElement, Iterable<PsiResourceListElement> #com.intellij.psi (168-423)       (PsiResourceList.java)

Represents a resource list of try-with-resources statement (automatic resource management) introduced in JDK 7.  @see PsiTryStatement#getResourceList() 

----------------------

][@Override@NotNullPsiClassType createTypeByFQClassName(@NotNull String qName, @NotNull GlobalSearchScope resolveScope)#com.intellij.psi (6510-6758)       (PsiElementFactory.java)

Creates a class type referencing a class with the specified class name in the specifiedsearch scope. 

----------------------

, @NotNullPsiClassType createTypeByFQClassName(@NotNull String qName, @NotNull GlobalSearchScope resolveScope)#com.intellij.psi (7025-7256)       (JVMElementFactory.java)

Creates a class type referencing a class with the specified class name in the specified search scope. 

----------------------

][public void yypushback(int number)#com.intellij.lang.java.lexer (19450-19786)       (_JavaDocLexer.java)

Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method  @param numberthe number of characters to be read again. This number must not be greater than yylength()! 

----------------------

, public void yypushback(int number)#com.intellij.spi.parsing (18262-18598)       (_SPILexer.java)

Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method  @param numberthe number of characters to be read again. This number must not be greater than yylength()! 

----------------------

, public void yypushback(int number)#com.intellij.lang.java.lexer (33354-33690)       (_JavaLexer.java)

Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method  @param numberthe number of characters to be read again. This number must not be greater than yylength()! 

----------------------

][private CharSequence zzBuffer = ""#com.intellij.lang.java.lexer (14751-14894)       (_JavaDocLexer.java)

 this buffer contains the current text to be matched and isthe source of the yytext() string 

----------------------

, private CharSequence zzBuffer = ""#com.intellij.spi.parsing (14033-14176)       (_SPILexer.java)

 this buffer contains the current text to be matched and isthe source of the yytext() string 

----------------------

, private CharSequence zzBuffer = ""#com.intellij.lang.java.lexer (28799-28942)       (_JavaLexer.java)

 this buffer contains the current text to be matched and isthe source of the yytext() string 

----------------------

][public final void yybegin(int newState) #com.intellij.lang.java.lexer (31659-31792)       (_JavaLexer.java)

Enters a new lexical state  @param newState the new lexical state 

----------------------

, public final void yybegin(int newState) #com.intellij.lang.java.lexer (17755-17888)       (_JavaDocLexer.java)

Enters a new lexical state  @param newState the new lexical state 

----------------------

, public final void yybegin(int newState) #com.intellij.spi.parsing (16567-16700)       (_SPILexer.java)

Enters a new lexical state  @param newState the new lexical state 

----------------------

][public ParameterInfoImpl(int oldParameterIndex, @NonNls String name, PsiType aType, @NonNls String defaultValue) #com.intellij.refactoring.changeSignature (1474-1739)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(PsiType) @see #withDefaultValue(String) 

----------------------

, public ParameterInfoImpl(int oldParameterIndex, @NonNls String name, PsiType aType, @NonNls String defaultValue, boolean useAnyVariable) #com.intellij.refactoring.changeSignature (1810-2133)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(PsiType) @see #withDefaultValue(String) @see #useAnySingleVariable() 

----------------------

, public ParameterInfoImpl(int oldParameterIndex, String name, CanonicalTypes.Type typeWrapper, String defaultValue) #com.intellij.refactoring.changeSignature (2264-2543)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(CanonicalTypes.Type) @see #withDefaultValue(String) 

----------------------

][public abstract RefactoringActionHandler createInvertBooleanHandler()#com.intellij.refactoring (8702-9062)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Invert Boolean refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}, that will be inverted 

----------------------

, public abstract RefactoringActionHandler createIntroduceVariableHandler()#com.intellij.refactoring (7797-8200)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Introduce Variable refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiExpression}, that will be an initializer for introduced variable. 

----------------------

][@NotNull BitString and(BitString other) #com.intellij.codeInspection.dataFlow.rangeSet (4641-4827)       (LongRangeUtil.java)

Performs bitwise-and over this and other BitString @param other other operand @return result of bitwise-and 

----------------------

, @NotNull BitString or(BitString other) #com.intellij.codeInspection.dataFlow.rangeSet (5076-5259)       (LongRangeUtil.java)

Performs bitwise-or over this and other BitString @param other other operand @return result of bitwise-or 

----------------------

, @NotNull BitString xor(BitString other) #com.intellij.codeInspection.dataFlow.rangeSet (5505-5691)       (LongRangeUtil.java)

Performs bitwise-xor over this and other BitString @param other other operand @return result of bitwise-xor 

----------------------

][@Contract(pure = true)public static @NotNull List<PsiPatternVariable> getExposedPatternVariables(@NotNull PsiExpression expression) #com.intellij.psi.util (563-896)       (JavaPsiPatternUtil.java)

 @param expression expression to search pattern variables in @return list of pattern variables declared within an expression that could be visible outside of given expression. 

----------------------

, @Contract(pure = true)public static @NotNull List<PsiPatternVariable> getExposedPatternVariablesIgnoreParent(@NotNull PsiExpression expression) #com.intellij.psi.util (1772-2174)       (JavaPsiPatternUtil.java)

 @param expression expression to search pattern variables in @return list of pattern variables declared within an expression that could be visible outside of given expressionunder some other parent (e.g. under PsiIfStatement). 

----------------------

][public class AmbiguousMethodCallTest extends LightDaemonAnalyzerTestCase #com.intellij.java.codeInsight.daemon (1200-1441)       (AmbiguousMethodCallTest.java)

This class is for "lightweight" tests only, i.e. those which can run inside default light project set upFor "heavyweight" tests use AdvHighlightingTest 

----------------------

, public class LightAdvHighlightingTest extends LightDaemonAnalyzerTestCase #com.intellij.java.codeInsight.daemon (2322-2564)       (LightAdvHighlightingTest.java)

This class is for "lightweight" tests only, i.e. those which can run inside default light project set upFor "heavyweight" tests use AdvHighlightingTest 

----------------------

][ExceptionHandler getExceptionHandler()#com.intellij.psi (2909-3157)       (JavaCodeFragment.java)

Gets the exception handler which is used to determine which exceptions are considered handledin the context where the fragment is used.  @return the exception handler instance. 

----------------------

, void setExceptionHandler(ExceptionHandler checker)#com.intellij.psi (2638-2905)       (JavaCodeFragment.java)

Sets the exception handler which is used to determine which exceptions are considered handledin the context where the fragment is used.  @param checker the exception handler instance. 

----------------------

][public interface RefMethod extends RefJavaElement #com.intellij.codeInspection.reference (980-1123)       (RefMethod.java)

A node in the reference graph corresponding to a Java method.  @author anna 

----------------------

, public interface RefField extends RefJavaElement #com.intellij.codeInspection.reference (756-897)       (RefField.java)

A node in the reference graph corresponding to a Java field.  @author anna 

----------------------

, public interface RefParameter extends RefJavaElement #com.intellij.codeInspection.reference (391-547)       (RefParameter.java)

A node in the reference graph corresponding to a Java method parameter.  @author anna 

----------------------

][public void setDefaultAssertionStatus(boolean enabled)#s, 0, allPackages, parentPackages.length,
                     packages.length) (38250-38673)       (aClassLoader_hl.java)

Set the default assertion status for classes loaded by this classloader,used unless overridden by a package or class request.  @param enabled true to set the default to enabled @see #setClassAssertionStatus(String, boolean) @see #setPackageAssertionStatus(String, boolean) @see #clearAssertionStatus() @since 1.4 

----------------------

, public void setDefaultAssertionStatus(boolean enabled)#s, 0, allPackages, parentPackages.length,
                     packages.length) (33811-34234)       (aClassLoader.java)

Set the default assertion status for classes loaded by this classloader,used unless overridden by a package or class request.  @param enabled true to set the default to enabled @see #setClassAssertionStatus(String, boolean) @see #setPackageAssertionStatus(String, boolean) @see #clearAssertionStatus() @since 1.4 

----------------------

][int getIncScrollButtonHeight() #com.intellij.openapi.editor.impl (195054-195376)       (bigFile.java)

This is helper method. It returns height of the bottom (increase) scroll barbutton. Please note, that it's possible to return real height only if scroll baris instance of BasicScrollBarUI. Otherwise it returns fake (but good enough :) )value. 

----------------------

, int getIncScrollButtonHeight() #com.intellij.openapi.editor.impl (98182-98502)       (performance.java)

This is helper method. It returns height of the bottom (increase) scrollbarbutton. Please note, that it's possible to return real height only if scrollbaris instance of BasicScrollBarUI. Otherwise it returns fake (but good enough :) )value. 

----------------------

, int getDecScrollButtonHeight() #com.intellij.openapi.editor.impl (97204-97522)       (performance.java)

This is helper method. It returns height of the top (descrease) scrollbarbutton. Please note, that it's possible to return real height only if scrollbaris instance of BasicScrollBarUI. Otherwise it returns fake (but good enough :) )value. 

----------------------

, int getDecScrollButtonHeight() #com.intellij.openapi.editor.impl (193263-193582)       (bigFile.java)

This is helper method. It returns height of the top (decrease) scroll barbutton. Please note, that it's possible to return real height only if scroll baris instance of BasicScrollBarUI. Otherwise it returns fake (but good enough :) )value. 

----------------------

, int getIncScrollButtonHeight() #com.intellij.openapi.editor.impl (194213-194535)       (bigFile.java)

This is helper method. It returns height of the bottom (increase) scroll barbutton. Please note, that it's possible to return real height only if scroll baris instance of BasicScrollBarUI. Otherwise it returns fake (but good enough :) )value. 

----------------------

, int getDecScrollButtonHeight() #com.intellij.openapi.editor.impl (194104-194423)       (bigFile.java)

This is helper method. It returns height of the top (decrease) scroll barbutton. Please note, that it's possible to return real height only if scroll baris instance of BasicScrollBarUI. Otherwise it returns fake (but good enough :) )value. 

----------------------

][double foo(int someInt) # (48-168)       (beforeThrowsWithoutParams.java)

 @param someInt blah-blah-blah @return blah-blah-blah @throws<caret> 

----------------------

, double foo(int someInt) # (51-174)       (beforeExceptionWithoutParams.java)

 @param someInt blah-blah-blah @return blah-blah-blah @exception<caret> 

----------------------

, double foo(int someInt) # (48-193)       (beforeThrows.java)

 @param someInt blah-blah-blah @return blah-blah-blah @throws<caret> IllegalArgumentException 

----------------------

, double foo(int someInt) # (51-199)       (beforeException.java)

 @param someInt blah-blah-blah @return blah-blah-blah @exception<caret> IllegalArgumentException 

----------------------

][private int charToVisibleWidth(char c, @JdkConstants.FontStyle int fontType, int currentX) #com.intellij.openapi.editor.impl (47819-48382)       (bigFile.java)

Allows to answer how much width requires given char to be represented on a screen.  @param ctarget character @param fontType font type to use for representation of the given character @param currentX current <code>'x'<code> position on a line where given character should be displayed @return width required to represent given char with the given settings on a screen;<code>'0'<code> if given char is a line break 

----------------------

, private int charToVisibleWidth(char c, @JdkConstants.FontStyle int fontType, int currentX) #com.intellij.openapi.editor.impl (48775-49346)       (bigFile.java)

Allows to answer how much width requires given char to be represented on a screen.  @param ctarget character @param fontType font type to use for representation of the given character @param currentX current <code>'x'<code> position on a line where given character should be displayed @return width required to represent given char with the given settings on a screen;<code>'0'<code> if given char is a line break 

----------------------

][boolean isStatic()#com.intellij.codeInspection.reference (1042-1185)       (RefJavaElement.java)

Checks if the element is { @code static}.  @return true if the element is static, false otherwise. 

----------------------

, boolean isFinal()#com.intellij.codeInspection.reference (898-1038)       (RefJavaElement.java)

Checks if the element is { @code final}.  @return true if the element is final, false otherwise. 

----------------------

][@NullablePsiClass findInnerClassByName(@NonNls String name, boolean checkBases)#com.intellij.psi (9176-9621)       (PsiClass.java)

Searches the class (and optionally its superclasses) for the inner class with the specified name.  @param name the name of the inner class to find. @param checkBases if true, the inner class is also searched in the base classes of the class. @return the inner class instance, or null if the inner class cannot be found. 

----------------------

, @NullablePsiField findFieldByName(@NonNls String name, boolean checkBases)#com.intellij.psi (6236-6646)       (PsiClass.java)

Searches the class (and optionally its superclasses) for the field with the specified name.  @param name the name of the field to find. @param checkBases if true, the field is also searched in the base classes of the class. @return the field instance, or null if the field cannot be found. 

----------------------

][@Nullablepublic abstract PsiPackage getPackageInSources(@NotNull PsiDirectory dir)#com.intellij.psi (901-1191)       (JavaDirectoryService.java)

Returns the package corresponding to the directory.  @return the package instance, or null if the directory does not correspond to any package or package is under resource roots 

----------------------

, @Nullablepublic abstract PsiPackage getPackage(@NotNull PsiDirectory dir)#com.intellij.psi (650-897)       (JavaDirectoryService.java)

Returns the package corresponding to the directory.  @return the package instance, or null if the directory does not correspond to any package. 

----------------------

][protected String findLibrary(String name)#s, 0, allPackages, parentPackages.length,
                     packages.length) (33029-33786)       (aClassLoader.java)

Called by <code>Runtime.loadLibrary()<code> to get an absolute pathto a (system specific) library that was requested by a class loadedby this classloader. The default implementation returns<code>null<code>. It should be implemented by subclasses when theyhave a way to find the absolute path to a library. If this methodreturns null the library is searched for in the default locations(the directories listed in the <code>java.library.path<code> systemproperty).  @param name the (system specific) name of the requested library @return the full pathname to the requested library, or null @see Runtime#loadLibrary() @since 1.2 

----------------------

, protected String findLibrary(String name)#s, 0, allPackages, parentPackages.length,
                     packages.length) (37468-38225)       (aClassLoader_hl.java)

Called by <code>Runtime.loadLibrary()<code> to get an absolute pathto a (system specific) library that was requested by a class loadedby this classloader. The default implementation returns<code>null<code>. It should be implemented by subclasses when theyhave a way to find the absolute path to a library. If this methodreturns null the library is searched for in the default locations(the directories listed in the <code>java.library.path<code> systemproperty).  @param name the (system specific) name of the requested library @return the full pathname to the requested library, or null @see Runtime#loadLibrary() @since 1.2 

----------------------

][public String replaceFirst(String regex, String replacement)# (42094-42795)       (StressClass.java)

Replaces the first substring match of the regular expression with agiven replacement. This is shorthand for <code>{ @link Pattern}.compile(regex).matcher(this).replaceFirst(replacement)<code>.  @param regex the pattern to match @param replacement the replacement string @return the modified string @throws NullPointerException if regex or replacement is null @throws PatternSyntaxException if regex is invalid @see #replaceAll(String, String) @see Pattern#compile(String) @see Pattern#matcher(CharSequence) @see Matcher#replaceFirst(String) @since 1.4 

----------------------

, public String replaceAll(String regex, String replacement)# (42878-43573)       (StressClass.java)

Replaces all matching substrings of the regular expression with agiven replacement. This is shorthand for <code>{ @link Pattern}.compile(regex).matcher(this).replaceAll(replacement)<code>.  @param regex the pattern to match @param replacement the replacement string @return the modified string @throws NullPointerException if regex or replacement is null @throws PatternSyntaxException if regex is invalid @see #replaceFirst(String, String) @see Pattern#compile(String) @see Pattern#matcher(CharSequence) @see Matcher#replaceAll(String) @since 1.4 

----------------------

][public abstract void enqueueClassUsagesProcessor(RefClass refClass, UsagesProcessor p)#com.intellij.codeInspection (1226-1609)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified class outside the current analysisscope be passed to the specified processor.  @param refClass the reference graph node for the class whose usages should be processed. @param pthe processor to pass the usages to. 

----------------------

, public abstract void enqueueDerivedMethodsProcessor(RefMethod refMethod, DerivedMethodsProcessor p)#com.intellij.codeInspection (2030-2468)       (GlobalJavaInspectionContext.java)

Requests that implementing or overriding methods of the specified method outsidethe current analysis scope be passed to the specified processor.  @param refMethod the reference graph node for the method whose derived methods should be processed. @param p the processor to pass the methods to. 

----------------------

, public abstract void enqueueMethodUsagesProcessor(RefMethod refMethod, UsagesProcessor p)#com.intellij.codeInspection (2859-3249)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified method outside the current analysisscope be passed to the specified processor.  @param refMethod the reference graph node for the method whose usages should be processed. @param p the processor to pass the usages to. 

----------------------

, public abstract void enqueueFieldUsagesProcessor(RefField refField, UsagesProcessor p)#com.intellij.codeInspection (2472-2855)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified field outside the current analysisscope be passed to the specified processor.  @param refField the reference graph node for the field whose usages should be processed. @param pthe processor to pass the usages to. 

----------------------

][@NullablePsiStatement getThenBranch()#com.intellij.psi (1112-1320)       (PsiIfStatement.java)

Returns the statement which is executed when the condition is true.  @return the statement instance, or null if the statement is incomplete. 

----------------------

, @NullablePsiStatement getElseBranch()#com.intellij.psi (1324-1565)       (PsiIfStatement.java)

Returns the statement which is executed when the condition is true.  @return the statement instance, or null if the statement has no { @code else}part or is incomplete. 

----------------------

][@Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public static boolean handleJavaGT(@NotNull final Editor editor, @NotNull final IElementType lt, @NotNull final IElementType gt, @NotNull final TokenSet invalidInsideReference) #com.intellij.codeInsight.editorActions (24470-24956)       (JavaTypedHandler.java)

needed for API compatibility only @deprecated Please use { @link TypedHandlerUtil#handleGenericGT} instead 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public static boolean isClassLikeIdentifier(int offset,@NotNull Editor editor,@NotNull HighlighterIterator iterator,@NotNull final IElementType idType) #com.intellij.codeInsight.editorActions (25639-26136)       (JavaTypedHandler.java)

needed for API compatibility only @deprecated Please use { @link TypedHandlerUtil#isClassLikeIdentifier} instead 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public static void handleAfterJavaLT(@NotNull final Editor editor, @NotNull final IElementType lt, @NotNull final IElementType gt, @NotNull final TokenSet invalidInsideReference) #com.intellij.codeInsight.editorActions (25049-25548)       (JavaTypedHandler.java)

needed for API compatibility only @deprecated Please use { @link TypedHandlerUtil#handleAfterGenericLT} instead 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public static void handleLTDeletion(@NotNull final Editor editor,final int offset,@NotNull final IElementType lt,@NotNull final IElementType gt,@NotNull final TokenSet invalidInsideReference) #com.intellij.codeInsight.editorActions (2248-2794)       (JavaBackspaceHandler.java)

needed for API compatibility only @deprecated Please use { @link TypedHandlerUtil#handleGenericGT} instead 

----------------------

][private StreamEx<PsiExpression> intermediateExpressions() #com.intellij.codeInspection.streamMigration (20843-21009)       (TerminalBlock.java)

 @return stream of physical expressions used in intermediate operations in arbitrary order 

----------------------

, StreamEx<PsiExpression> intermediateAndSourceExpressions() #com.intellij.codeInspection.streamMigration (21111-21296)       (TerminalBlock.java)

 @return stream of physical expressions used in stream source and intermediate operations in arbitrary order 

----------------------

][@NotNullList<? extends JvmClass> findClasses(@NonNls @NotNull String qualifiedName, @NotNull GlobalSearchScope scope)#com.intellij.lang.jvm.facade (1845-2326)       (JvmFacade.java)

Searches the specified scope within the project for classes with the specified full-qualifiedname and returns all found classes.  @param qualifiedName the full-qualified name of the class to find. @param scope the scope to search. @return the array of found classes, or an empty array if no classes are found. 

----------------------

, public abstract PsiClass @NotNull [] findClasses(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope)#com.intellij.psi (1604-2133)       (PsiElementFinder.java)

Searches the specified scope within the project for classes with the specified full-qualifiedname and returns all found classes.  @param qualifiedName the full-qualified name of the class to find. @param scope the scope to search. @return the array of found classes, or an empty array if no classes are found. @see JavaPsiFacade#findClasses(String, GlobalSearchScope) 

----------------------

][public CFGBuilder push(DfType value, PsiExpression expression) #com.intellij.codeInspection.dataFlow (6003-6364)       (CFGBuilder.java)

Generate instructions to push given DfType on stack and bind it to given expression.<p>Stack before: ...<p>Stack after: ... value  @param value value to push @param expression expression which result is being pushed @return this builder 

----------------------

, public CFGBuilder push(DfaValue value, PsiExpression expression) #com.intellij.codeInspection.dataFlow (5277-5642)       (CFGBuilder.java)

Generate instructions to push given DfaValue on stack and bind it to given expression.<p>Stack before: ...<p>Stack after: ... value  @param value value to push @param expression expression which result is being pushed @return this builder 

----------------------

][abstractboolean needHeadBreak(@NotNull E first)#com.intellij.codeInsight.intention.impl.lists (1187-1371)       (AbstractListIntentionAction.java)

supposed to delegate to language formatter settings @return true if it requires line break before first element 

----------------------

, abstract boolean needTailBreak(@NotNull E last)#com.intellij.codeInsight.intention.impl.lists (1003-1183)       (AbstractListIntentionAction.java)

supposed to delegate to language formatter settings @return true if it requires line break after last element 

----------------------

][PsiClassInitializer[] EMPTY_ARRAY = new PsiClassInitializer[0]#com.intellij.psi (823-999)       (PsiClassInitializer.java)

The empty array of PSI class initializers which can be reused to avoid unnecessary allocations. 

----------------------

, PsiImportStatement[] EMPTY_ARRAY = new PsiImportStatement[0]#com.intellij.psi (798-971)       (PsiImportStatement.java)

The empty array of PSI import statements which can be reused to avoid unnecessary allocations. 

----------------------

, PsiClass @NotNull [] EMPTY_ARRAY = new PsiClass[0]#com.intellij.psi (1093-1246)       (PsiClass.java)

The empty array of PSI classes which can be reused to avoid unnecessary allocations. 

----------------------

, PsiField[] EMPTY_ARRAY = new PsiField[0]#com.intellij.psi (575-717)       (PsiField.java)

The empty array of PSI fields which can be reused to avoid unnecessary allocations. 

----------------------

, PsiParameter[] EMPTY_ARRAY = new PsiParameter[0]#com.intellij.psi (571-725)       (PsiParameter.java)

The empty array of PSI parameters which can be reused to avoid unnecessary allocations. 

----------------------

, PsiExpression[] EMPTY_ARRAY = new PsiExpression[0]#com.intellij.psi (481-638)       (PsiExpression.java)

The empty array of PSI expressions which can be reused to avoid unnecessary allocations. 

----------------------

, PsiCatchSection[] EMPTY_ARRAY = new PsiCatchSection[0]#com.intellij.psi (947-1111)       (PsiCatchSection.java)

The empty array of PSI catch sections which can be reused to avoid unnecessary allocations. 

----------------------

, PsiTypeElement[] EMPTY_ARRAY = new PsiTypeElement[0]#com.intellij.psi (561-720)       (PsiTypeElement.java)

The empty array of PSI directories which can be reused to avoid unnecessary allocations. 

----------------------

, PsiTypeParameter[] EMPTY_ARRAY = new PsiTypeParameter[0]#com.intellij.psi (688-855)       (PsiTypeParameter.java)

The empty array of PSI type parameters which can be reused to avoid unnecessary allocations. 

----------------------

, PsiIdentifier[] EMPTY_ARRAY = new PsiIdentifier[0]#com.intellij.psi (725-882)       (PsiIdentifier.java)

The empty array of PSI identifiers which can be reused to avoid unnecessary allocations. 

----------------------

, PsiAnnotationMemberValue[] EMPTY_ARRAY = new PsiAnnotationMemberValue[0]#com.intellij.psi (844-1036)       (PsiAnnotationMemberValue.java)

The empty array of PSI annotation member values which can be reused to avoid unnecessary allocations. 

----------------------

, PsiImportStatementBase[] EMPTY_ARRAY = new PsiImportStatementBase[0]#com.intellij.psi (872-1058)       (PsiImportStatementBase.java)

The empty array of PSI base import statements which can be reused to avoid unnecessary allocations. 

----------------------

, PsiAnnotation[] EMPTY_ARRAY = new PsiAnnotation[0]#com.intellij.psi (761-918)       (PsiAnnotation.java)

The empty array of PSI annotations which can be reused to avoid unnecessary allocations. 

----------------------

, PsiAnnotationMethod[] EMPTY_ARRAY = new PsiAnnotationMethod[0]#com.intellij.psi (896-1072)       (PsiAnnotationMethod.java)

The empty array of PSI annotation methods which can be reused to avoid unnecessary allocations. 

----------------------

, PsiMethod[] EMPTY_ARRAY = new PsiMethod[0]#com.intellij.psi (1084-1229)       (PsiMethod.java)

The empty array of PSI methods which can be reused to avoid unnecessary allocations. 

----------------------

, PsiCodeBlock[] EMPTY_ARRAY = new PsiCodeBlock[0]#com.intellij.psi (868-1023)       (PsiCodeBlock.java)

The empty array of PSI code blocks which can be reused to avoid unnecessary allocations. 

----------------------

, PsiImportStaticStatement[] EMPTY_ARRAY = new PsiImportStaticStatement[0]#com.intellij.psi (829-1021)       (PsiImportStaticStatement.java)

The empty array of PSI static import statements which can be reused to avoid unnecessary allocations. 

----------------------

, PsiJavaCodeReferenceElement[] EMPTY_ARRAY = new PsiJavaCodeReferenceElement[0]#com.intellij.psi (1027-1221)       (PsiJavaCodeReferenceElement.java)

The empty array of PSI Java code references which can be reused to avoid unnecessary allocations. 

----------------------

, PsiMember[] EMPTY_ARRAY = new PsiMember[0]#com.intellij.psi (378-523)       (PsiMember.java)

The empty array of PSI members which can be reused to avoid unnecessary allocations. 

----------------------

, PsiNameValuePair[] EMPTY_ARRAY = new PsiNameValuePair[0]#com.intellij.psi (872-1040)       (PsiNameValuePair.java)

The empty array of PSI namevalue pairs which can be reused to avoid unnecessary allocations. 

----------------------

][	private boolean setNextFocusable(Object current, boolean outgo) #in PBP
				Toolkit toolkit = getToolkit() (141262-141421)       (aThinlet.java)

	 @return next focusable component is found (not the first of the desktopdialog)	 

----------------------

, private boolean setNextFocusable(Object current, boolean outgo) #in PBP
                Toolkit toolkit = getToolkit() (765299-765461)       (ThinletBig.java)

 @return next focusable component is found (not the first of the desktopdialog) 

----------------------

, 	private boolean setNextFocusable(Object current, boolean outgo) #in PBP
				Toolkit toolkit = getToolkit() (204406-204565)       (aThinlet_hl.java)

	 @return next focusable component is found (not the first of the desktopdialog)	 

----------------------

, private boolean setNextFocusable(Object current, boolean outgo) #in PBP
                Toolkit toolkit = getToolkit() (163385-163547)       (Thinlet.java)

 @return next focusable component is found (not the first of the desktopdialog) 

----------------------

][public class BugTest # (29-173)       (BugTest.java)

Created by IntelliJ IDEA.Time: 4:15:48 PMTo change this template use File | Settings | File Templates. 

----------------------

, public class BaseClass #bug.test (19-165)       (BaseClass.java)

Created by IntelliJ IDEA.Time: 4:12:50 PMTo change this template use File | Settings | File Templates. 

----------------------

][public abstract long min()#com.intellij.codeInspection.dataFlow.rangeSet (3513-3654)       (LongRangeSet.java)

 @return a minimal value contained in the set @throws NoSuchElementException if set is empty 

----------------------

, public abstract long max()#com.intellij.codeInspection.dataFlow.rangeSet (3658-3799)       (LongRangeSet.java)

 @return a maximal value contained in the set @throws NoSuchElementException if set is empty 

----------------------

][public PsiClass @NotNull [] getClasses(@Nullable String className, @NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) #com.intellij.psi (6409-6912)       (PsiElementFinder.java)

Returns the list of classes in the specified package and in the specified search scope.  @param className short name of the class @param psiPackage the package to return the list of classes in. @param scope the scope in which classes are searched. @return the list of classes. @see PsiPackage#getClasses(GlobalSearchScope) 

----------------------

, public PsiClass @NotNull [] getClasses(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) #com.intellij.psi (3061-3490)       (PsiElementFinder.java)

Returns the list of classes in the specified package and in the specified search scope.  @param psiPackage the package to return the list of classes in. @param scope the scope in which classes are searched. @return the list of classes. @see PsiPackage#getClasses(GlobalSearchScope) 

----------------------

][public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createTempWithQueryHandler()#com.intellij.refactoring (2207-2545)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Temp With Query refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createMethodDuplicatesHandler()#com.intellij.refactoring (4651-5010)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Method Code Duplicates refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts one { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createAnonymousToInnerHandler()#com.intellij.refactoring (474-810)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Anonymous To Inner refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createExtractMethodHandler()#com.intellij.refactoring (6547-6876)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

][public interface PsiRequiresStatement extends PsiModifierListOwner, PsiStatement #com.intellij.psi (212-375)       (PsiRequiresStatement.java)

Represents a { @code requires} directive of a Java module declaration. 

----------------------

, public interface PsiUsesStatement extends PsiStatement #com.intellij.psi (212-345)       (PsiUsesStatement.java)

Represents a { @code uses} directive of a Java module declaration. 

----------------------

, public interface PsiProvidesStatement extends PsiStatement #com.intellij.psi (212-353)       (PsiProvidesStatement.java)

Represents a { @code provides} directive of a Java module declaration. 

----------------------

][public static PsiType getMethodReferenceReturnType(PsiMethodReferenceExpression expression) #com.intellij.psi (4360-4665)       (PsiMethodReferenceUtil.java)

Returns actual return type of method reference (not the expected one)  @param expression a method reference to get the return type of @return an actual method reference return type 

----------------------

, private static PsiType getMethodReferenceReturnType(PsiMethodReferenceExpression expression, JavaResolveResult result) #com.intellij.psi (4761-5154)       (PsiMethodReferenceUtil.java)

Returns actual return type of method reference (not the expected one)  @param expression a method reference to get the return type of @param result the result of method reference resolution @return an actual method reference return type 

----------------------

][PsiClass @NotNull [] getAllInnerClasses()#com.intellij.psi (6054-6232)       (PsiClass.java)

Returns the list of inner classes for the class and all its superclasses.  @return the list of inner classes. 

----------------------

, @OverridePsiClass @NotNull [] getInnerClasses()#com.intellij.psi (5387-5549)       (PsiClass.java)

Returns the list of inner classes for the class.  @return the list of inner classes. 

----------------------

][public synchronized void updateLineWidthIfNecessary(int logicalLine, int widthInPixels) #com.intellij.openapi.editor.impl (250215-250883)       (bigFile.java)

Notifies current container about visual width change of the target logical line.<p>Please note that there is a possible case that particular logical line is represented in more than one visual lines,hence, this method may be called multiple times with the same logical line argument but different with values. Currentcontainer is expected to store max of the given values then.  @param logicalLine logical line which visual width is changed @param widthInPixels visual width of the given logical line 

----------------------

, public synchronized void updateLineWidthIfNecessary(int logicalLine, int widthInPixels) #com.intellij.openapi.editor.impl (251188-251856)       (bigFile.java)

Notifies current container about visual width change of the target logical line.<p>Please note that there is a possible case that particular logical line is represented in more than one visual lines,hence, this method may be called multiple times with the same logical line argument but different with values. Currentcontainer is expected to store max of the given values then.  @param logicalLine logical line which visual width is changed @param widthInPixels visual width of the given logical line 

----------------------

][@Nullablepublic static PsiMethod findPublicStaticVoidMainMethod(PsiClass clazz) #name
                return importStatementOnDemand (12175-12432)       (PsiAdapter.java)

Finds the public static void main(String[] args) method.  @param clazz the class. @return the method if it exists, null if not. 

----------------------

, @Nullablepublic static PsiMethod findEqualsMethod(PsiClass clazz) #name
                return importStatementOnDemand (17985-18221)       (PsiAdapter.java)

Finds the public boolean equals(Object o) method.  @param clazz the class. @return the method if it exists, null if not. 

----------------------

, @Nullablepublic static PsiMethod findHashCodeMethod(PsiClass clazz) #name
                return importStatementOnDemand (19376-19604)       (PsiAdapter.java)

Finds the public int hashCode() method.  @param clazz the class. @return the method if it exists, null if not. 

----------------------

][protected final Class defineClass(String name, byte[] data, int offset,int len) throws <error descr="Cannot resolve symbol 'ClassFormatError'">ClassFormatError</error>#java.lang (18243-19432)       (aClassLoader_hl.java)

Helper to define a class using a string of bytes without aProtectionDomain. Subclasses should call this method from their<code>findClass()<code> implementation. The name should use '.'separators, and discard the trailing ".class".The default protectiondomain has the permissions of<code>Policy.getPolicy().getPermissions(new CodeSource(null, null))<code>.  @param name the name to give the class, or null if unknown @param data the data representing the classfile, in classfile format @param offset the offset into the data where the classfile starts @param len the length of the classfile data in the array @return the class that was defined @throws ClassFormatError if data is not in proper classfile format @throws IndexOutOfBoundsException if offset or len is negative, oroffset + len exceeds data @throws SecurityException if name starts with "java." @since 1.1 

----------------------

, protected final Class defineClass(String name, byte[] data, int offset,int len) throws ClassFormatError#java.lang (16220-17345)       (aClassLoader.java)

Helper to define a class using a string of bytes without aProtectionDomain. Subclasses should call this method from their<code>findClass()<code> implementation. The name should use '.'separators, and discard the trailing ".class".The default protectiondomain has the permissions of<code>Policy.getPolicy().getPermissions(new CodeSource(null, null))<code>.  @param name the name to give the class, or null if unknown @param data the data representing the classfile, in classfile format @param offset the offset into the data where the classfile starts @param len the length of the classfile data in the array @return the class that was defined @throws ClassFormatError if data is not in proper classfile format @throws IndexOutOfBoundsException if offset or len is negative, oroffset + len exceeds data @throws SecurityException if name starts with "java." @since 1.1 

----------------------

][@NotNullpublic abstract PsiClass createEnum(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (4131-4575)       (JavaDirectoryService.java)

Creates an enumeration class with the specified name in the directory.  @param name the name of the enumeration class to create (not including the file extension). @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createClass(@NotNull PsiDirectory dir, @NotNull String name, @NotNull String templateName) throws IncorrectOperationException#com.intellij.psi (1816-2343)       (JavaDirectoryService.java)

Creates a class with the specified name in the directory.  @param name the name of the class to create (not including the file extension). @param templateName custom file template to create class text based on. @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createClass(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (1392-1812)       (JavaDirectoryService.java)

Creates a class with the specified name in the directory.  @param name the name of the class to create (not including the file extension). @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createInterface(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (3684-4127)       (JavaDirectoryService.java)

Creates an interface class with the specified name in the directory.  @param name the name of the interface to create (not including the file extension). @return the created interface instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createAnnotationType(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (5019-5471)       (JavaDirectoryService.java)

Creates an annotation class with the specified name in the directory.  @param name the name of the annotation class to create (not including the file extension). @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createRecord(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (4579-5015)       (JavaDirectoryService.java)

Creates a record class with the specified name in the directory.  @param name the name of the record class to create (not including the file extension). @return the created record instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

][@NotNullpublic DfType getDfType(PsiExpression expression) #com.intellij.codeInspection.dataFlow (7513-7906)       (CommonDataflow.java)

 @param expression an expression to infer the DfType, must be deparenthesized. @return DfType for that expression, assuming assertions are disabled.May return { @link DfTypes#TOP} if no information from dataflow is known about this expression @see #getDfTypeNoAssertions(PsiExpression) 

----------------------

, @NotNullpublic DfType getDfTypeNoAssertions(PsiExpression expression) #com.intellij.codeInspection.dataFlow (8029-8422)       (CommonDataflow.java)

 @param expression an expression to infer the DfType, must be deparenthesized. @return DfType for that expression, assuming assertions are disabled.May return { @link DfTypes#TOP} if no information from dataflow is known about this expression @see #getDfType(PsiExpression) 

----------------------

][static final ProtectionDomain defaultProtectionDomain#java.lang (8045-8225)       (aClassLoader.java)

The default protection domain, used when defining a class with a nullparameter for the domain. 

----------------------

, static final <error descr="Cannot resolve symbol 'ProtectionDomain'">ProtectionDomain</error> defaultProtectionDomain#java.lang (9185-9429)       (aClassLoader_hl.java)

The default protection domain, used when defining a class with a nullparameter for the domain. 

----------------------

][PsiField @NotNull [] getAllFields()#com.intellij.psi (5728-5885)       (PsiClass.java)

Returns the list of fields in the class and all its superclasses.  @return the list of fields. 

----------------------

, PsiMethod @NotNull [] getAllMethods()#com.intellij.psi (5889-6050)       (PsiClass.java)

Returns the list of methods in the class and all its superclasses.  @return the list of methods. 

----------------------

][@Nullablepublic Wrap arrange(ASTNode child,ASTNode parent,CommonCodeStyleSettings settings,JavaCodeStyleSettings javaSettings,Wrap suggestedWrap,AbstractJavaBlock reservedWrapsProvider) #com.intellij.psi.formatter.java.wrap.impl (1516-3380)       (JavaChildWrapArranger.java)

Provides implementation of { @link JavaWrapManager#arrangeChildWrap} method.  @param child child node which { @link Wrap wrap} is to be defined @param parentdirect or indirect parent of the given { @code 'child'} node. Defines usage context of { @code 'child'} node processing @param settingscode style settings to use during wrap definition @param suggestedWrap wrap suggested to use by clients of current class. I.e. those clients offer wrap to use based on their information about current processing state. However, it's possible that they don't know details of fine-grained wrap definition algorithm encapsulated at the current class. Hence, this method takes suggested wrap into consideration but is not required to use it all the time node based on the given parameters @param reservedWrapsProvider reserved { @code 'element type -> wrap instance'} mappings provider. <b>Note:<b> this argument is considered to be a part of legacy heritage and is intended to be removed as soon as formatting code refactoring is done @returnwrap to use for the given { @code 'child'} node if it's possible to define the one; { @code null} otherwise 

----------------------

, @Nullablepublic Wrap arrangeChildWrap(ASTNode child,ASTNode parent,CommonCodeStyleSettings settings, JavaCodeStyleSettings javaSettings, Wrap suggestedWrap, AbstractJavaBlock reservedWrapsProvider)#com.intellij.psi.formatter.java.wrap (2231-4378)       (JavaWrapManager.java)

Tries to define the wrap to use for the { @link Block block} for the given { @code 'child'} node. It's assumed thatgiven { @code 'child'} node is descendant (direct or indirect) of the given { @code 'parent'} node.I.e. { @code 'parent'} node defines usage context for the { @code 'child'} node.  @param child child node which { @link Wrap wrap} is to be defined @param parentdirect or indirect parent of the given { @code 'child'} node. Defines usage context of { @code 'child'} node processing @param settingscode style settings to use during wrap definition @param suggestedWrap wrap suggested to use by clients of current class. I.e. those clients offer wrap to use based on their information about current processing state. However, it's possible that they don't know details of fine-grained wrap definition algorithm encapsulated at the current class. Hence, this method takes suggested wrap into consideration but is not required to use it all the time node based on the given parameters @param reservedWrapsProvider reserved { @code 'element type -> wrap instance'} mappings provider. <b>Note:<b> this argument is considered to be a part of legacy heritage and is intended to be removed as soon as formatting code refactoring is done @returnwrap to use for the given { @code 'child'} node if it's possible to define the one; { @code null} otherwise 

----------------------

][public abstract void enqueueClassUsagesProcessor(RefClass refClass, UsagesProcessor p)#com.intellij.codeInspection (1226-1609)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified class outside the current analysisscope be passed to the specified processor.  @param refClass the reference graph node for the class whose usages should be processed. @param pthe processor to pass the usages to. 

----------------------

, public abstract void enqueueDerivedClassesProcessor(RefClass refClass, DerivedClassesProcessor p)#com.intellij.codeInspection (1613-2026)       (GlobalJavaInspectionContext.java)

Requests that derived classes of the specified class outside the current analysisscope be passed to the specified processor.  @param refClass the reference graph node for the class whose derived classes should be processed. @param pthe processor to pass the classes to. 

----------------------

, public abstract void enqueueMethodUsagesProcessor(RefMethod refMethod, UsagesProcessor p)#com.intellij.codeInspection (2859-3249)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified method outside the current analysisscope be passed to the specified processor.  @param refMethod the reference graph node for the method whose usages should be processed. @param p the processor to pass the usages to. 

----------------------

, public abstract void enqueueFieldUsagesProcessor(RefField refField, UsagesProcessor p)#com.intellij.codeInspection (2472-2855)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified field outside the current analysisscope be passed to the specified processor.  @param refField the reference graph node for the field whose usages should be processed. @param pthe processor to pass the usages to. 

----------------------

][@Deprecatedpublic JdkComboBox(@NotNull final ProjectSdksModel jdkModel, @Nullable Condition<? super SdkTypeId> filter) #com.intellij.openapi.roots.ui.configuration (1802-2091)       (JdkComboBox.java)

 @deprecated since { @link #setSetupButton} methods are deprecated, use themore specific constructor to pass all parameters 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public JdkComboBox(@NotNull final ProjectSdksModel jdkModel) #com.intellij.openapi.roots.ui.configuration (1492-1768)       (JdkComboBox.java)

 @deprecated since { @link #setSetupButton} methods are deprecated, use themore specific constructor to pass all parameters 

----------------------

][public InputStream getResourceAsStream(String name)#java.lang (29479-30086)       (aClassLoader_hl.java)

Get a resource as stream using this classloader or one of its parents.First calls <code>getResource()<code> and if that returns a URL tothe resource then it calls and returns the InputStream given by<code>URL.openStream()<code>. <p>Subclasses should not override this method but should override<code>findResource()<code> which is called by this method.  @param name the name of the resource relative to this classloader @return an InputStream to the resource, or null @since 1.1 

----------------------

, public InputStream getResourceAsStream(String name)#java.lang (26409-27016)       (aClassLoader.java)

Get a resource as stream using this classloader or one of its parents.First calls <code>getResource()<code> and if that returns a URL tothe resource then it calls and returns the InputStream given by<code>URL.openStream()<code>. <p>Subclasses should not override this method but should override<code>findResource()<code> which is called by this method.  @param name the name of the resource relative to this classloader @return an InputStream to the resource, or null @since 1.1 

----------------------

][public ProblemDescriptor @Nullable [] checkClass(@NotNull UClass aClass, @NotNull InspectionManager manager, boolean isOnTheFly) #com.intellij.codeInspection (1793-2305)       (AbstractBaseUastLocalInspectionTool.java)

Override this to report problems at class level.  @param aClass to check. @param managerInspectionManager to ask for ProblemDescriptors from. @param isOnTheFly true if called during on the fly editor highlighting. Called from Inspect Code action otherwise. @return { @code null} if no problems found or not applicable at class level. 

----------------------

, public ProblemDescriptor @Nullable [] checkMethod(@NotNull UMethod method, @NotNull InspectionManager manager, boolean isOnTheFly) #com.intellij.codeInspection (1252-1768)       (AbstractBaseUastLocalInspectionTool.java)

Override this to report problems at method level.  @param method to check. @param managerInspectionManager to ask for ProblemDescriptors from. @param isOnTheFly true if called during on the fly editor highlighting. Called from Inspect Code action otherwise. @return { @code null} if no problems found or not applicable at method level. 

----------------------

, public ProblemDescriptor @Nullable [] checkField(@NotNull UField field, @NotNull InspectionManager manager, boolean isOnTheFly) #com.intellij.codeInspection (2330-2841)       (AbstractBaseUastLocalInspectionTool.java)

Override this to report problems at field level.  @param fieldto check. @param managerInspectionManager to ask for ProblemDescriptors from. @param isOnTheFly true if called during on the fly editor highlighting. Called from Inspect Code action otherwise. @return { @code null} if no problems found or not applicable at field level. 

----------------------

, public ProblemDescriptor @Nullable [] checkClass(@NotNull PsiClass aClass, @NotNull InspectionManager manager, boolean isOnTheFly) #com.intellij.codeInspection (926-1440)       (AbstractBaseJavaLocalInspectionTool.java)

Override this to report problems at class level.  @param aClass to check. @param managerInspectionManager to ask for ProblemDescriptors from. @param isOnTheFly true if called during on the fly editor highlighting. Called from Inspect Code action otherwise. @return { @code null} if no problems found or not applicable at class level. 

----------------------

, public ProblemDescriptor @Nullable [] checkField(@NotNull PsiField field, @NotNull InspectionManager manager, boolean isOnTheFly) #com.intellij.codeInspection (1465-1978)       (AbstractBaseJavaLocalInspectionTool.java)

Override this to report problems at field level.  @param fieldto check. @param managerInspectionManager to ask for ProblemDescriptors from. @param isOnTheFly true if called during on the fly editor highlighting. Called from Inspect Code action otherwise. @return { @code null} if no problems found or not applicable at field level. 

----------------------

, public ProblemDescriptor @Nullable [] checkMethod(@NotNull PsiMethod method, @NotNull InspectionManager manager, boolean isOnTheFly) #com.intellij.codeInspection (383-901)       (AbstractBaseJavaLocalInspectionTool.java)

Override this to report problems at method level.  @param method to check. @param managerInspectionManager to ask for ProblemDescriptors from. @param isOnTheFly true if called during on the fly editor highlighting. Called from Inspect Code action otherwise. @return { @code null} if no problems found or not applicable at method level. 

----------------------

][@Nullablepublic abstract PsiPackage findPackage(@NonNls @NotNull String qualifiedName)#com.intellij.psi (1499-1809)       (JavaPsiFacade.java)

Searches the project for the package with the specified full-qualified name and returns oneif it is found.  @return the PSI package, or { @code null} if no package with such name is found. 

----------------------

, @Nullablepublic abstract PsiClass findClass(@NonNls @NotNull String qualifiedName, @NotNull GlobalSearchScope scope)#com.intellij.psi (769-1128)       (JavaPsiFacade.java)

Searches the specified scope within the project for a class with the specified full-qualifiedname and returns one if it is found.  @return the PSI class, or { @code null} if no class with such name is found. 

----------------------

][@Contract("null -> false")public static boolean isConstructorCall(@Nullable PsiElement call) #com.intellij.util (2529-2757)       (JavaPsiConstructorUtil.java)

 @param call element to check @return true if given element is { @code this} or { @code super} constructor call 

----------------------

, @Contract("null -> false")public static boolean isSuperConstructorCall(@Nullable PsiElement call) #com.intellij.util (2053-2272)       (JavaPsiConstructorUtil.java)

 @param call element to check @return true if given element is a { @code super} constructor call 

----------------------

][public void testSpans1() #com.intellij.uiDesigner.core (15202-15325)       (GridBagConverterTest.java)

button(can grow) | text field (want grow)text field (want grow, span 2) 

----------------------

, public void test2() #com.intellij.uiDesigner.core (2782-2897)       (SpansTest.java)

button(can grow) | text field (can grow)text field (want grow, span 2) 

----------------------

, public void testSpans2() #com.intellij.uiDesigner.core (16723-16845)       (GridBagConverterTest.java)

button(can grow) | text field (can grow)text field (want grow, span 2) 

----------------------

, public void test1() #com.intellij.uiDesigner.core (1143-1259)       (SpansTest.java)

button(can grow) | text field (want grow)text field (want grow, span 2) 

----------------------

][public final char yycharat(int pos) #com.intellij.lang.java.lexer (18109-18457)       (_JavaDocLexer.java)

Returns the character at position { @code pos} from thematched text. It is equivalent to yytext().charAt(pos), but faster  @param pos the position of the character to fetch. A value from 0 to yylength()-1.  @return the character at position pos 

----------------------

, public final char yycharat(int pos) #com.intellij.spi.parsing (16921-17269)       (_SPILexer.java)

Returns the character at position { @code pos} from thematched text. It is equivalent to yytext().charAt(pos), but faster  @param pos the position of the character to fetch. A value from 0 to yylength()-1.  @return the character at position pos 

----------------------

, public final char yycharat(int pos) #com.intellij.lang.java.lexer (32013-32361)       (_JavaLexer.java)

Returns the character at position { @code pos} from thematched text. It is equivalent to yytext().charAt(pos), but faster  @param pos the position of the character to fetch. A value from 0 to yylength()-1.  @return the character at position pos 

----------------------

][@NullablePsiJavaToken getRParenth()#com.intellij.psi (1474-1677)       (PsiForeachStatement.java)

Returns the closing parenthesis enclosing the statement header.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1011-1217)       (PsiWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (733-944)       (PsiForStatement.java)

Returns the opening parenthesis enclosing the statement header.  @return the opening parenthesis, or { @code null} if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (948-1159)       (PsiForStatement.java)

Returns the closing parenthesis enclosing the statement header.  @return the closing parenthesis, or { @code null} if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (2877-3083)       (PsiIfStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1205-1411)       (PsiDoWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

][static final ClassLoader systemClassLoader =VMClassLoader.getSystemClassLoader()#java.lang (6618-6873)       (aClassLoader.java)

The System Class Loader (a.k.a. Application Class Loader). The onereturned by ClassLoader.getSystemClassLoader. 

----------------------

, static final ClassLoader systemClassLoader =<error descr="Cannot resolve symbol 'VMClassLoader'">VMClassLoader</error>.getSystemClassLoader()#java.lang (7196-7512)       (aClassLoader_hl.java)

The System Class Loader (a.k.a. Application Class Loader). The onereturned by ClassLoader.getSystemClassLoader. 

----------------------

][public static ClassLoader getSystemClassLoader()#java.lang (30807-32078)       (aClassLoader_hl.java)

Returns the system classloader. The system classloader (also calledthe application classloader) is the classloader that is used toload the application classes on the classpath (given by the systemproperty <code>java.class.path<code>. This is set as the contextclass loader for a thread. The system property<code>java.system.class.loader<code>, if defined, is taken to be thename of the class to use as the system class loader, which must havea public constructor which takes a ClassLoader as a parent. The parentclass loader passed in the constructor is the default system classloader. <p>Note that this is different from the bootstrap classloader thatactually loads all the real "system" classes. <p>A security check will be performed for<code>RuntimePermission("getClassLoader")<code> if the calling classis not a parent of the system class loader.  @return the system class loader @throws SecurityException if the security check fails @throws IllegalStateException if this is called recursively @throws Error if <code>java.system.class.loader<code> fails to load @since 1.2 

----------------------

, public static ClassLoader getSystemClassLoader()#java.lang (27737-29008)       (aClassLoader.java)

Returns the system classloader. The system classloader (also calledthe application classloader) is the classloader that is used toload the application classes on the classpath (given by the systemproperty <code>java.class.path<code>. This is set as the contextclass loader for a thread. The system property<code>java.system.class.loader<code>, if defined, is taken to be thename of the class to use as the system class loader, which must havea public constructor which takes a ClassLoader as a parent. The parentclass loader passed in the constructor is the default system classloader. <p>Note that this is different from the bootstrap classloader thatactually loads all the real "system" classes. <p>A security check will be performed for<code>RuntimePermission("getClassLoader")<code> if the calling classis not a parent of the system class loader.  @return the system class loader @throws SecurityException if the security check fails @throws IllegalStateException if this is called recursively @throws Error if <code>java.system.class.loader<code> fails to load @since 1.2 

----------------------

][private static final int ZZ_LEXSTATE[] = #com.intellij.spi.parsing (1361-1658)       (_SPILexer.java)

ZZ_LEXSTATE[l] is the state in the DFA for the lexical state lZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the beginning of a linel is of the form l = 2k, k a non negative integer 

----------------------

, private static final int ZZ_LEXSTATE[] = #com.intellij.lang.java.lexer (964-1261)       (_JavaLexer.java)

ZZ_LEXSTATE[l] is the state in the DFA for the lexical state lZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the beginning of a linel is of the form l = 2k, k a non negative integer 

----------------------

, private static final int ZZ_LEXSTATE[] = #com.intellij.lang.java.lexer (1274-1571)       (_JavaDocLexer.java)

ZZ_LEXSTATE[l] is the state in the DFA for the lexical state lZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the beginning of a linel is of the form l = 2k, k a non negative integer 

----------------------

][void mmm(String t) # (140-245)       (beforeChooseReplaceable.java)

 @deprecated use { @link #mmm1(int)} or { @link #mmm2(String)} instead 

----------------------

, void mmm(String t) # (134-239)       (afterChooseReplaceable.java)

 @deprecated use { @link #mmm1(int)} or { @link #mmm2(String)} instead 

----------------------

][PsiClassType @NotNull [] getImplementsListTypes()#com.intellij.psi (2872-3142)       (PsiClass.java)

Returns the list of class types for the interfaces that this class implements.  @return the list of extended class types, or an empty list for anonymous classes,enums and annotation types 

----------------------

, PsiClassType @NotNull [] getExtendsListTypes()#com.intellij.psi (2626-2868)       (PsiClass.java)

Returns the list of class types for the classes that this class or interface extends.  @return the list of extended class types, or an empty list for anonymous classes. 

----------------------

][public int getVisibleLineCount() #com.intellij.openapi.editor.impl (146362-146696)       (bigFile.java)

 @return information about total number of lines that can be viewed by user. I.e. this is a number of all documentlines (considering that single logical document line may be represented on multiple visual lines because ofsoft wraps appliance) minus number of folded lines 

----------------------

, public int getVisibleLineCount() #com.intellij.openapi.editor.impl (147826-148176)       (bigFile.java)

 @return information about total number of lines that can be viewed by user. I.e. this is a number of all documentlines (considering that single logical document line may be represented on multiple visual lines because ofsoft wraps appliance) minus number of folded lines 

----------------------

][@NotNulldefault DfaValue createValue(@NotNull DfaValueFactory factory, @Nullable DfaValue qualifier) #com.intellij.codeInspection.dataFlow.value (1741-2068)       (VariableDescriptor.java)

Returns a value which describes the field qualified by given qualifier and described by this descriptor @param factory factory to use @param qualifier qualifier to use @return a field value 

----------------------

, @NotNulldefault DfaValue createValue(@NotNull DfaValueFactory factory, @Nullable DfaValue qualifier, boolean forAccessor) #com.intellij.codeInspection.dataFlow.value (2127-2548)       (VariableDescriptor.java)

Returns a value which describes the field qualified by given qualifier and described by this descriptor @param factory factory to use @param qualifier qualifier to use @param forAccessor whether the value is created for accessor result @return a field value 

----------------------

][@Nullablepublic abstract Promise<Void> changeLanguageLevel(@NotNull Module module, @NotNull LanguageLevel level)#com.intellij.openapi.roots (4338-5029)       (JavaProjectModelModifier.java)

Implementation of this method should set language level for module { @code module} to the specified value accordinglyto this dependencies management system. If it takes some time to propagate changes in the external project configuration to IDEA'sproject model the method may schedule this work for asynchronous execution and return { @link Promise} instance which will be fulfilledwhen the work is done.  @return { @link Promise} instance if language level can be set by this dependencies management system or { @code null} otherwise 

----------------------

, @Nullablepublic abstract Promise<Void> addExternalLibraryDependency(@NotNull Collection<? extends Module> modules, @NotNull ExternalLibraryDescriptor descriptor, @NotNull DependencyScope scope)#com.intellij.openapi.roots (3392-4334)       (JavaProjectModelModifier.java)

Implementation of this method should add dependency from modules { @code modules} to an external library with scope { @code scope} accordinglyto this dependencies management system. If it takes some time to propagate changes in the external project configuration to IDEA'sproject model the method may schedule this work for asynchronous execution and return { @link Promise} instance which will be fulfilledwhen the work is done.  @return { @link Promise} instance if dependencies of these modules can be handled by this dependencies management system or{ @code null} otherwise 

----------------------

, @Nullablepublic Promise<Void> addModuleDependency(@NotNull Module from, @NotNull Module to, @NotNull DependencyScope scope, boolean exported) #com.intellij.openapi.roots (1598-2361)       (JavaProjectModelModifier.java)

Implementation of this method should add dependency from module { @code from} to module { @code to} with scope { @code scope} accordinglyto this dependencies management system. If it takes some time to propagate changes in the external project configuration to IDEA'sproject model the method may schedule this work for asynchronous execution and return { @link Promise} instance which will be fulfilledwhen the work is done. @return { @link Promise} instance if dependencies between these modules can be handled by this dependencies management system or{ @code null} otherwise 

----------------------

, @Nullablepublic Promise<Void> addLibraryDependency(@NotNull Module from, @NotNull Library library, @NotNull DependencyScope scope, boolean exported) #com.intellij.openapi.roots (2489-3262)       (JavaProjectModelModifier.java)

Implementation of this method should add dependency from module { @code from} to { @code library} with scope { @code scope} accordinglyto this dependencies management system. If it takes some time to propagate changes in the external project configuration to IDEA'sproject model the method may schedule this work for asynchronous execution and return { @link Promise} instance which will be fulfilledwhen the work is done.  @return { @link Promise} instance if dependencies between these modules can be handled by this dependencies management system or{ @code null} otherwise 

----------------------

][public CharSequence subSequence(int begin, int end)# (39517-40068)       (StressClass.java)

Creates a substring of this String, starting at a specified indexand ending at one character before a specified index. This behaves like<code>substring(begin, end)<code>.  @param begin index to start substring (inclusive, base 0) @param end index to end at (exclusive) @return new String which is a substring of this String @throws IndexOutOfBoundsException if begin &lt; 0 || end &gt; length()|| begin &gt; end @since 1.4 

----------------------

, public String substring(int beginIndex, int endIndex)# (38568-39132)       (StressClass.java)

Creates a substring of this String, starting at a specified indexand ending at one character before a specified index.  @param beginIndex index to start substring (inclusive, base 0) @param endIndex index to end at (exclusive) @return new String which is a substring of this String @throws IndexOutOfBoundsException if begin &lt; 0 || end &gt; length()|| begin &gt; end (while unspecified, this is aStringIndexOutOfBoundsException) 

----------------------

][void finished(boolean aborted, int errors, int warnings, @NotNull CompileContext compileContext)#com.intellij.openapi.compiler (944-1326)       (CompileStatusNotification.java)

Invoked in a Swing dispatch thread after the compilation is finished.  @param abortedtrue if compilation has been cancelled. @param errors error count @param warnings warning count @param compileContext context for the finished compilation 

----------------------

, default void compilationFinished(boolean aborted, int errors, int warnings, @NotNull CompileContext compileContext)#com.intellij.openapi.compiler (1040-1440)       (CompilationStatusListener.java)

Invoked in a Swing dispatch thread after the compilation is finished.  @param abortedtrue if compilation has been cancelled @param errors error count @param warnings warning count @param compileContext context for the finished compilation 

----------------------

][@NotNullpublic static <E extends PsiElement> String getTooltipText(@NotNull Collection<E> elements, @NotNull String prefix, boolean skipFirstMember, @Nullable String actionId) #com.intellij.codeInsight.daemon.impl (1596-2329)       (GutterTooltipHelper.java)

 @param elementsa collection of elements to create a formatted tooltip text @param prefixa text to insert before all elements @param skipFirstMember { @code true} to skip a method (or field) name in the link to element @param actionIdan action identifier to generate context help or { @code null} if not applicable 

----------------------

, @NotNullpublic static <E extends PsiElement> String getTooltipText(@NotNull Collection<E> elements, @NotNull String prefix, boolean skipFirstMember, @Nullable String actionId,@NotNull String pressMessageKey) #com.intellij.codeInsight.daemon.impl (2430-3348)       (GutterTooltipHelper.java)

 @param elementsa collection of elements to create a formatted tooltip text @param prefixa text to insert before all elements @param skipFirstMember { @code true} to skip a method (or field) name in the link to element @param actionIdan action identifier to generate context help or { @code null} if not applicable @param pressMessageKey JavaBundle key to retrieve context help message with shortcut 

----------------------

][private boolean setPreviousFocusable(Object component, boolean outgo) #in PBP
                Toolkit toolkit = getToolkit() (766562-766733)       (ThinletBig.java)

 @return previous focusable component is found (not the last of the desktopdialog) 

----------------------

, 	private boolean setPreviousFocusable(Object component, boolean outgo) #in PBP
				Toolkit toolkit = getToolkit() (205510-205678)       (aThinlet_hl.java)

	 @return previous focusable component is found (not the last of the desktopdialog)	 

----------------------

, private boolean setPreviousFocusable(Object component, boolean outgo) #in PBP
                Toolkit toolkit = getToolkit() (164648-164819)       (Thinlet.java)

 @return previous focusable component is found (not the last of the desktopdialog) 

----------------------

, 	private boolean setPreviousFocusable(Object component, boolean outgo) #in PBP
				Toolkit toolkit = getToolkit() (142366-142534)       (aThinlet.java)

	 @return previous focusable component is found (not the last of the desktopdialog)	 

----------------------

][private final ModulesCombo myModulesDescriptionsComboBox#com.intellij.execution.ui (1870-2013)       (ConfigurationModuleSelector.java)

 this field is { @code null} if and only if { @link #myModulesList} is not null 

----------------------

, private final JComboBox<? extends Module> myModulesList#com.intellij.execution.ui (2016-2174)       (ConfigurationModuleSelector.java)

 this field is { @code null} if and only if { @link #myModulesDescriptionsComboBox} is not null 

----------------------

][@NotNullpublic LongRangeSet unsignedShiftRight(LongRangeSet shiftSize, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (18111-18676)       (LongRangeSet.java)

Returns a range which represents all the possible values after applying { @code x >>> y} operation forall { @code x} from this set and for all { @code y} from the shiftSize set. The resulting set may containsome more values.  @param shiftSize set of possible shift sizes (number of bits to shift to the right) @param isLong whether the operation is performed on long type (if false, the int type is assumed). @return a new range 

----------------------

, @NotNullpublic LongRangeSet shiftLeft(LongRangeSet shiftSize, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (16636-17190)       (LongRangeSet.java)

Returns a range which represents all the possible values after applying { @code x << y} operation forall { @code x} from this set and for all { @code y} from the shiftSize set. The resulting set may containsome more values.  @param shiftSize set of possible shift sizes (number of bits to shift to the left) @param isLong whether the operation is performed on long type (if false, the int type is assumed). @return a new range 

----------------------

, @NotNullpublic LongRangeSet shiftRight(LongRangeSet shiftSize, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (17496-18052)       (LongRangeSet.java)

Returns a range which represents all the possible values after applying { @code x >> y} operation forall { @code x} from this set and for all { @code y} from the shiftSize set. The resulting set may containsome more values.  @param shiftSize set of possible shift sizes (number of bits to shift to the right) @param isLong whether the operation is performed on long type (if false, the int type is assumed). @return a new range 

----------------------

][@NullablePsiJavaToken getLParenth()#com.intellij.psi (2667-2873)       (PsiIfStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1474-1677)       (PsiForeachStatement.java)

Returns the closing parenthesis enclosing the statement header.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1011-1217)       (PsiWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (801-1007)       (PsiWhileStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (948-1159)       (PsiForStatement.java)

Returns the closing parenthesis enclosing the statement header.  @return the closing parenthesis, or { @code null} if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (2877-3083)       (PsiIfStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1205-1411)       (PsiDoWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (995-1201)       (PsiDoWhileStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

][public ParameterInfoImpl(int oldParameterIndex, @NonNls String name, PsiType aType, @NonNls String defaultValue) #com.intellij.refactoring.changeSignature (1474-1739)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(PsiType) @see #withDefaultValue(String) 

----------------------

, public ParameterInfoImpl(int oldParameterIndex, @NonNls String name, PsiType aType) #com.intellij.refactoring.changeSignature (1179-1379)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(PsiType) 

----------------------

][public synchronized void setPackageAssertionStatus(String name, boolean enabled)#s, 0, allPackages, parentPackages.length,
                     packages.length) (38721-39368)       (aClassLoader_hl.java)

Set the default assertion status for packages, used unless overriddenby a class request. This default also covers subpackages, unless theyare also specified. The unnamed package should use null for the name.  @param name the package (and subpackages) to affect @param enabled true to set the default to enabled @see #setDefaultAssertionStatus(String, boolean) @see #setClassAssertionStatus(String, boolean) @see #clearAssertionStatus() @since 1.4 

----------------------

, public synchronized void setPackageAssertionStatus(String name, boolean enabled)#s, 0, allPackages, parentPackages.length,
                     packages.length) (34282-34929)       (aClassLoader.java)

Set the default assertion status for packages, used unless overriddenby a class request. This default also covers subpackages, unless theyare also specified. The unnamed package should use null for the name.  @param name the package (and subpackages) to affect @param enabled true to set the default to enabled @see #setDefaultAssertionStatus(String, boolean) @see #setClassAssertionStatus(String, boolean) @see #clearAssertionStatus() @since 1.4 

----------------------

][@NotNulldefault DfReferenceType dropTypeConstraint() #com.intellij.codeInspection.dataFlow.types (1563-1719)       (DfReferenceType.java)

 @return this type without type constraint, or simply this type if it's a constant 

----------------------

, @NotNulldefault DfReferenceType dropLocality() #com.intellij.codeInspection.dataFlow.types (1744-1892)       (DfReferenceType.java)

 @return this type without locality flag, or simply this type if it's a constant 

----------------------

, @NotNulldefault DfReferenceType dropMutability() #com.intellij.codeInspection.dataFlow.types (2071-2228)       (DfReferenceType.java)

 @return this type without mutability knowledge, or simply this type if it's a constant 

----------------------

, default DfReferenceType dropSpecialField() #com.intellij.codeInspection.dataFlow.types (2253-2404)       (DfReferenceType.java)

 @return this type without special field knowledge, or simply this type if it's a constant 

----------------------

, @NotNullDfReferenceType dropNullability()#com.intellij.codeInspection.dataFlow.types (1917-2067)       (DfReferenceType.java)

 @return this type without nullability knowledge, or simply this type if it's a constant 

----------------------

][public URL getResource(String name)#java.lang (21529-22254)       (aClassLoader.java)

Get the URL to a resource using this classloader or one of its parents.First tries to get the resource by calling <code>getResource()<code>on the parent classloader. If the parent classloader returns null thenit tries finding the resource by calling <code>findResource()<code> onthis classloader. The resource name should be separated by '' for pathelements. <p>Subclasses should not override this method but should override<code>findResource()<code> which is called by this method.  @param name the name of the resource relative to this classloader @return the URL to the resource or null when not found 

----------------------

, public URL getResource(String name)#java.lang (24348-25073)       (aClassLoader_hl.java)

Get the URL to a resource using this classloader or one of its parents.First tries to get the resource by calling <code>getResource()<code>on the parent classloader. If the parent classloader returns null thenit tries finding the resource by calling <code>findResource()<code> onthis classloader. The resource name should be separated by '' for pathelements. <p>Subclasses should not override this method but should override<code>findResource()<code> which is called by this method.  @param name the name of the resource relative to this classloader @return the URL to the resource or null when not found 

----------------------

][protected <error descr="Cannot resolve symbol 'Package'">Package</error> getPackage(String name)#java.lang (35180-35557)       (aClassLoader_hl.java)

Returns the Package object for the requested package name. It returnsnull when the package is not defined by this classloader or one of itsparents.  @param name the package name to find @return the package, if defined @since 1.2 

----------------------

, protected Package getPackage(String name)#java.lang (31472-31794)       (aClassLoader.java)

Returns the Package object for the requested package name. It returnsnull when the package is not defined by this classloader or one of itsparents.  @param name the package name to find @return the package, if defined @since 1.2 

----------------------

][@NotNullPsiExpression createExpressionFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8249-8759)       (PsiJavaParserFacade.java)

Creates a Java expression from the specified text.  @param textthe text of the expression to create. @param context the PSI element used as context for resolving references from the expression. @return the created expression instance. @throws IncorrectOperationException if the text does not specify a valid expression. 

----------------------

, @NotNullPsiComment createCommentFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8763-9252)       (PsiJavaParserFacade.java)

Creates a Java comment from the specified text.  @param textthe text of the comment to create. @param context the PSI element used as context for resolving references from the comment. @return the created comment instance. @throws IncorrectOperationException if the text does not specify a valid comment. 

----------------------

, @NotNullPsiResourceVariable createResourceFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (4964-5473)       (PsiJavaParserFacade.java)

Creates a Java try-resource from the specified text.  @param textthe text of the resource to create. @param context the PSI element used as context for resolving references from the resource. @return the created resource instance. @throws IncorrectOperationException if the text is not a valid resource definition. 

----------------------

, @NotNullPsiCodeBlock createCodeBlockFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (7235-7738)       (PsiJavaParserFacade.java)

Creates a Java code block from the specified text.  @param textthe text of the code block to create. @param context the PSI element used as context for resolving references from the block. @return the created code block instance. @throws IncorrectOperationException if the text does not specify a valid code block. 

----------------------

, @NotNullPsiMethod createMethodFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (3429-3906)       (PsiJavaParserFacade.java)

Creates a Java method from the specified text.  @param textthe text of the method to create. @param context the PSI element used as context for resolving references from the method. @return the created method instance. @throws IncorrectOperationException if the text is not a valid method body. 

----------------------

, @NotNullPsiField createFieldFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (2324-2794)       (PsiJavaParserFacade.java)

Creates a Java field from the specified text.  @param textthe text of the field to create. @param context the PSI element used as context for resolving references from the field. @return the created field instance. @throws IncorrectOperationException if the text is not a valid field body. 

----------------------

, @NotNullPsiStatement createStatementFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (7742-8245)       (PsiJavaParserFacade.java)

Creates a Java statement from the specified text.  @param textthe text of the statement to create. @param context the PSI element used as context for resolving references from the statement. @return the created statement instance. @throws IncorrectOperationException if the text does not specify a valid statement. 

----------------------

, @NotNullPsiParameter createParameterFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (3910-4415)       (PsiJavaParserFacade.java)

Creates a Java method parameter from the specified text.  @param textthe text of the parameter to create. @param context the PSI element used as context for resolving references from the parameter. @return the created parameter instance. @throws IncorrectOperationException if the text is not a valid parameter body. 

----------------------

][record <caret>R(int a, boolean b, float c, double d, String s) # (37-250)       (beforeNormal.java)

Cool record.  @param a a value (multiline) @param b b value @param c c value @param d d value @param s s value 

----------------------

, R(int a, boolean b, float c, double d, String s) # (248-466)       (afterNormal.java)

 @param a a value (multiline) @param b b value @param c c value @param d d value @param s s value 

----------------------

][private static LwRootContainer getRootContainerFromDocument(Document document, PropertiesProvider provider) throws Exception #com.intellij.uiDesigner.compiler (2894-3238)       (Utils.java)

Get root from the document  @param document the parsed document @param provider the provider @return the root container @throws Exception if there is a problem with parsing DOM 

----------------------

, public static LwRootContainer getRootContainer(final URL formFile, final PropertiesProvider provider) throws Exception #com.intellij.uiDesigner.compiler (2430-2760)       (Utils.java)

Get root from the url  @param formFile the document URL @param provider the provider @return the root container @throws Exception if there is a problem with parsing DOM 

----------------------

][void setThisType(PsiType psiType)#com.intellij.psi (1097-1293)       (JavaCodeFragment.java)

Sets the type corresponding to the { @code this} keyword in the code fragment.  @param psiType the type of { @code this} in the fragment. 

----------------------

, void setSuperType(PsiType superType)#com.intellij.psi (1484-1687)       (JavaCodeFragment.java)

Sets the type corresponding to the { @code super} keyword in the code fragment.  @param superType the type of { @code super} in the fragment. 

----------------------

, PsiType getThisType()#com.intellij.psi (913-1093)       (JavaCodeFragment.java)

Returns the type corresponding to the { @code this} keyword in the code fragment.  @return the type of { @code this} in the fragment. 

----------------------

][.b#com.intellij.java.psi (1638-1839)       (JavaStubBuilderTest.java)

", "PsiJavaFileStub []\n" + "IMPORT_LIST:PsiImportListStub\n");}public void testFileHeader() {doTest("package p;\n" + "import acomment to skip

----------------------

, .b#com.intellij.psi (1738-1938)       (continuationIndents_DoNotCount.java)

", "PsiJavaFileStub []\n" + "IMPORT_LIST:PsiImportListStub\n");}public void testFileHeader() {doTest("package p;\n" + "import acomment to skip

----------------------

][@NotNullPsiDeclarationStatement createVariableDeclarationStatement(@NotNull String name, @NotNull PsiType type, @Nullable PsiExpression initializer, @Nullable PsiElement context)throws IncorrectOperationException#com.intellij.psi (11391-12214)       (PsiElementFactory.java)

Creates a local variable declaration statement with the specified name, type and initializer,optionally without reformatting the declaration.<p>Note that depending on code style settings the resulting variable may be declared as { @code final}.<p>  @param context the context used to resolve symbols in the resulting declaration. @throws IncorrectOperationException if { @code name} is not a valid identifier or{ @code type} is not a valid type. 

----------------------

, @NotNullPsiDeclarationStatement createVariableDeclarationStatement(@NotNull String name, @NotNull PsiType type, @Nullable PsiExpression initializer)throws IncorrectOperationException#com.intellij.psi (10619-11387)       (PsiElementFactory.java)

Creates a local variable declaration statement with the specified name, type and initializer,optionally without reformatting the declaration.<p>Note that depending on code style settings the resulting variable may be declared as { @code final}.<p>  @throws IncorrectOperationException if { @code name} is not a valid identifier or{ @code type} is not a valid type. 

----------------------

][public final Enumeration getResources(String name) throws IOException#java.lang (22480-23585)       (aClassLoader.java)

Returns an Enumeration of all resources with a given name that canbe found by this classloader and its parents. Certain classloaders(such as the URLClassLoader when given multiple jar files) can havemultiple resources with the same name that come from multiple locations.It can also occur that a parent classloader offers a resource with acertain name and the child classloader also offers a resource with thatsame name. <code>getResource()<code> only offers the first resource (of theparent) with a given name. This method lists all resources with thesame name. The name should use '' as path separators. <p>The Enumeration is created by first calling <code>getResources()<code>on the parent classloader and then calling <code>findResources()<code>on this classloader.<p>  @param name the resource name @return an enumaration of all resources found @throws IOException if IO errors occur in the process @since 1.2 

----------------------

, public final Enumeration getResources(String name) throws IOException#java.lang (25360-26465)       (aClassLoader_hl.java)

Returns an Enumeration of all resources with a given name that canbe found by this classloader and its parents. Certain classloaders(such as the URLClassLoader when given multiple jar files) can havemultiple resources with the same name that come from multiple locations.It can also occur that a parent classloader offers a resource with acertain name and the child classloader also offers a resource with thatsame name. <code>getResource()<code> only offers the first resource (of theparent) with a given name. This method lists all resources with thesame name. The name should use '' as path separators. <p>The Enumeration is created by first calling <code>getResources()<code>on the parent classloader and then calling <code>findResources()<code>on this classloader.<p>  @param name the resource name @return an enumaration of all resources found @throws IOException if IO errors occur in the process @since 1.2 

----------------------

][protected final synchronized Class defineClass(String name, byte[] data,						 int offset, int len,						 <error descr="Cannot resolve symbol 'ProtectionDomain'">ProtectionDomain</error> domain)throws <error descr="Cannot resolve symbol 'ClassFormatError'">ClassFormatError</error>#java.lang (19495-20980)       (aClassLoader_hl.java)

Helper to define a class using a string of bytes. Subclasses should callthis method from their <code>findClass()<code> implementation. If thedomain is null, the default of<code>Policy.getPolicy().getPermissions(new CodeSource(null, null))<code>is used. Once a class has been defined in a package, all further classesin that package must have the same set of certificates or aSecurityException is thrown.  @param name the name to give the class.null if unknown @param data the data representing the classfile, in classfile format @param offset the offset into the data where the classfile starts @param len the length of the classfile data in the array @param domain the ProtectionDomain to give to the class, null for the default protection domain @return the class that was defined @throws ClassFormatError if data is not in proper classfile format @throws IndexOutOfBoundsException if offset or len is negative, oroffset + len exceeds data @throws SecurityException if name starts with "java.", or if certificatesdo not match up @since 1.2 

----------------------

, protected final synchronized Class defineClass(String name, byte[] data,						 int offset, int len,						 ProtectionDomain domain)throws ClassFormatError#java.lang (17408-18765)       (aClassLoader.java)

Helper to define a class using a string of bytes. Subclasses should callthis method from their <code>findClass()<code> implementation. If thedomain is null, the default of<code>Policy.getPolicy().getPermissions(new CodeSource(null, null))<code>is used. Once a class has been defined in a package, all further classesin that package must have the same set of certificates or aSecurityException is thrown.  @param name the name to give the class.null if unknown @param data the data representing the classfile, in classfile format @param offset the offset into the data where the classfile starts @param len the length of the classfile data in the array @param domain the ProtectionDomain to give to the class, null for the default protection domain @return the class that was defined @throws ClassFormatError if data is not in proper classfile format @throws IndexOutOfBoundsException if offset or len is negative, oroffset + len exceeds data @throws SecurityException if name starts with "java.", or if certificatesdo not match up @since 1.2 

----------------------

][@NotNullList<MethodSignatureBackedByPsiMethod> findSuperMethodSignaturesIncludingStatic(boolean checkAccess)#com.intellij.psi (4973-5814)       (PsiMethod.java)

Searches the superclasses and base interfaces of the containing class to findstatic and instance methods with the signature matching the signature of this method.Can return multiple results if the base class andor one or more of the implementedinterfaces have a method with the same signature. If the overridden method in turnoverrides another method, only the directly overridden method is returned.  @param checkAccess if false, the super methods are searched even if this method is private. If true, an empty result list is returned for private methods. @return the array of matching method signatures, or an empty array if no methods are found. 

----------------------

, PsiMethod @NotNull [] findSuperMethods(boolean checkAccess)#com.intellij.psi (3657-4452)       (PsiMethod.java)

Searches the superclasses and base interfaces of the containing class to findthe methods which this method overrides or implements, optionally omittingthe accessibility check. Can return multiple results if the base class andorone or more of the implemented interfaces have a method with the same signature.If the overridden method in turn overrides another method, only the directlyoverridden method is returned.  @param checkAccess if false, the super methods are searched even if this method is private. If true, an empty result list is returned for private methods. @return the array of super methods, or an empty array if no methods are found. 

----------------------

][boolean isUsedForWriting()#com.intellij.codeInspection.reference (1258-1416)       (RefField.java)

Checks if the field is used for writing.  @return true if the field has write accesses, false otherwise. 

----------------------

, boolean isUsedForReading()#com.intellij.codeInspection.reference (693-858)       (RefParameter.java)

Checks if the parameter is used for reading.  @return true if the parameter has read accesses, false otherwise. 

----------------------

, boolean isUsedForWriting()#com.intellij.codeInspection.reference (862-1028)       (RefParameter.java)

Checks if the parameter is used for writing.  @return true if the parameter has write accesses, false otherwise. 

----------------------

][@NotNullDfaVariableValue createTempVariable(@Nullable PsiType type) #com.intellij.codeInspection.dataFlow (84110-84387)       (ControlFlowAnalyzer.java)

Create a synthetic variable (not declared in the original code) to be used within this control flow.  @param type a type of variable to create @return newly created variable 

----------------------

, @NotNullpublic DfaVariableValue createTempVariable(@Nullable PsiType type) #com.intellij.codeInspection.dataFlow (30953-31237)       (CFGBuilder.java)

Create a synthetic variable (not declared in the original code) to be used within this control flow.  @param type a type of variable to create @return newly created variable 

----------------------

][@NotNullList<PsiAnnotation> findInferredAnnotations(@NotNull PsiModifierListOwner listOwner)#com.intellij.codeInsight (1167-1474)       (InferredAnnotationProvider.java)

When annotation name is known, prefer { @link #findInferredAnnotation(PsiModifierListOwner, String)} aspotentially faster.  @return all inferred annotations for the given element. 

----------------------

, public abstract PsiAnnotation @NotNull [] findInferredAnnotations(@NotNull PsiModifierListOwner listOwner)#com.intellij.codeInsight (1227-1544)       (InferredAnnotationsManager.java)

When annotation name is known, prefer { @link #findInferredAnnotation(PsiModifierListOwner, String)} aspotentially faster.  @return all inferred annotations for the given element 

----------------------

][@NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType) throws IncorrectOperationException#com.intellij.psi (1661-1988)       (JVMElementFactory.java)

Creates an empty method with the specified name and return type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType) throws IncorrectOperationException#com.intellij.psi (3062-3442)       (PsiElementFactory.java)

Creates an empty method with the specified name and return type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, @NotNullPsiParameter createParameter(@NotNull String name, PsiType type) throws IncorrectOperationException#com.intellij.psi (2585-2901)       (JVMElementFactory.java)

Creates a parameter with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @NotNullPsiField createField(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (1344-1657)       (JVMElementFactory.java)

Creates a field with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiParameter createParameter(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (3934-4312)       (PsiElementFactory.java)

Creates a parameter with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiField createField(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (2692-3058)       (PsiElementFactory.java)

Creates a field with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, PsiParameter createParameter(@NotNull String name, PsiType type, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (2905-3261)       (JVMElementFactory.java)

Creates a parameter with the specified name and type in the given context.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

][\n" +"void doTest() #com.intellij.java.psi.formatter.java (6595-6739)       (JavaFormatterSpaceTest.java)

\n" +"This is a convenience method for { @code doTest(test, new Object[0]);}\n" +" 

----------------------

, \n" +"void doTest() #com.intellij.java.psi.formatter.java (5908-6059)       (JavaFormatterSpaceTest.java)

\n" +"This is a convenience method for { @code doTest(test, newObject[0]);}\n" +" 

----------------------

, \n" +"void doTest() #com.intellij.java.psi.formatter.java (6236-6379)       (JavaFormatterSpaceTest.java)

\n" +"This is a convenience method for { @code doTest(test,new Object[0]);}\n" +" 

----------------------

, \n" +"void doTest() #com.intellij.java.psi.formatter.java (6957-7102)       (JavaFormatterSpaceTest.java)

\n" +"This is a convenience method for { @code doTest(test , new Object[0]);}\n" +" 

----------------------

][protected Enumeration findResources(String name) throws IOException#java.lang (23840-24705)       (aClassLoader.java)

Called whenever all locations of a named resource are needed.It is called by <code>getResources()<code> after it has called<code>parent.getResources()<code>. The results are combined bythe <code>getResources()<code> method. <p>The default implementation always returns an empty Enumeration.Subclasses should override it when they can provide an Enumeration ofURLs (possibly just one element) to the named resource.The first URL of the Enumeration should be the same as the onereturned by <code>findResource<code>.  @param name the name of the resource to be found @return a possibly empty Enumeration of URLs to the named resource @throws IOException if IO errors occur in the process @since 1.2 

----------------------

, protected Enumeration findResources(String name) throws IOException#java.lang (26846-27711)       (aClassLoader_hl.java)

Called whenever all locations of a named resource are needed.It is called by <code>getResources()<code> after it has called<code>parent.getResources()<code>. The results are combined bythe <code>getResources()<code> method. <p>The default implementation always returns an empty Enumeration.Subclasses should override it when they can provide an Enumeration ofURLs (possibly just one element) to the named resource.The first URL of the Enumeration should be the same as the onereturned by <code>findResource<code>.  @param name the name of the resource to be found @return a possibly empty Enumeration of URLs to the named resource @throws IOException if IO errors occur in the process @since 1.2 

----------------------

][@Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2020.3")public interface PackagingCompiler extends FileProcessingCompiler#com.intellij.openapi.compiler (729-1223)       (PackagingCompiler.java)

 @deprecated this interface is part of the obsolete build system which runs as part of the IDE process. Since IDEA 15 implementations ofthis class aren't used by the IDE, you should integrate into 'external build system' instead(http:www.jetbrains.orgintellijsdkdocsreference_guideframeworks_and_external_apisexternal_builder_api.html). 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2020.3")public interface GeneratingCompiler extends Compiler, ValidityStateFactory, IntermediateOutputCompiler #com.intellij.openapi.compiler (774-1306)       (GeneratingCompiler.java)

 @deprecated this interface is part of the obsolete build system which runs as part of the IDE process. Since IDEA 15 implementations ofthis class aren't used by the IDE, you should integrate into 'external build system' instead(http:www.jetbrains.orgintellijsdkdocsreference_guideframeworks_and_external_apisexternal_builder_api.html). 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2020.3")public interface IntermediateOutputCompiler extends Compiler#com.intellij.openapi.compiler (686-1175)       (IntermediateOutputCompiler.java)

 @deprecated this interface is part of the obsolete build system which runs as part of the IDE process. Since IDEA 15 implementations ofthis class aren't used by the IDE, you should integrate into 'external build system' instead(http:www.jetbrains.orgintellijsdkdocsreference_guideframeworks_and_external_apisexternal_builder_api.html). 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2020.3")public interface ClassPostProcessingCompiler extends FileProcessingCompiler #com.intellij.openapi.compiler (686-1191)       (ClassPostProcessingCompiler.java)

 @deprecated this interface is part of the obsolete build system which runs as part of the IDE process. Since IDEA 15 implementations ofthis class aren't used by the IDE, you should integrate into 'external build system' instead(http:www.jetbrains.orgintellijsdkdocsreference_guideframeworks_and_external_apisexternal_builder_api.html). 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2020.3")public interface ClassInstrumentingCompiler extends FileProcessingCompiler #com.intellij.openapi.compiler (687-1191)       (ClassInstrumentingCompiler.java)

 @deprecated this interface is part of the obsolete build system which runs as part of the IDE process. Since IDEA 15 implementations ofthis class aren't used by the IDE, you should integrate into 'external build system' instead(http:www.jetbrains.orgintellijsdkdocsreference_guideframeworks_and_external_apisexternal_builder_api.html). 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2020.3")public interface SourceGeneratingCompiler extends GeneratingCompiler #com.intellij.openapi.compiler (774-1272)       (SourceGeneratingCompiler.java)

 @deprecated this interface is part of the obsolete build system which runs as part of the IDE process. Since IDEA 15 implementations ofthis class aren't used by the IDE, you should integrate into 'external build system' instead(http:www.jetbrains.orgintellijsdkdocsreference_guideframeworks_and_external_apisexternal_builder_api.html). 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2020.3")public interface TranslatingCompiler extends Compiler #com.intellij.openapi.compiler (836-1319)       (TranslatingCompiler.java)

 @deprecated this interface is part of the obsolete build system which runs as part of the IDE process. Since IDEA 15 implementations ofthis class aren't used by the IDE, you should integrate into 'external build system' instead(http:www.jetbrains.orgintellijsdkdocsreference_guideframeworks_and_external_apisexternal_builder_api.html). 

----------------------

][@NotNullpublic abstract JavaCodeFragment createCodeBlockCodeFragment(@NotNull String text, @Nullable PsiElement context, boolean isPhysical)#com.intellij.psi (1656-2216)       (JavaCodeFragmentFactory.java)

Creates a Java code fragment from the text of a Java code block.  @param text the text of the code block to create. @param contextthe context for resolving references from the code fragment. @param isPhysical whether the code fragment is created as a physical element(see { @link PsiElement#isPhysical()}). @return the created code fragment. 

----------------------

, public abstract JavaCodeFragment createMemberCodeFragment(@NotNull String text,@Nullable PsiElement context,boolean isPhysical)#com.intellij.psi (5724-6428)       (JavaCodeFragmentFactory.java)

Creates a Java code fragment from the text of a Java class member (field, method, class initializer, nested class).  @param text the text of the member to create @param contextthe context for resolving references from the member @param isPhysical whether the code fragment is created as a physical element(see { @link PsiElement#isPhysical()}). @return the created code fragment. 

----------------------

][@NullablePsiJavaToken getLParenth()#com.intellij.psi (2667-2873)       (PsiIfStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1011-1217)       (PsiWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (733-944)       (PsiForStatement.java)

Returns the opening parenthesis enclosing the statement header.  @return the opening parenthesis, or { @code null} if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (801-1007)       (PsiWhileStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (2877-3083)       (PsiIfStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1205-1411)       (PsiDoWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (995-1201)       (PsiDoWhileStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

][protected URL findResource(String name)#java.lang (27826-28446)       (aClassLoader_hl.java)

Called whenever a resource is needed that could not be provided byone of the parents of this classloader. It is called by<code>getResource()<code> after <code>parent.getResource()<code>couldn't provide the requested resource. <p>The default implementation always returns null. Subclasses shouldoverride this method when they can provide a way to return a URLto a named resource.  @param name the name of the resource to be found @return a URL to the named resource or null when not found @since 1.2 

----------------------

, protected URL findResource(String name)#java.lang (24756-25376)       (aClassLoader.java)

Called whenever a resource is needed that could not be provided byone of the parents of this classloader. It is called by<code>getResource()<code> after <code>parent.getResource()<code>couldn't provide the requested resource. <p>The default implementation always returns null. Subclasses shouldoverride this method when they can provide a way to return a URLto a named resource.  @param name the name of the resource to be found @return a URL to the named resource or null when not found @since 1.2 

----------------------

][final HashMap loadedClasses = new HashMap()#java.lang (5546-5854)       (aClassLoader.java)

All classes loaded by this classloader. VM's may choose to implementthis cache natively; but it is here available for use if necessary. Itis not private in order to allow native code (and trusted subclasses)access to this field. 

----------------------

, final HashMap loadedClasses = new HashMap()#java.lang (6124-6432)       (aClassLoader_hl.java)

All classes loaded by this classloader. VM's may choose to implementthis cache natively; but it is here available for use if necessary. Itis not private in order to allow native code (and trusted subclasses)access to this field. 

----------------------

][protected synchronized Class loadClass(String name, boolean resolve)throws ClassNotFoundException#java.lang (11840-12968)       (aClassLoader.java)

Load a class using this ClassLoader or its parent, possibly resolvingit as well using <code>resolveClass()<code>. It first tries to findout if the class has already been loaded through this classloader bycalling <code>findLoadedClass()<code>. Then it calls<code>loadClass()<code> on the parent classloader (or when there isno parent it uses the VM bootclassloader). If the class is stillnot loaded it tries to create a new class by calling<code>findClass()<code>. Finally when <code>resolve<code> is<code>true<code> it also calls <code>resolveClass()<code> on thenewly loaded class. <p>Subclasses should not override this method but should override<code>findClass()<code> which is called by this method.<p>  @param name the fully qualified name of the class to load @param resolve whether or not to resolve the class @return the loaded class @throws ClassNotFoundException if the class cannot be found 

----------------------

, protected synchronized Class loadClass(String name, boolean resolve)throws ClassNotFoundException#java.lang (13738-14866)       (aClassLoader_hl.java)

Load a class using this ClassLoader or its parent, possibly resolvingit as well using <code>resolveClass()<code>. It first tries to findout if the class has already been loaded through this classloader bycalling <code>findLoadedClass()<code>. Then it calls<code>loadClass()<code> on the parent classloader (or when there isno parent it uses the VM bootclassloader). If the class is stillnot loaded it tries to create a new class by calling<code>findClass()<code>. Finally when <code>resolve<code> is<code>true<code> it also calls <code>resolveClass()<code> on thenewly loaded class. <p>Subclasses should not override this method but should override<code>findClass()<code> which is called by this method.<p>  @param name the fully qualified name of the class to load @param resolve whether or not to resolve the class @return the loaded class @throws ClassNotFoundException if the class cannot be found 

----------------------

][public class LiteAnalyzerExt<V extends Value, Data, MyInterpreter extends Interpreter<V> & InterpreterExt<Data>> implements Opcodes #com.intellij.codeInspection.bytecodeAnalysis.asm (449-708)       (LiteAnalyzerExt.java)

Extended version of { @link LiteAnalyzer}.It handles frames <b>and<b> additional data.  @author lambdamix 

----------------------

, public class AnalyzerExt<V extends Value, Data, MyInterpreter extends Interpreter<V> & InterpreterExt<Data>> extends SubroutineFinder #com.intellij.codeInspection.bytecodeAnalysis.asm (449-706)       (AnalyzerExt.java)

Extended version of { @link Analyzer}.It handles frames <b>and<b> additional data.  @author lambdamix 

----------------------

][public class X# (0-98)       (CodeTag.java)

This method is an equivalent to { @code generalMethod((Object[]) null)}. 

----------------------

, public void specificMethod() # (43-162)       (DoubleParenthesesInCode.java)

This method is an equivalent to { @code generalMethod((Object[]) null)}. 

----------------------

][private boolean zzAtBOL = true#com.intellij.spi.parsing (14563-14683)       (_SPILexer.java)

zzAtBOL == true <=> the scanner is currently at the beginning of a line 

----------------------

, private boolean zzAtBOL = true#com.intellij.lang.java.lexer (29329-29449)       (_JavaLexer.java)

zzAtBOL == true <=> the scanner is currently at the beginning of a line 

----------------------

, private boolean zzAtBOL = true#com.intellij.lang.java.lexer (15281-15401)       (_JavaDocLexer.java)

zzAtBOL == true <=> the scanner is currently at the beginning of a line 

----------------------

][@NullablePsiClass resolveReferencedClass(@NotNull String referenceText, PsiElement context)#com.intellij.psi (3939-4371)       (PsiResolveHelper.java)

Resolves a reference to a class, given the text of the reference and the contextin which it was encountered.  @param referenceText the text of the reference. @param context the context in which the reference is found. @return the resolve result, or null if the resolve was not successful. 

----------------------

, @NullablePsiVariable resolveAccessibleReferencedVariable(@NotNull String referenceText, PsiElement context)#com.intellij.psi (4821-5330)       (PsiResolveHelper.java)

Resolves a reference to a variable, given the text of the reference and the contextin which it was encountered.  @param referenceText the text of the reference. @param context the context in which the reference is found. @return the resolve result, or null if the resolve was not successful or resolved variable is not accessible in a given context. 

----------------------

, @NullablePsiVariable resolveReferencedVariable(@NotNull String referenceText, PsiElement context)#com.intellij.psi (4375-4816)       (PsiResolveHelper.java)

Resolves a reference to a variable, given the text of the reference and the contextin which it was encountered.  @param referenceText the text of the reference. @param context the context in which the reference is found. @return the resolve result, or null if the resolve was not successful. 

----------------------

][public interface JspLanguage #com.intellij.psi.jsp (172-304)       (JspLanguage.java)

Marker interface for the Language instance representing the language of the JSP file type. 

----------------------

, public interface JspxLanguage #com.intellij.psi.jsp (172-306)       (JspxLanguage.java)

Marker interface for the Language instance representing the language of the JSPX file type. 

----------------------

][final boolean isAncestorOf(ClassLoader loader)#AssertionStatus = new HashMap() (36531-36736)       (aClassLoader.java)

Return true if this loader is either the specified class loaderor an ancestor thereof. @param loader the class loader to check 

----------------------

, final boolean isAncestorOf(ClassLoader loader)#AssertionStatus = new HashMap() (40970-41175)       (aClassLoader_hl.java)

Return true if this loader is either the specified class loaderor an ancestor thereof. @param loader the class loader to check 

----------------------

][protected final void resolveClass(Class c)#java.lang (21474-21803)       (aClassLoader_hl.java)

Links the class, if that has not already been done. Linking basicallyresolves all references to other classes made by this class.  @param c the class to resolve @throws NullPointerException if c is null @throws LinkageError if linking fails 

----------------------

, protected final void resolveClass(Class c)#java.lang (19133-19462)       (aClassLoader.java)

Links the class, if that has not already been done. Linking basicallyresolves all references to other classes made by this class.  @param c the class to resolve @throws NullPointerException if c is null @throws LinkageError if linking fails 

----------------------

][@NotNullPromise<Library> resolveAsync(@NotNull Project project, @NotNull Library library, @Nullable String mavenId)#com.intellij.codeInsight (1657-2069)       (ExternalAnnotationsArtifactsResolver.java)

Lookup and attach external annotations for given library in background. @param project - current project @param library - a library to attach annotations roots to @param mavenId - maven coordinates for annotations look-up in format "groupId:artifactId:version" 

----------------------

, boolean resolve(@NotNull Project project, @NotNull Library library, @Nullable String mavenId)#com.intellij.codeInsight (753-1166)       (ExternalAnnotationsArtifactsResolver.java)

Lookup and attach external annotations for given library synchronously. @param library - a library to attach annotations roots to @param mavenId - maven coordinates for annotations look-up in format "groupId:artifactId:version" @return true if resolution was successful, false otherwise 

----------------------

][\n" +"class <caret>Test #com.intellij.java.psi.formatter.java (1935-2066)       (JavaFormatterInEditorTest.java)

\n" +"Some really long javadoc comment which exceeeds the right margin\n" +" 

----------------------

, \n" +"class <caret>Test #com.intellij.java.psi.formatter.java (2175-2322)       (JavaFormatterInEditorTest.java)

\n" +"Some really long javadoc comment \n" +"which exceeeds the right margin\n" +" 

----------------------

][private boolean tweakSelectionIfNecessary(@NotNull MouseEvent e) #com.intellij.openapi.editor.impl (228322-228902)       (bigFile.java)

Checks if editor selection should be changed because of click at the given point at gutter and proceeds if necessary.<p>The main idea is that selection can be changed during left mouse clicks on the gutter line numbers area with hold<code>Shift<code> button. The selection should be adjusted if necessary.  @param e event for mouse click on gutter area @return <code>true<code> if editor's selection is changed because of the click; <code>false<code> otherwise 

----------------------

, private boolean tweakSelectionIfNecessary(@NotNull MouseEvent e) #com.intellij.openapi.editor.impl (229199-229779)       (bigFile.java)

Checks if editor selection should be changed because of click at the given point at gutter and proceeds if necessary.<p>The main idea is that selection can be changed during left mouse clicks on the gutter line numbers area with hold<code>Shift<code> button. The selection should be adjusted if necessary.  @param e event for mouse click on gutter area @return <code>true<code> if editor's selection is changed because of the click; <code>false<code> otherwise 

----------------------

][public CFGBuilder pushUnknown() #com.intellij.codeInspection.dataFlow (2311-2520)       (CFGBuilder.java)

Generate instructions to push unknown DfaValue on stack.<p>Stack before: ...<p>Stack after: ... unknown  @return this builder 

----------------------

, public CFGBuilder pushNull() #com.intellij.codeInspection.dataFlow (2575-2775)       (CFGBuilder.java)

Generate instructions to push null DfaValue on stack.<p>Stack before: ...<p>Stack after: ... null  @return this builder 

----------------------

][final HashMap definedPackages = new HashMap()#java.lang (6436-6641)       (aClassLoader_hl.java)

All packages defined by this classloader. It is not private in order toallow native code (and trusted subclasses) access to this field. 

----------------------

, final HashMap definedPackages = new HashMap()#java.lang (5858-6063)       (aClassLoader.java)

All packages defined by this classloader. It is not private in order toallow native code (and trusted subclasses) access to this field. 

----------------------

][public abstract void createRequest(DebugProcessImpl debugProcess)#com.intellij.debugger.ui.breakpoints (4196-4393)       (Breakpoint.java)

Request for creating all needed JPDA requests in the specified VM @param debugProcess the requesting process 

----------------------

, @Overridepublic abstract void processClassPrepare(DebugProcess debuggerProcess, final ReferenceType referenceType)#com.intellij.debugger.ui.breakpoints (5284-5536)       (Breakpoint.java)

Request for creating all needed JPDA requests in the specified VM @param debuggerProcess the requesting process 

----------------------

][@Override@NotNullPsiClass createAnnotationType(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (2409-2688)       (PsiElementFactory.java)

Creates an empty annotation type with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

, @Override@NotNullPsiClass createClass(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (1345-1605)       (PsiElementFactory.java)

Creates an empty class with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

, @NotNullPsiClass createAnnotationType(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (4555-4822)       (JVMElementFactory.java)

Creates an empty annotation type with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

, @Override@NotNullPsiClass createInterface(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (1609-1877)       (PsiElementFactory.java)

Creates an empty interface with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

, @NotNullPsiClass createEnum(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (1094-1340)       (JVMElementFactory.java)

Creates an empty enum with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

, @Override@NotNullPsiClass createEnum(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (1881-2139)       (PsiElementFactory.java)

Creates an empty enum with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

, @NotNullPsiClass createInterface(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (834-1090)       (JVMElementFactory.java)

Creates an empty interface with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

, @NotNullPsiClass createClass(@NotNull String name) throws IncorrectOperationException#com.intellij.psi (582-830)       (JVMElementFactory.java)

Creates an empty class with the specified name.  @throws IncorrectOperationException if { @code name} is not a valid Java identifier. 

----------------------

][@NotNullpublic LongRangeSet bitwiseXor(LongRangeSet other, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (10481-10891)       (LongRangeSet.java)

Returns a range which represents all the possible values after applying { @code x ^ y} operation forall { @code x} from this set and for all { @code y} from the other set. The resulting set may containsome more values.  @param other other set to perform bitwise-xor with @return a new range 

----------------------

, @NotNullpublic LongRangeSet bitwiseAnd(LongRangeSet other) #com.intellij.codeInspection.dataFlow.rangeSet (11104-11498)       (LongRangeSet.java)

Returns a range which represents all the possible values after applying { @code x & y} operation forall { @code x} from this set and for all { @code y} from the other set. The resulting set may containsome more values.  @param other other set to perform bitwise-and with @return a new range 

----------------------

, @NotNullpublic LongRangeSet bitwiseOr(LongRangeSet other, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (9861-10269)       (LongRangeSet.java)

Returns a range which represents all the possible values after applying { @code x | y} operation forall { @code x} from this set and for all { @code y} from the other set. The resulting set may containsome more values.  @param other other set to perform bitwise-or with @return a new range 

----------------------

][public synchronized void clearAssertionStatus()#AssertionStatus.put(name, Boolean.valueOf(enabled)) (40427-40840)       (aClassLoader_hl.java)

Resets the default assertion status of this classloader, its packagesand classes, all to false. This allows overriding defaults inheritedfrom the command line.  @see #setDefaultAssertionStatus(boolean) @see #setClassAssertionStatus(String, boolean) @see #setPackageAssertionStatus(String, boolean) @since 1.4 

----------------------

, public synchronized void clearAssertionStatus()#AssertionStatus.put(name, Boolean.valueOf(enabled)) (35988-36401)       (aClassLoader.java)

Resets the default assertion status of this classloader, its packagesand classes, all to false. This allows overriding defaults inheritedfrom the command line.  @see #setDefaultAssertionStatus(boolean) @see #setClassAssertionStatus(String, boolean) @see #setPackageAssertionStatus(String, boolean) @since 1.4 

----------------------

][public abstract class GenerateGetterSetterBaseAction extends BaseGenerateAction #com.intellij.codeInsight.generation.actions (732-952)       (GenerateGetterSetterBaseAction.java)

Action group which contains Generate... actionsAvailable in the Java code editor context only @author Danila Ponomarenko 

----------------------

,  public class GenerateConstructorAction extends BaseGenerateAction #com.intellij.codeInsight.generation.actions (804-1010)       (GenerateConstructorAction.java)

Action group which contains Generate... actionsAvailable in the Java code editor context only @author Alexey Kudravtsev 

----------------------

, public class GenerateGetterAction extends GenerateGetterSetterBaseAction #com.intellij.codeInsight.generation.actions (722-934)       (GenerateGetterAction.java)

Action group which contains Generate... actionsAvailable in the Java code editor context only @author Alexey Kudravtsev 

----------------------

,  public class GenerateSetterAction extends GenerateGetterSetterBaseAction #com.intellij.codeInsight.generation.actions (722-935)       (GenerateSetterAction.java)

Action group which contains Generate... actionsAvailable in the Java code editor context only @author Alexey Kudravtsev 

----------------------

,  public class GenerateGetterAndSetterAction extends GenerateGetterSetterBaseAction #com.intellij.codeInsight.generation.actions (731-953)       (GenerateGetterAndSetterAction.java)

Action group which contains Generate... actionsAvailable in the Java code editor context only @author Alexey Kudravtsev 

----------------------

][public abstract @NotNull PsiMethod @NotNull [] getMethodsByName(@NonNls @NotNull String name, @NotNull GlobalSearchScope scope)#com.intellij.psi.search (2941-3321)       (PsiShortNamesCache.java)

Returns the list of all methods with the specified name in the specified scope.  @param namethe name of the methods to find. @param scope the scope in which methods are searched. @return the list of found methods. 

----------------------

, public abstract @NotNull PsiClass @NotNull [] getClassesByName(@NotNull @NonNls String name, @NotNull GlobalSearchScope scope)#com.intellij.psi.search (1951-2344)       (PsiShortNamesCache.java)

Returns the list of all classes with the specified name in the specified scope.  @param namethe non-qualified name of the classes to find. @param scope the scope in which classes are searched. @return the list of found classes. 

----------------------

, public abstract @NotNull PsiField @NotNull [] getFieldsByName(@NotNull @NonNls String name, @NotNull GlobalSearchScope scope)#com.intellij.psi.search (4933-5307)       (PsiShortNamesCache.java)

Returns the list of all fields with the specified name in the specified scope.  @param namethe name of the fields to find. @param scope the scope in which fields are searched. @return the list of found fields. 

----------------------

][abstract @NotNull List<String> getDefaultNotNulls()#com.intellij.codeInsight (1231-1385)       (NullableNotNullManager.java)

 @return list of default non-container annotations that apply to the not-null element 

----------------------

, abstract @NotNull List<String> getDefaultNullables()#com.intellij.codeInsight (1072-1227)       (NullableNotNullManager.java)

 @return list of default non-container annotations that apply to the nullable element 

----------------------

][PsiType @NotNull [] getTypeArguments()#com.intellij.psi (1070-1246)       (PsiReferenceParameterList.java)

Returns the array of types corresponding to type elements used as type arguments.  @return the array of types. 

----------------------

, PsiTypeElement @NotNull [] getTypeParameterElements()#com.intellij.psi (890-1066)       (PsiReferenceParameterList.java)

Returns the array of type elements used as type arguments.  @return the array of type elements. 

----------------------

][public static int ZZ_CMAP(int ch) #com.intellij.lang.java.lexer (1281-1448)       (_JavaLexer.java)

 Translates characters to character classesChosen bits are [12, 6, 3]Total runtime size is 14848 bytes 

----------------------

, public static int ZZ_CMAP(int ch) #com.intellij.lang.java.lexer (1677-1844)       (_JavaDocLexer.java)

 Translates characters to character classesChosen bits are [12, 6, 3]Total runtime size is 12784 bytes 

----------------------

][\n" +"public String s = \"this is a string that is\" +\n" +"\" long enough to be wrapped\"\n" +"}")#formatting (10458-10721)       (JavaFormatterWrapTest.java)

\n" +"Javadoc comment that is long enough to \n" +"exceed right margin\n" +" 

----------------------

, \n" +" public String s = \"this is a string that is long enough to be wrapped\"\n" +"}","class TestClass #formatting (10010-10239)       (JavaFormatterWrapTest.java)

\n" +"Javadoc comment that is long enough to exceed right margin" +" 

----------------------

][public static @Nullable AddAnnotationPsiFix createAddNotNullFix(PsiModifierListOwner owner) #com.intellij.codeInsight.intention (17073-17432)       (AddAnnotationPsiFix.java)

Creates a fix which will add default "NotNull" annotation to the given element.  @param owner an element to add the annotation @return newly created fix or null if adding nullability annotation is impossible for the specified element. 

----------------------

, public static @Nullable AddAnnotationPsiFix createAddNullableFix(PsiModifierListOwner owner) #com.intellij.codeInsight.intention (16511-16872)       (AddAnnotationPsiFix.java)

Creates a fix which will add default "Nullable" annotation to the given element.  @param owner an element to add the annotation @return newly created fix or null if adding nullability annotation is impossible for the specified element. 

----------------------

][private boolean tweakSelectionEvent(@NotNull MouseEvent e) #com.intellij.openapi.editor.impl (227807-228132)       (bigFile.java)

Allows to answer if given event should tweak editor selection.  @param e event for occurred mouse action @return <code>true<code> if action that produces given event will trigger editor selection change; <code>false<code> otherwise 

----------------------

, private boolean tweakSelectionEvent(@NotNull MouseEvent e) #com.intellij.openapi.editor.impl (228684-229009)       (bigFile.java)

Allows to answer if given event should tweak editor selection.  @param e event for occurred mouse action @return <code>true<code> if action that produces given event will trigger editor selection change; <code>false<code> otherwise 

----------------------

][default boolean shouldHotSwap(@NotNull ProjectTaskContext context) #com.intellij.debugger.ui (1041-1218)       (HotSwapVetoableListener.java)

Returns { @code false} if Hot Swap shouldn't be invoked after the given compilation session. 

----------------------

, @ApiStatus.ScheduledForRemoval(inVersion = "2020.3")@Deprecateddefault boolean shouldHotSwap(CompileContext finishedCompilationContext) #com.intellij.debugger.ui (701-1022)       (HotSwapVetoableListener.java)

Returns { @code false} if Hot Swap shouldn't be invoked after the given compilation session.  @deprecated use { @link #shouldHotSwap(ProjectTaskContext)} 

----------------------

][@NotNullpublic abstract PsiClass createInterface(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (3684-4127)       (JavaDirectoryService.java)

Creates an interface class with the specified name in the directory.  @param name the name of the interface to create (not including the file extension). @return the created interface instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createAnnotationType(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (5019-5471)       (JavaDirectoryService.java)

Creates an annotation class with the specified name in the directory.  @param name the name of the annotation class to create (not including the file extension). @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createEnum(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (4131-4575)       (JavaDirectoryService.java)

Creates an enumeration class with the specified name in the directory.  @param name the name of the enumeration class to create (not including the file extension). @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createRecord(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (4579-5015)       (JavaDirectoryService.java)

Creates a record class with the specified name in the directory.  @param name the name of the record class to create (not including the file extension). @return the created record instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createClass(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (1392-1812)       (JavaDirectoryService.java)

Creates a class with the specified name in the directory.  @param name the name of the class to create (not including the file extension). @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

][public IElementType advance() throws java.io.IOException #com.intellij.lang.java.lexer (33795-34095)       (_JavaLexer.java)

Resumes scanning until the next regular expression is matched,the end of input is encountered or an IO-Error occurs.  @returnthe next token @exception java.io.IOExceptionif any IO-Error occurs 

----------------------

, public IElementType advance() throws java.io.IOException #com.intellij.lang.java.lexer (19891-20191)       (_JavaDocLexer.java)

Resumes scanning until the next regular expression is matched,the end of input is encountered or an IO-Error occurs.  @returnthe next token @exception java.io.IOExceptionif any IO-Error occurs 

----------------------

, public IElementType advance() throws java.io.IOException #com.intellij.spi.parsing (18703-19003)       (_SPILexer.java)

Resumes scanning until the next regular expression is matched,the end of input is encountered or an IO-Error occurs.  @returnthe next token @exception java.io.IOExceptionif any IO-Error occurs 

----------------------

][", docComment.getText())#com.intellij.java.psi.impl.source.tree.java (5983-6135)       (JavadocParamTagsTest.java)

\n" +"Javadoc\n" +" @param p1\n" +" @param p2\n" +" @param p3\n" +" 

----------------------

, " +"void m() #com.intellij.java.psi.impl.source.tree.java (2690-2854)       (JavadocParamTagsTest.java)

\n" +"Javadoc\n" +" @param p1\n" +" @param p2\n" +" @param p3\n" +" 

----------------------

][@NullablePsiAnnotation findInferredAnnotation(@NotNull PsiModifierListOwner listOwner, @NotNull String annotationFQN)#com.intellij.codeInsight (807-1163)       (InferredAnnotationProvider.java)

 @return if exists, an inferred annotation by given qualified name on a given PSI element. Several invocations may return severaldifferent instances of { @link PsiAnnotation}, which are not guaranteed to be equal. 

----------------------

, @Nullablepublic abstract PsiAnnotation findInferredAnnotation(@NotNull PsiModifierListOwner listOwner, @NotNull String annotationFQN)#com.intellij.codeInsight (851-1223)       (InferredAnnotationsManager.java)

 @return if exists, an inferred annotation by given qualified name on a given PSI element. Several invocations may return severaldifferent instances of { @link PsiAnnotation}, which are not guaranteed to be equal. 

----------------------

][@NotNullPsiJavaCodeReferenceElement createFQClassNameReferenceElement(@NotNull String qName, @NotNull GlobalSearchScope resolveScope)#com.intellij.psi (7727-8068)       (PsiElementFactory.java)

Creates a reference element resolving to the class with the specified namein the specified search scope. The text of the created reference is the fully qualified name of the class. 

----------------------

, @NotNullPsiJavaCodeReferenceElement createReferenceElementByFQClassName(@NotNull String qName, @NotNull GlobalSearchScope resolveScope)#com.intellij.psi (7390-7723)       (PsiElementFactory.java)

Creates a reference element resolving to the class with the specified namein the specified search scope. The text of the created reference is the short name of the class. 

----------------------

][private final ClassLoader parent#java.lang (6067-6235)       (aClassLoader.java)

The classloader that is consulted before this classloader.If null then the parent is the bootstrap classloader. 

----------------------

, private final ClassLoader parent#java.lang (6645-6813)       (aClassLoader_hl.java)

The classloader that is consulted before this classloader.If null then the parent is the bootstrap classloader. 

----------------------

][public String getNotNullAnnotations() #com.intellij.ant (2524-2736)       (Javac2.java)

 @return semicolon-separated names of not-null annotations to be instrumented. Example: { @code "org.jetbrains.annotations.NotNull;javax.annotation.Nonnull"} 

----------------------

, public void setNotNullAnnotations(String notNullAnnotations) #com.intellij.ant (2777-3030)       (Javac2.java)

 @param notNullAnnotations semicolon-separated names of not-null annotations to be instrumented. Example: { @code "org.jetbrains.annotations.NotNull;javax.annotation.Nonnull"} 

----------------------

][public static final int ALLOW_DISJUNCTION = 0x04#com.intellij.psi (2557-2730)       (JavaCodeFragmentFactory.java)

Flag for { @linkplain #createTypeCodeFragment(String, PsiElement, boolean, int)} - allows disjunctive type. 

----------------------

, public static final int ALLOW_INTERSECTION = 0x08#com.intellij.psi (2733-2907)       (JavaCodeFragmentFactory.java)

Flag for { @linkplain #createTypeCodeFragment(String, PsiElement, boolean, int)} - allows conjunctive type. 

----------------------

, public static final int ALLOW_VOID = 0x01#com.intellij.psi (2220-2379)       (JavaCodeFragmentFactory.java)

Flag for { @linkplain #createTypeCodeFragment(String, PsiElement, boolean, int)} - allows void type. 

----------------------

, public static final int ALLOW_ELLIPSIS = 0x02#com.intellij.psi (2382-2554)       (JavaCodeFragmentFactory.java)

Flag for { @linkplain #createTypeCodeFragment(String, PsiElement, boolean, int)} - allows type with ellipsis. 

----------------------

][\n" + "private AllCalcDataManager getOriginalAllCalcDataManager(GeneratedId asgnmtId) #com.test (39832-40530)       (TreeIsCorrectAfterDiffReparseTest.java)

\n" + "Obtains the original AllCalcDataManager for the given assignment Id.The assignment id must be given because in a\n" + "multiple assignment environment, a specific component needs to be requested, as originalAllCalcDataManager refers\n" + "to the aggregate assignment.\n" + " \n" + " @param asgnmtId The id of the assignment to load.\n" + " @return the original AllCalcDataManager for the given assignment Id\n" + " 

----------------------

, \n" + "private AllCalcDataManager getUpdatedAllCalcDataManager(GeneratedId asgnmtId) #com.test (41857-42552)       (TreeIsCorrectAfterDiffReparseTest.java)

\n" + "Obtains the updated AllCalcDataManager for the given assignment Id.The assignment id must be given because in a\n" + "multiple assignment environment, a specific component needs to be requested, as originalAllCalcDataManager refers\n" + "to the aggregate assignment.\n" + " \n" + " @param asgnmtId The id of the assignment to load.\n" + " @return the updated AllCalcDataManager for the given assignment Id\n" + " 

----------------------

][void setVisibilityChecker(VisibilityChecker checker)#com.intellij.psi (2185-2417)       (JavaCodeFragment.java)

Sets the visibility checker which is used to determine the visibility of declarationsfrom the code fragment.  @param checker the checker instance. 

----------------------

, VisibilityChecker getVisibilityChecker()#com.intellij.psi (2421-2634)       (JavaCodeFragment.java)

Gets the visibility checker which is used to determine the visibility of declarationsfrom the code fragment.  @return the checker instance. 

----------------------

][JvmClass @NotNull [] getInnerClasses()#com.intellij.lang.jvm (2089-2281)       (JvmClass.java)

 @return all (static, private, etc) inner classes declared by this class but excluding inherited ones @see Class#getDeclaredClasses 

----------------------

, JvmField @NotNull [] getFields()#com.intellij.lang.jvm (1907-2085)       (JvmClass.java)

 @return all (static, private, etc) fields declared by this class but excluding inherited ones @see Class#getDeclaredFields 

----------------------

][@NotNullPsiIdentifier createIdentifier(@NotNull String text) throws IncorrectOperationException#com.intellij.psi (9330-9591)       (PsiElementFactory.java)

Creates a Java identifier with the specified text.  @throws IncorrectOperationException if { @code text} is not a valid Java identifier. 

----------------------

, @NotNullPsiKeyword createKeyword(@NotNull String keyword) throws IncorrectOperationException#com.intellij.psi (9595-9847)       (PsiElementFactory.java)

Creates a Java keyword with the specified text.  @throws IncorrectOperationException if { @code text} is not a valid Java keyword. 

----------------------

][private static char [] zzUnpackCMap(String packed) #com.intellij.spi.parsing (15108-15357)       (_SPILexer.java)

 Unpacks the compressed character translation table.  @param packed the packed character translation table @return the unpacked character translation table 

----------------------

, private static char [] zzUnpackCMap(String packed) #com.intellij.lang.java.lexer (30200-30449)       (_JavaLexer.java)

 Unpacks the compressed character translation table.  @param packed the packed character translation table @return the unpacked character translation table 

----------------------

, private static char [] zzUnpackCMap(String packed) #com.intellij.lang.java.lexer (16296-16545)       (_JavaDocLexer.java)

 Unpacks the compressed character translation table.  @param packed the packed character translation table @return the unpacked character translation table 

----------------------

][// Package visible for use by Class.Map classAssertionStatus#java.lang (11309-11616)       (aClassLoader_hl.java)

The map of class assertion status overrides, or null if no classoverrides have been specified yet. The values of the map should beBoolean.TRUE or Boolean.FALSE. This map must be synchronized on thisinstance. 

----------------------

, // Package visible for use by Class.Map classAssertionStatus#java.lang (9674-9981)       (aClassLoader.java)

The map of class assertion status overrides, or null if no classoverrides have been specified yet. The values of the map should beBoolean.TRUE or Boolean.FALSE. This map must be synchronized on thisinstance. 

----------------------

][@Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public class AddNullableAnnotationFix extends AddNullableNotNullAnnotationFix #com.intellij.codeInsight.intention.impl (443-720)       (AddNullableAnnotationFix.java)

 @deprecated use { @link com.intellij.codeInsight.intention.AddAnnotationPsiFix#createAddNullableFix(PsiModifierListOwner)} 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public class AddNotNullAnnotationFix extends AddNullableNotNullAnnotationFix #com.intellij.codeInsight.intention.impl (443-718)       (AddNotNullAnnotationFix.java)

 @deprecated use { @link com.intellij.codeInsight.intention.AddAnnotationPsiFix#createAddNotNullFix(PsiModifierListOwner)} 

----------------------

][protected final Class findSystemClass(String name)throws ClassNotFoundException#java.lang (19505-19945)       (aClassLoader.java)

Helper to find a Class using the system classloader, possibly loading it.A subclass usually does not need to call this, if it correctlyoverrides <code>findClass(String)<code>.  @param name the name of the class to find @return the found class @throws ClassNotFoundException if the class cannot be found 

----------------------

, protected final Class findSystemClass(String name)throws ClassNotFoundException#java.lang (21907-22347)       (aClassLoader_hl.java)

Helper to find a Class using the system classloader, possibly loading it.A subclass usually does not need to call this, if it correctlyoverrides <code>findClass(String)<code>.  @param name the name of the class to find @return the found class @throws ClassNotFoundException if the class cannot be found 

----------------------

][_SPILexer(java.io.Reader in) #com.intellij.spi.parsing (14944-15075)       (_SPILexer.java)

Creates a new scanner  @param inthe java.io.Reader to read input from. 

----------------------

, _JavaLexer(java.io.Reader in) #com.intellij.lang.java.lexer (30035-30167)       (_JavaLexer.java)

Creates a new scanner  @param inthe java.io.Reader to read input from. 

----------------------

, _JavaDocLexer(java.io.Reader in) #com.intellij.lang.java.lexer (16128-16263)       (_JavaDocLexer.java)

Creates a new scanner  @param inthe java.io.Reader to read input from. 

----------------------

][@NotNullPsiClassType createType(@NotNull PsiClass resolve, @NotNull PsiSubstitutor substitutor)#com.intellij.psi (5137-5385)       (JVMElementFactory.java)

Creates a class type for the specified class, using the specified substitutorto replace generic type parameters on the class. 

----------------------

, @Override@NotNullPsiClassType createType(@NotNull PsiClass resolve, @NotNull PsiSubstitutor substitutor)#com.intellij.psi (4413-4673)       (PsiElementFactory.java)

Creates a class type for the specified class, using the specified substitutorto replace generic type parameters on the class. 

----------------------

][boolean isEnum()#com.intellij.psi (1908-2053)       (PsiClass.java)

Checks if the class is an enumeration.  @return true if the class is an enumeration, false otherwise. 

----------------------

, boolean isInterface()#com.intellij.psi (1592-1738)       (PsiClass.java)

Checks if the class is an interface.  @return true if the class is an interface, false otherwise. 

----------------------

][@Override@Nullable @NlsSafeString getQualifiedName()#com.intellij.psi (1756-1965)       (PsiAnnotation.java)

Returns the fully qualified name of the annotation class.  @return the class name, or null if the annotation is unresolved. 

----------------------

, @Nullable@NonNlsString getQualifiedName()#com.intellij.lang.jvm (488-686)       (JvmAnnotation.java)

Returns the fully qualified name of the annotation class.  @return the class name, or null if the annotation is unresolved. 

----------------------

][public synchronized void setClassAssertionStatus(String name, boolean enabled)#AssertionStatus.put(name, Boolean.valueOf(enabled)) (35136-35723)       (aClassLoader.java)

Set the default assertion status for a class. This only affects thestatus of top-level classes, any other string is harmless.  @param name the class to affect @param enabled true to set the default to enabled @throws NullPointerException if name is null @see #setDefaultAssertionStatus(String, boolean) @see #setPackageAssertionStatus(String, boolean) @see #clearAssertionStatus() @since 1.4 

----------------------

, public synchronized void setClassAssertionStatus(String name, boolean enabled)#AssertionStatus.put(name, Boolean.valueOf(enabled)) (39575-40162)       (aClassLoader_hl.java)

Set the default assertion status for a class. This only affects thestatus of top-level classes, any other string is harmless.  @param name the class to affect @param enabled true to set the default to enabled @throws NullPointerException if name is null @see #setDefaultAssertionStatus(String, boolean) @see #setPackageAssertionStatus(String, boolean) @see #clearAssertionStatus() @since 1.4 

----------------------

][boolean isValidLocalVariableName(@NotNull String name)#com.intellij.psi (7950-8102)       (JVMElementFactory.java)

Checks whether the name is a valid local variable name in the current language. 

----------------------

, boolean isValidParameterName(@NotNull String name)#com.intellij.psi (7664-7807)       (JVMElementFactory.java)

Checks whether the name is a valid parameter name in the current language. 

----------------------

, boolean isValidMethodName(@NotNull String name)#com.intellij.psi (7523-7660)       (JVMElementFactory.java)

Checks whether the name is a valid method name in the current language. 

----------------------

, boolean isValidFieldName(@NotNull String name)#com.intellij.psi (7811-7946)       (JVMElementFactory.java)

Checks whether the name is a valid field name in the current language. 

----------------------

, boolean isValidClassName(@NotNull String name)#com.intellij.psi (7384-7519)       (JVMElementFactory.java)

Checks whether the name is a valid class name in the current language. 

----------------------

][PsiImportStaticStatement @NotNull [] getImportStaticStatements()#com.intellij.psi (1334-1533)       (PsiImportList.java)

Returns the static import statements contained in the list.  @return the array of static import statements. 

----------------------

, PsiImportStatement @NotNull [] getImportStatements()#com.intellij.psi (1135-1330)       (PsiImportList.java)

Returns the non-static import statements contained in the list.  @return the array of non-static import statements. 

----------------------

][public static final URL getSystemResource(String name)#java.lang (28471-28737)       (aClassLoader_hl.java)

Get the URL to a resource using the system classloader.  @param name the name of the resource relative to the system classloader @return the URL to the resource @since 1.1 

----------------------

, public static final URL getSystemResource(String name)#java.lang (25401-25667)       (aClassLoader.java)

Get the URL to a resource using the system classloader.  @param name the name of the resource relative to the system classloader @return the URL to the resource @since 1.1 

----------------------

][public ParameterInfoImpl(int oldParameterIndex, @NonNls String name, PsiType aType) #com.intellij.refactoring.changeSignature (1179-1379)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(PsiType) 

----------------------

, public ParameterInfoImpl(int oldParameterIndex, @NonNls String name, PsiType aType, @NonNls String defaultValue) #com.intellij.refactoring.changeSignature (1474-1739)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(PsiType) @see #withDefaultValue(String) 

----------------------

, public ParameterInfoImpl(int oldParameterIndex, @NonNls String name, PsiType aType, @NonNls String defaultValue, boolean useAnyVariable) #com.intellij.refactoring.changeSignature (1810-2133)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(PsiType) @see #withDefaultValue(String) @see #useAnySingleVariable() 

----------------------

, public ParameterInfoImpl(int oldParameterIndex, String name, CanonicalTypes.Type typeWrapper, String defaultValue) #com.intellij.refactoring.changeSignature (2264-2543)       (ParameterInfoImpl.java)

 @see #create(int) @see #createNew() @see #withName(String) @see #withType(CanonicalTypes.Type) @see #withDefaultValue(String) 

----------------------

][public void setDataSource(DataSource ds)#br.com.vivo.torpedeiro.pull.impl (2029-2162)       (SCR11799_after.java)

 @param ds O DataSource utilizado para acesso ao banco de dados. 

----------------------

, public void setDataSource(DataSource ds)#br.com.vivo.torpedeiro.pull.impl (2037-2170)       (SCR11799.java)

 @param ds O DataSource utilizado para acesso ao banco de dados. 

----------------------

][public static @Nullable TargetType findAnnotationTarget(@NotNull PsiAnnotation annotation, TargetType @NotNull ... types) #com.intellij.codeInsight (6426-6822)       (AnnotationTargetUtil.java)

From given targets, returns first where the annotation may be applied. Returns { @code null} when the annotation is not applicableat any of the targets, or { @linkplain TargetType#UNKNOWN} if the annotation does not resolve to a valid annotation type. 

----------------------

, public static @Nullable TargetType findAnnotationTarget(@NotNull PsiClass annotationType, TargetType @NotNull ... types) #com.intellij.codeInsight (7069-7466)       (AnnotationTargetUtil.java)

From given targets, returns first where the annotation may be applied. Returns { @code null} when the annotation is not applicableat any of the targets, or { @linkplain TargetType#UNKNOWN} if the type is not a valid annotation (e.g. cannot be resolved). 

----------------------

][@Nullabledefault String getFieldName() #com.intellij.lang.jvm.annotation (752-951)       (JvmAnnotationEnumFieldValue.java)

This method could be implemented to return value even if the field cannot be resolved.  @return name of the referenced enum field 

----------------------

, @Nullabledefault JvmClass getContainingClass() #com.intellij.lang.jvm.annotation (1043-1262)       (JvmAnnotationEnumFieldValue.java)

This method could be implemented to return value even if the field cannot be resolved.  @return containing class of the referenced enum field 

----------------------

][public String(StringBuilder buffer)# (17522-17817)       (StressClass.java)

Creates a new String using the character sequence represented bythe StringBuilder. Subsequent changes to buf do not affect the String.  @param buffer StringBuilder to copy @throws NullPointerException if buffer is null 

----------------------

, public String(StringBuffer buffer)# (16805-17097)       (StressClass.java)

Creates a new String using the character sequence represented bythe StringBuffer. Subsequent changes to buf do not affect the String.  @param buffer StringBuffer to copy @throws NullPointerException if buffer is null 

----------------------

][public interface JspCodeBlockType #com.intellij.psi.jsp (172-278)       (JspCodeBlockType.java)

Marker interface for the IElementType for a JSP code block. 

----------------------

, public interface JspJavaCodeType #com.intellij.psi.jsp (172-282)       (JspJavaCodeType.java)

Marker interface for the IElementType for a JSP Java code block. 

----------------------

][public void startDumb() #com.intellij.openapi.editor.impl (70420-70535)       (bigFile.java)

{ @link #stopDumbLater} or { @link #stopDumb} must be performed in finally 

----------------------

, public void startDumb() #com.intellij.openapi.editor.impl (71266-71381)       (bigFile.java)

{ @link #stopDumbLater} or { @link #stopDumb} must be performed in finally 

----------------------

][public abstract RefactoringActionHandler createConvertToInstanceMethodHandler()#com.intellij.refactoring (3400-3760)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Convert To Instance Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createTurnRefsToSuperHandler()#com.intellij.refactoring (1850-2203)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Use Interface Where Possible refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createInvertBooleanHandler()#com.intellij.refactoring (8702-9062)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Invert Boolean refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}, that will be inverted 

----------------------

, public abstract RefactoringActionHandler createMethodDuplicatesHandler()#com.intellij.refactoring (4651-5010)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Method Code Duplicates refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts one { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

][public AddModuleWizard(Project project, Component dialogParent, @NotNull String filePath, ProjectImportProvider... importProviders) #com.intellij.ide.util.newProjectWizard (2157-2432)       (AddModuleWizard.java)

 @param project if null, the wizard will start creating new project, otherwise will add a new module to the existing project. 

----------------------

, public AddModuleWizard(@Nullable Project project, @NotNull String filePath, ProjectImportProvider... importProviders) #com.intellij.ide.util.newProjectWizard (1639-1900)       (AddModuleWizard.java)

 @param project if null, the wizard will start creating new project, otherwise will add a new module to the existing project. 

----------------------

][static long clearBit(long value, int bitNumber) #com.intellij.codeInspection.dataFlow.rangeSet (670-921)       (LongRangeUtil.java)

Clears given bit in value @param value value to clear bit at @param bitNumber number of bit to clear (0 = least significant; 63 = most significant) @return updated value 

----------------------

, static long setBit(long value, int bitNumber) #com.intellij.codeInspection.dataFlow.rangeSet (970-1213)       (LongRangeUtil.java)

Sets given bit in value @param value value to set bit at @param bitNumber number of bit to set (0 = least significant; 63 = most significant) @return updated value 

----------------------

][@Nullable@NonNlsString getName()#com.intellij.psi (1377-1547)       (PsiNameValuePair.java)

Returns the name of the element.  @return the name, or null if the annotation declaration is incomplete. 

----------------------

, @NullablePsiIdentifier getNameIdentifier()#com.intellij.psi (1159-1373)       (PsiNameValuePair.java)

Returns the identifier specifying the name of the element.  @return the name identifier, or null if the annotation declaration is incomplete. 

----------------------

][private final boolean initialized#java.lang (6239-6582)       (aClassLoader.java)

This is true if this classloader was successfully initialized.This flag is needed to avoid a class loader attack: even if thesecurity manager rejects an attempt to create a class loader, themalicious class could have a finalize method which proceeds todefine classes. 

----------------------

, private final boolean initialized#java.lang (6817-7160)       (aClassLoader_hl.java)

This is true if this classloader was successfully initialized.This flag is needed to avoid a class loader attack: even if thesecurity manager rejects an attempt to create a class loader, themalicious class could have a finalize method which proceeds todefine classes. 

----------------------

][public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createTempWithQueryHandler()#com.intellij.refactoring (2207-2545)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Temp With Query refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createAnonymousToInnerHandler()#com.intellij.refactoring (474-810)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Anonymous To Inner refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createExtractMethodHandler()#com.intellij.refactoring (6547-6876)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

][@NullablePsiJavaToken getRBrace()#com.intellij.psi (1853-2036)       (PsiCodeBlock.java)

Returns the closing curly brace of the block.  @return the closing curly brace, or null if the block does not have one. 

----------------------

, @NullablePsiJavaToken getLBrace()#com.intellij.psi (1666-1849)       (PsiCodeBlock.java)

Returns the opening curly brace of the block.  @return the opening curly brace, or null if the block does not have one. 

----------------------

][private void zzScanError(int errorCode) #com.intellij.lang.java.lexer (32553-33136)       (_JavaLexer.java)

Reports an error that occurred while scanning. In a wellformed scanner (no or only correct usage ofyypushback(int) and a match-all fallback rule) this methodwill only be called with things that "Can't Possibly Happen".If this method is called, something is seriously wrong(e.g. a JFlex bug producing a faulty scanner etc.). Usual syntaxscanner level error handling should be donein error fallback rules.  @param errorCodethe code of the errormessage to display 

----------------------

, private void zzScanError(int errorCode) #com.intellij.spi.parsing (17461-18044)       (_SPILexer.java)

Reports an error that occurred while scanning. In a wellformed scanner (no or only correct usage ofyypushback(int) and a match-all fallback rule) this methodwill only be called with things that "Can't Possibly Happen".If this method is called, something is seriously wrong(e.g. a JFlex bug producing a faulty scanner etc.). Usual syntaxscanner level error handling should be donein error fallback rules.  @param errorCodethe code of the errormessage to display 

----------------------

, private void zzScanError(int errorCode) #com.intellij.lang.java.lexer (18649-19232)       (_JavaDocLexer.java)

Reports an error that occurred while scanning. In a wellformed scanner (no or only correct usage ofyypushback(int) and a match-all fallback rule) this methodwill only be called with things that "Can't Possibly Happen".If this method is called, something is seriously wrong(e.g. a JFlex bug producing a faulty scanner etc.). Usual syntaxscanner level error handling should be donein error fallback rules.  @param errorCodethe code of the errormessage to display 

----------------------

][@Contract("null -> null#com.intellij.psi.util (4267-4456)       (PsiTypesUtil.java)

Returns the unboxed type name or parameter. @param type boxed java type name @return unboxed type name if available; same value otherwise 

----------------------

, @Contract("null -> null#com.intellij.psi.util (4686-4875)       (PsiTypesUtil.java)

Returns the boxed type name or parameter. @param type primitive java type name @return boxed type name if available; same value otherwise 

----------------------

][@Deprecated@SuppressWarnings("unused")@ApiStatus.ScheduledForRemoval(inVersion = "2021.2")public void setSetupButton(final JButton setUpButton,@Nullable final Project project,final ProjectSdksModel jdksModel,final JdkComboBoxItem firstItem,@Nullable final Condition<? super Sdk> additionalSetup,final String actionGroupTitle) #com.intellij.openapi.roots.ui.configuration (6284-7042)       (JdkComboBox.java)

 @deprecated Use the overloaded constructor to pass these parameters directly tothat class. The { @param setUpButton} is no longer used, the JdkComboBox showsall the needed actions in the popup. The button will be made invisible. 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")@SuppressWarnings("unused")public void setSetupButton(final JButton setUpButton,@Nullable final Project project,final ProjectSdksModel jdksModel,final JdkComboBoxItem firstItem,@Nullable final Condition<? super Sdk> additionalSetup,final boolean moduleJdkSetup) #com.intellij.openapi.roots.ui.configuration (5435-6192)       (JdkComboBox.java)

 @deprecated Use the overloaded constructor to pass these parameters directly tothat class. The { @param setUpButton} is no longer used, the JdkComboBox showsall the needed actions in the popup. The button will be made invisible. 

----------------------

][public abstract class ClassLoader#java.lang (2442-5543)       (aClassLoader.java)

The ClassLoader is a way of customizing the way Java gets its classesand loads them into memory.The verifier and other standard Java thingsstill run, but the ClassLoader is allowed great flexibility in determiningwhere to get the classfiles and when to load and resolve them. For thatmatter, a custom ClassLoader can perform on-the-fly code generation ormodification! <p>Every classloader has a parent classloader that is consulted beforethe 'child' classloader when classes or resources should be loaded.This is done to make sure that classes can be loaded from an hierarchy ofmultiple classloaders and classloaders do not accidentially redefinealready loaded classes by classloaders higher in the hierarchy. <p>The grandparent of all classloaders is the bootstrap classloader, whichloads all the standard system classes as implemented by GNU Classpath. Theother special classloader is the system classloader (also calledapplication classloader) that loads all classes from the CLASSPATH(<code>java.class.path<code> system property). The system classloaderis responsible for finding the application classes from the classpath,and delegates all requests for the standard library classes to its parentthe bootstrap classloader. Most programs will load all their classesthrough the system classloaders. <p>The bootstrap classloader in GNU Classpath is implemented as a couple ofstatic (native) methods on the package private class<code>java.lang.VMClassLoader<code>, the system classloader is ananonymous inner class of ClassLoader and a subclass of<code>java.net.URLClassLoader<code>. <p>Users of a <code>ClassLoader<code> will normally just use the methods<ul> <li> <code>loadClass()<code> to load a class.<li> <li> <code>getResource()<code> or <code>getResourceAsStream()<code>to access a resource.<li> <li> <code>getResources()<code> to get an Enumeration of URLs to allthe resources provided by the classloader and its parents with thesame name.<li><ul> <p>Subclasses should implement the methods<ul> <li> <code>findClass()<code> which is called by <code>loadClass()<code>when the parent classloader cannot provide a named class.<li> <li> <code>findResource()<code> which is called by<code>getResource()<code> when the parent classloader cannot providea named resource.<li> <li> <code>findResources()<code> which is called by<code>getResource()<code> to combine all the resources with thesame name from the classloader and its parents.<li> <li> <code>findLibrary()<code> which is called by<code>Runtime.loadLibrary()<code> when a class defined by theclassloader wants to load a native library.<li><ul>  @author John Keiser @author Mark Wielaard @author Eric Blake (ebb9 @email.byu.edu) @see Class @since 1.0 @status still missing 1.4 functionality 

----------------------

, public abstract class ClassLoader#java.lang (3020-6121)       (aClassLoader_hl.java)

The ClassLoader is a way of customizing the way Java gets its classesand loads them into memory.The verifier and other standard Java thingsstill run, but the ClassLoader is allowed great flexibility in determiningwhere to get the classfiles and when to load and resolve them. For thatmatter, a custom ClassLoader can perform on-the-fly code generation ormodification! <p>Every classloader has a parent classloader that is consulted beforethe 'child' classloader when classes or resources should be loaded.This is done to make sure that classes can be loaded from an hierarchy ofmultiple classloaders and classloaders do not accidentially redefinealready loaded classes by classloaders higher in the hierarchy. <p>The grandparent of all classloaders is the bootstrap classloader, whichloads all the standard system classes as implemented by GNU Classpath. Theother special classloader is the system classloader (also calledapplication classloader) that loads all classes from the CLASSPATH(<code>java.class.path<code> system property). The system classloaderis responsible for finding the application classes from the classpath,and delegates all requests for the standard library classes to its parentthe bootstrap classloader. Most programs will load all their classesthrough the system classloaders. <p>The bootstrap classloader in GNU Classpath is implemented as a couple ofstatic (native) methods on the package private class<code>java.lang.VMClassLoader<code>, the system classloader is ananonymous inner class of ClassLoader and a subclass of<code>java.net.URLClassLoader<code>. <p>Users of a <code>ClassLoader<code> will normally just use the methods<ul> <li> <code>loadClass()<code> to load a class.<li> <li> <code>getResource()<code> or <code>getResourceAsStream()<code>to access a resource.<li> <li> <code>getResources()<code> to get an Enumeration of URLs to allthe resources provided by the classloader and its parents with thesame name.<li><ul> <p>Subclasses should implement the methods<ul> <li> <code>findClass()<code> which is called by <code>loadClass()<code>when the parent classloader cannot provide a named class.<li> <li> <code>findResource()<code> which is called by<code>getResource()<code> when the parent classloader cannot providea named resource.<li> <li> <code>findResources()<code> which is called by<code>getResource()<code> to combine all the resources with thesame name from the classloader and its parents.<li> <li> <code>findLibrary()<code> which is called by<code>Runtime.loadLibrary()<code> when a class defined by theclassloader wants to load a native library.<li><ul>  @author John Keiser @author Mark Wielaard @author Eric Blake (ebb9 @email.byu.edu) @see Class @since 1.0 @status still missing 1.4 functionality 

----------------------

][public abstract boolean isIdentifier(@Nullable String text)#com.intellij.psi (929-1272)       (PsiNameHelper.java)

Checks if the specified text is a Java identifier, using the language level of the projectwith which the name helper is associated to filter out keywords.  @param text the text to check. @return true if the text is an identifier, false otherwise 

----------------------

, public abstract boolean isKeyword(@Nullable String text)#com.intellij.psi (1799-2109)       (PsiNameHelper.java)

Checks if the specified text is a Java keyword, using the language level of the projectwith which the name helper is associated.  @param text the text to check. @return true if the text is a keyword, false otherwise 

----------------------

][String getRenderTextPrefix()#com.intellij.openapi.compiler (2191-2429)       (CompilerMessage.java)

Returns the location prefix prepended to message while exporting compilation results to text.  @return location prefix prepended to message while rendering compilation results in UI. 

----------------------

, String getExportTextPrefix()#com.intellij.openapi.compiler (1947-2187)       (CompilerMessage.java)

Returns the location prefix prepended to message while exporting compilation results to text.  @return location prefix prepended to message while exporting compilation results to text. 

----------------------

][@Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public abstract void removeCompiler(@NotNull Compiler compiler)#com.intellij.openapi.compiler (2970-3215)       (CompilerManager.java)

Unregisters a custom compiler.  @deprecated use { @link CompileTask} extension instead 

----------------------

, @Deprecatedpublic abstract void addCompiler(@NotNull Compiler compiler)#com.intellij.openapi.compiler (1770-1955)       (CompilerManager.java)

Registers a custom compiler.  @deprecated use { @link CompileTask} extension instead 

----------------------

][public String drainBeforeSteps() #com.intellij.codeInspection.streamToLoop (3152-3285)       (ChainContext.java)

Get all before steps and remove them from context.  @return before steps 

----------------------

, public String drainAfterSteps() #com.intellij.codeInspection.streamToLoop (3622-3753)       (ChainContext.java)

Get all after steps and remove them from context.  @return before steps 

----------------------

][@Deprecatedpublic abstract void addCompilableFileType(@NotNull FileType type)#com.intellij.openapi.compiler (3542-3921)       (CompilerManager.java)

Registers the type as a compilable type so that Compile action will be enabled on files of this type.  @param type the type for which the Compile action is enabled. @deprecated use { @link CompilableFileTypesProvider} extension point to register compilable file types 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")public abstract void removeCompilableFileType(@NotNull FileType type)#com.intellij.openapi.compiler (3925-4366)       (CompilerManager.java)

Unregisters the type as a compilable type so that Compile action will be disabled on files of this type.  @param type the type for which the Compile action is disabled. @deprecated use { @link CompilableFileTypesProvider} extension point to register compilable file types 

----------------------

][@Nullable PsiIdentifier getLabelIdentifier()#com.intellij.psi (326-467)       (PsiBreakStatement.java)

Returns an identifier element containing the statement's target label, if any. 

----------------------

, @Nullable PsiIdentifier getLabelIdentifier()#com.intellij.psi (332-473)       (PsiContinueStatement.java)

Returns an identifier element containing the statement's target label, if any. 

----------------------

][public interface PsiSwitchExpression extends PsiSwitchBlock, PsiExpression #com.intellij.psi (168-373)       (PsiSwitchExpression.java)

Represents a Java { @code switch} expression.  @see PsiSwitchLabelStatement @see PsiSwitchLabeledRuleStatement 

----------------------

, public interface PsiSwitchStatement extends PsiSwitchBlock, PsiStatement #com.intellij.psi (168-370)       (PsiSwitchStatement.java)

Represents a Java { @code switch} statement.  @see PsiSwitchLabelStatement @see PsiSwitchLabeledRuleStatement 

----------------------

][public void doSomething(String x, String y) # (882-1076)       (FormatterOnOffTags.java)

And please don't touch this: @param xThese are my nice comments. @param yAnd yet another one. 

----------------------

, public void doSomething(String x, String y) # (913-1107)       (FormatterOnOffTags_after.java)

And please don't touch this: @param xThese are my nice comments. @param yAnd yet another one. 

----------------------

][@NotNullPsiReferenceExpression createReferenceExpression(@NotNull PsiPackage aPackage) throws IncorrectOperationException#com.intellij.psi (9020-9326)       (PsiElementFactory.java)

Creates a reference expression resolving to the specified package.  @throws IncorrectOperationException if { @code aPackage} is the default (root) package. 

----------------------

, @NotNullPsiJavaCodeReferenceElement createPackageReferenceElement(@NotNull PsiPackage aPackage) throws IncorrectOperationException#com.intellij.psi (8072-8384)       (PsiElementFactory.java)

Creates a reference element resolving to the specified package.  @throws IncorrectOperationException if { @code aPackage} is the default (root) package. 

----------------------

][default boolean isAcceptable(PsiType left) #com.intellij.psi (1109-1230)       (PsiFunctionalExpression.java)

 @return true if assignment SAM s = expr is correctly shaped 

----------------------

, boolean isAcceptable(PsiType left, @Nullable PsiMethod method)#com.intellij.psi (1275-1415)       (PsiFunctionalExpression.java)

 @return true if assignment SAM s = expr is correctly shaped 

----------------------

][void f() throws /* 1 */ Exception /* 2 */, /* 3 */ E<caret>xception /* 4 */ # (132-423)       (beforeRemoveDuplicate.java)

 @since 2020.3 @author me @throws Exception first exception @throws Exception second exception @throws FileNotFoundException file not found @throws IOException IO exception 

----------------------

, void f() throws /* 1 */ Exception /* 2 */ /* 3 */ /* 4 */ # (132-405)       (afterRemoveDuplicate.java)

 @since 2020.3 @author me @throws Exception first exception @throws Exception second exception @throws FileNotFoundException file not found @throws IOException IO exception 

----------------------

, void f() throws /* 1 */ Exception /* 2 */, /* 3 */ IO<caret>Exception /* 4 */ # (134-427)       (beforeRemoveSpecific.java)

 @since 2020.3 @author me @throws Exception first exception @throws Exception second exception @throws FileNotFoundException file not found @throws IOException IO exception 

----------------------

, void f() throws /* 1 */ E<caret>xception /* 2 */, /* 3 */ IOException /* 4 */ # (132-425)       (beforeRemoveIgnoreSpecific.java)

 @since 2020.3 @author me @throws Exception first exception @throws Exception second exception @throws FileNotFoundException file not found @throws IOException IO exception 

----------------------

, void f() throws /* 1 */ E<caret>xception /* 2 */ # (65-329)       (beforeRemoveLastThrows.java)

 @since 2020.3 @author me @throws Exception first exception @throws Exception second exception @throws FileNotFoundException file not found @throws IOException IO exception 

----------------------

, void f() throws /* 1 */ Exception /* 2 */ /* 3 */ /* 4 */ # (134-369)       (afterRemoveSpecific.java)

 @since 2020.3 @author me @throws Exception first exception @throws Exception second exception @throws FileNotFoundException file not found 

----------------------

][public int indexOf(String str, int fromIndex)# (36290-36817)       (StressClass.java)

Finds the first instance of a String in this String, starting ata given index.If starting index is less than 0, the searchstarts at the beginning of this String.If the starting indexis greater than the length of this String, -1 is returned.  @param str String to find @param fromIndex index to start the search @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

, public int lastIndexOf(int ch, int fromIndex)# (35266-35751)       (StressClass.java)

Finds the last instance of a character in this String, starting ata given index.If starting index is greater than the maximum validindex, then the search begins at the end of this String.If thestarting index is less than zero, -1 is returned.  @param ch character to find @param fromIndex index to start the search @return location (base 0) of the character, or -1 if not found 

----------------------

, public int indexOf(int ch, int fromIndex)# (34286-34768)       (StressClass.java)

Finds the first instance of a character in this String, starting ata given index.If starting index is less than 0, the searchstarts at the beginning of this String.If the starting indexis greater than the length of this String, -1 is returned.  @param ch character to find @param fromIndex index to start the search @return location (base 0) of the character, or -1 if not found 

----------------------

][protected final Class defineClass(byte[] data, int offset, int len)throws ClassFormatError#java.lang (15453-16163)       (aClassLoader.java)

Helper to define a class using a string of bytes. This version is notsecure.  @param data the data representing the classfile, in classfile format @param offset the offset into the data where the classfile starts @param len the length of the classfile data in the array @return the class that was defined @throws ClassFormatError if data is not in proper classfile format @throws IndexOutOfBoundsException if offset or len is negative, oroffset + len exceeds data @deprecated use { @link #defineClass(String, byte[], int, int)} instead 

----------------------

, protected final Class defineClass(byte[] data, int offset, int len)throws <error descr="Cannot resolve symbol 'ClassFormatError'">ClassFormatError</error>#java.lang (17412-18186)       (aClassLoader_hl.java)

Helper to define a class using a string of bytes. This version is notsecure.  @param data the data representing the classfile, in classfile format @param offset the offset into the data where the classfile starts @param len the length of the classfile data in the array @return the class that was defined @throws ClassFormatError if data is not in proper classfile format @throws IndexOutOfBoundsException if offset or len is negative, oroffset + len exceeds data @deprecated use { @link #defineClass(String, byte[], int, int)} instead 

----------------------

][record Rec(int x, int y, int z) # (0-102)       (RecordCanonicalConstructorReorder.java)

Record javadoc  @param x x @param y y @param z z 

----------------------

, public R<caret>ec(int x, int y, int z) # (105-231)       (RecordCanonicalConstructorReorder.java)

Constructor javadoc  @param x x @param y y @param z z 

----------------------

][@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")@Deprecatedpublic @Nullable PsiAnnotation getNotNullAnnotation(@NotNull PsiModifierListOwner owner, boolean checkBases) #com.intellij.codeInsight (2727-3081)       (NullableNotNullManager.java)

Returns an annotation which marks given element as NotNull, if any. @deprecated use { @link #findEffectiveNullabilityInfo(PsiModifierListOwner)} instead. 

----------------------

, @ApiStatus.ScheduledForRemoval(inVersion = "2021.3")@Deprecatedpublic @Nullable PsiAnnotation getNullableAnnotation(@NotNull PsiModifierListOwner owner, boolean checkBases) #com.intellij.codeInsight (1970-2326)       (NullableNotNullManager.java)

Returns an annotation which marks given element as Nullable, if any. @deprecated use { @link #findEffectiveNullabilityInfo(PsiModifierListOwner)} instead. 

----------------------

][int DEFAULT_GC_ROOTS_PATHS_LIMIT = 10#com.intellij.debugger.memory.agent (641-785)       (MemoryAgent.java)

Maximal number of paths that will be retrieved by { @code findPathsToClosestGCRoots} call 

----------------------

, int DEFAULT_GC_ROOTS_OBJECTS_LIMIT = 50#com.intellij.debugger.memory.agent (789-937)       (MemoryAgent.java)

Maximal number of objects that will be retrieved by { @code findPathsToClosestGCRoots} call 

----------------------

][private int getVisibleLogicalLinesCount() #com.intellij.openapi.editor.impl (148283-148461)       (bigFile.java)

 @return number of visible logical lines. Generally, that is a total logical lines number minus number of folded lines 

----------------------

, private int getVisibleLogicalLinesCount() #com.intellij.openapi.editor.impl (146803-146981)       (bigFile.java)

 @return number of visible logical lines. Generally, that is a total logical lines number minus number of folded lines 

----------------------

][@Nullablepublic abstract PsiClass findClass(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope)#com.intellij.psi (1085-1600)       (PsiElementFinder.java)

Searches the specified scope within the project for a class with the specified full-qualifiedname and returns one if it is found.  @param qualifiedName the full-qualified name of the class to find. @param scope the scope to search. @return the PSI class, or null if no class with such name is found. @see JavaPsiFacade#findClass(String, GlobalSearchScope) 

----------------------

, @Nullabledefault JvmClass findClass(@NonNls @NotNull String qualifiedName, @NotNull GlobalSearchScope scope) #com.intellij.lang.jvm.facade (1277-1740)       (JvmFacade.java)

Searches the specified scope within the project for a class with the specified full-qualifiedname and returns one if it is found.  @param qualifiedName the full-qualified name of the class to find. @param scope the scope to search. @return the PSI class, or null if no class with such name is found. 

----------------------

][public @NotNull TypeAnnotationContainer forEnclosingClass() #com.intellij.psi.impl.cache (2100-2312)       (TypeAnnotationContainer.java)

 @return type annotation container for enclosing class(assuming that this type annotation container is used for the inner class) 

----------------------

, public @NotNull TypeAnnotationContainer forArrayElement() #com.intellij.psi.impl.cache (1655-1862)       (TypeAnnotationContainer.java)

 @return type annotation container for array element(assuming that this type annotation container is used for the array type) 

----------------------

][public class C #bar (14-176)       (C.java)

Created by Irina.Petrovskaya on 8312016.Project: untitled1 

----------------------

, public class D1 #bar (14-177)       (D1.java)

Created by Irina.Petrovskaya on 8312016.Project: untitled1 

----------------------

, public class D4 #bar (14-177)       (D4.java)

Created by Irina.Petrovskaya on 8312016.Project: untitled1 

----------------------

, public class D #bar (14-176)       (D.java)

Created by Irina.Petrovskaya on 8312016.Project: untitled1 

----------------------

, public class D3 #bar (14-177)       (D3.java)

Created by Irina.Petrovskaya on 8312016.Project: untitled1 

----------------------

, public class D2 #bar (14-177)       (D2.java)

Created by Irina.Petrovskaya on 8312016.Project: untitled1 

----------------------

][protected final synchronized Class findLoadedClass(String name)#java.lang (21103-21372)       (aClassLoader.java)

Helper to find an already-loaded class in this ClassLoader.  @param name the name of the class to find @return the found Class, or null if it is not found @since 1.1 

----------------------

, protected final synchronized Class findLoadedClass(String name)#java.lang (23922-24191)       (aClassLoader_hl.java)

Helper to find an already-loaded class in this ClassLoader.  @param name the name of the class to find @return the found Class, or null if it is not found @since 1.1 

----------------------

][// Package visible for use by Class.boolean defaultAssertionStatus = <error descr="Cannot resolve symbol 'VMClassLoader'">VMClassLoader</error>.defaultAssertionStatus()#java.lang (10623-10932)       (aClassLoader_hl.java)

The desired assertion status of classes loaded by this loader, if notoverridden by package or class instructions. 

----------------------

, // Package visible for use by Class.boolean defaultAssertionStatus = VMClassLoader.defaultAssertionStatus()#java.lang (9049-9297)       (aClassLoader.java)

The desired assertion status of classes loaded by this loader, if notoverridden by package or class instructions. 

----------------------

][public int lastIndexOf(String str, int fromIndex)# (37358-37888)       (StressClass.java)

Finds the last instance of a String in this String, starting ata given index.If starting index is greater than the maximum validindex, then the search begins at the end of this String.If thestarting index is less than zero, -1 is returned.  @param str String to find @param fromIndex index to start the search @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

, public int indexOf(String str, int fromIndex)# (36290-36817)       (StressClass.java)

Finds the first instance of a String in this String, starting ata given index.If starting index is less than 0, the searchstarts at the beginning of this String.If the starting indexis greater than the length of this String, -1 is returned.  @param str String to find @param fromIndex index to start the search @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

, public int lastIndexOf(int ch, int fromIndex)# (35266-35751)       (StressClass.java)

Finds the last instance of a character in this String, starting ata given index.If starting index is greater than the maximum validindex, then the search begins at the end of this String.If thestarting index is less than zero, -1 is returned.  @param ch character to find @param fromIndex index to start the search @return location (base 0) of the character, or -1 if not found 

----------------------

][public int lastIndexOf(String str, int fromIndex)# (37358-37888)       (StressClass.java)

Finds the last instance of a String in this String, starting ata given index.If starting index is greater than the maximum validindex, then the search begins at the end of this String.If thestarting index is less than zero, -1 is returned.  @param str String to find @param fromIndex index to start the search @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

, public int lastIndexOf(int ch, int fromIndex)# (35266-35751)       (StressClass.java)

Finds the last instance of a character in this String, starting ata given index.If starting index is greater than the maximum validindex, then the search begins at the end of this String.If thestarting index is less than zero, -1 is returned.  @param ch character to find @param fromIndex index to start the search @return location (base 0) of the character, or -1 if not found 

----------------------

, public int indexOf(int ch, int fromIndex)# (34286-34768)       (StressClass.java)

Finds the first instance of a character in this String, starting ata given index.If starting index is less than 0, the searchstarts at the beginning of this String.If the starting indexis greater than the length of this String, -1 is returned.  @param ch character to find @param fromIndex index to start the search @return location (base 0) of the character, or -1 if not found 

----------------------

][@NullablePsiJavaToken getLParenth()#com.intellij.psi (2667-2873)       (PsiIfStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (801-1007)       (PsiWhileStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (733-944)       (PsiForStatement.java)

Returns the opening parenthesis enclosing the statement header.  @return the opening parenthesis, or { @code null} if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (948-1159)       (PsiForStatement.java)

Returns the closing parenthesis enclosing the statement header.  @return the closing parenthesis, or { @code null} if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getLParenth()#com.intellij.psi (995-1201)       (PsiDoWhileStatement.java)

Returns the opening parenthesis enclosing the statement condition.  @return the opening parenthesis, or null if the statement is incomplete. 

----------------------

][@Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")protected FacetBasedPackagingElementType(@NotNull @NonNls String id, @NotNull @Nls(capitalization = Nls.Capitalization.Title) String presentableName, FacetTypeId<F> facetType) #com.intellij.packaging.impl.elements (1310-1873)       (FacetBasedPackagingElementType.java)

 @deprecated This constructor is meant to provide the binary compatibility with the external plugins.Please use the constructor that accepts a messagePointer for { @link PackagingElementType#myPresentableName} 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")protected ArtifactType(@NonNls String id, @Nls(capitalization = Nls.Capitalization.Sentence) String title) #com.intellij.packaging.artifacts (1100-1490)       (ArtifactType.java)

 @deprecated This constructor is meant to provide the binary compatibility with the external plugins.Please use the constructor that accepts a messagePointer for { @link ArtifactType#myTitle} 

----------------------

, @Deprecated@ApiStatus.ScheduledForRemoval(inVersion = "2021.3")protected PackagingElementType(@NotNull @NonNls String id, @NotNull @Nls(capitalization = Nls.Capitalization.Title) String presentableName) #com.intellij.packaging.elements (924-1365)       (PackagingElementType.java)

 @deprecated This constructor is meant to provide the binary compatibility with the external plugins.Please use the constructor that accepts a messagePointer for { @link PackagingElementType#myPresentableName} 

----------------------

][private static final int [] ZZ_ROWMAP = zzUnpackRowMap()#com.intellij.lang.java.lexer (9384-9517)       (_JavaDocLexer.java)

 Translates a state to a row index in the transition table 

----------------------

, private static final int [] ZZ_ROWMAP = zzUnpackRowMap()#com.intellij.lang.java.lexer (12568-12701)       (_JavaLexer.java)

 Translates a state to a row index in the transition table 

----------------------

, private static final int [] ZZ_ROWMAP = zzUnpackRowMap()#com.intellij.spi.parsing (11043-11176)       (_SPILexer.java)

 Translates a state to a row index in the transition table 

----------------------

][@Overrideboolean isConstructor()#com.intellij.psi (2284-2447)       (PsiMethod.java)

Checks if the method is a constructor.  @return true if the method is a constructor, false otherwise 

----------------------

, boolean isConstructor()#com.intellij.codeInspection.reference (3213-3365)       (RefMethod.java)

Checks if the method is a constructor.  @return true if the method is a constructor, false otherwise. 

----------------------

][@NotNullPsiParameter createParameter(@NotNull String name, PsiType type) throws IncorrectOperationException#com.intellij.psi (2585-2901)       (JVMElementFactory.java)

Creates a parameter with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @NotNullPsiField createField(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (1344-1657)       (JVMElementFactory.java)

Creates a field with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiParameter createParameter(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (3934-4312)       (PsiElementFactory.java)

Creates a parameter with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, @NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (1992-2370)       (JVMElementFactory.java)

Creates an empty method with the specified name and return type in the given context.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiField createField(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (2692-3058)       (PsiElementFactory.java)

Creates a field with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, PsiParameter createParameter(@NotNull String name, PsiType type, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (2905-3261)       (JVMElementFactory.java)

Creates a parameter with the specified name and type in the given context.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

][void foo() # (14-399)       (SCR11296_after.java)

The <code>String<code> class representscharacter strings. All string literals inJava programs, such as <code>"abc"<code>,are implemented as instances of thisclass.Some text after empty line  @author Lee Boynton @author Arthur van Hoff @version 1.152, 020103 @since JDK1.0 

----------------------

, void foo() # (10-344)       (SCR11296.java)

The <code>String<code> class represents character strings. Allstring literals in Java programs, such as <code>"abc"<code>, areimplemented as instances of this class. Some text after empty line  @authorLee Boynton @authorArthur van Hoff @version 1.152, 020103 @since JDK1.0 

----------------------

][@NullablePsiExpression getElseExpression()#com.intellij.psi (1288-1528)       (PsiConditionalExpression.java)

Returns the expression which is the result used when the condition is false.  @return the false result expression, or null if the conditional expression is incomplete. 

----------------------

, @NullablePsiExpression getThenExpression()#com.intellij.psi (1046-1284)       (PsiConditionalExpression.java)

Returns the expression which is the result used when the condition is true.  @return the true result expression, or null if the conditional expression is incomplete. 

----------------------

][protected final void setSigners(Class c, Object[] signers)#java.lang (20796-21068)       (aClassLoader.java)

Helper to set the signers of a class. This should be called afterdefining the class.  @param c the Class to set signers of @param signers the signers to set @since 1.1 

----------------------

, protected final void setSigners(Class c, Object[] signers)#java.lang (23615-23887)       (aClassLoader_hl.java)

Helper to set the signers of a class. This should be called afterdefining the class.  @param c the Class to set signers of @param signers the signers to set @since 1.1 

----------------------

][public String toLowerCase(Locale loc)# (46173-46632)       (StressClass.java)

Lowercases this String according to a particular locale. This usesUnicode's special case mappings, as applied to the given Locale, so theresulting string may be a different length.  @param loc locale to use @return new lowercased String, or this if no characters were lowercased @throws NullPointerException if loc is null @see #toUpperCase(Locale) @since 1.1 

----------------------

, public String toUpperCase(Locale loc)# (47898-48357)       (StressClass.java)

Uppercases this String according to a particular locale. This usesUnicode's special case mappings, as applied to the given Locale, so theresulting string may be a different length.  @param loc locale to use @return new uppercased String, or this if no characters were uppercased @throws NullPointerException if loc is null @see #toLowerCase(Locale) @since 1.1 

----------------------

][@Override@NotNullPsiSubstitutor createSubstitutor(@NotNull Map<PsiTypeParameter, PsiType> map)#com.intellij.psi (5700-5908)       (PsiElementFactory.java)

Creates a substitutor which uses the specified mapping between type parameters and types. 

----------------------

, @NotNullPsiSubstitutor createSubstitutor(@NotNull Map<PsiTypeParameter, PsiType> map)#com.intellij.psi (6360-6556)       (JVMElementFactory.java)

Creates a substitutor which uses the specified mapping between type parameters and types. 

----------------------

][public class JavaLineBreakpointType extends JavaLineBreakpointTypeBase<JavaLineBreakpointProperties> #com.intellij.debugger.ui.breakpoints (1800-1997)       (JavaLineBreakpointType.java)

Base class for java line-connected exceptions (line, method, field) @author egor 

----------------------

, public abstract class JavaLineBreakpointTypeBase<P extends JavaBreakpointProperties> extends XLineBreakpointType<P>implements JavaBreakpointType<P> #com.intellij.debugger.ui.breakpoints (1547-1794)       (JavaLineBreakpointTypeBase.java)

Base class for java line-connected exceptions (line, method, field) @author egor 

----------------------

][public static String valueOf(char[] data, int offset, int count)# (52625-53451)       (StressClass.java)

Returns a String representing the character sequence of the char array,starting at the specified offset, and copying chars up to the specifiedcount. Subsequent changes to the array do not affect the String.  @param data character array @param offset position (base 0) to start copying out of data @param count the number of characters from data to copy @return String containing the chars from data[offset..offset+count] @throws NullPointerException if data is null @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0|| offset + count &gt; data.length)(while unspecified, this is a StringIndexOutOfBoundsException) @see #String(char[], int, int) 

----------------------

, public static String copyValueOf(char[] data, int offset, int count)# (53510-54340)       (StressClass.java)

Returns a String representing the character sequence of the char array,starting at the specified offset, and copying chars up to the specifiedcount. Subsequent changes to the array do not affect the String.  @param data character array @param offset position (base 0) to start copying out of data @param count the number of characters from data to copy @return String containing the chars from data[offset..offset+count] @throws NullPointerException if data is null @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0|| offset + count &gt; data.length)(while unspecified, this is a StringIndexOutOfBoundsException) @see #String(char[], int, int) 

----------------------

][@Nullablepublic static String getCommentPlaceholder(@NotNull Document document, @NotNull IElementType commentType, @NotNull TextRange commentRange, @NotNull String replacement) #com.intellij.codeInsight.folding.impl (6237-6845)       (CommentFoldingUtil.java)

Construct placeholder for comment based on its type.  @param document document with comment @param commentTypetype of comment @param commentRange text range of comment @param replacementreplacement for comment content. included in placeholder 

----------------------

, @Nullablepublic static String getCommentPlaceholder(@NotNull Document document, @NotNull IElementType commentType, @NotNull TextRange commentRange) #com.intellij.codeInsight.folding.impl (5698-6150)       (CommentFoldingUtil.java)

Construct placeholder for comment based on its type.  @param document document with comment @param commentTypetype of comment @param commentRange text range of comment 

----------------------

][public CFGBuilder push(DfType value) #com.intellij.codeInspection.dataFlow (5706-5946)       (CFGBuilder.java)

Generate instructions to push given DfType on stack.<p>Stack before: ...<p>Stack after: ... value  @param value value to push @return this builder 

----------------------

, public CFGBuilder push(DfaValue value) #com.intellij.codeInspection.dataFlow (4975-5219)       (CFGBuilder.java)

Generate instructions to push given DfaValue on stack.<p>Stack before: ...<p>Stack after: ... value  @param value value to push @return this builder 

----------------------

][public static boolean inlinerMayInferPreciseType(PsiExpression expression) #com.intellij.codeInspection.dataFlow (84924-85148)       (ControlFlowAnalyzer.java)

 @param expression expression to test @return true if some inliner may add constraints on the precise type of given expression 

----------------------

, default boolean mayInferPreciseType(@NotNull PsiExpression expression) #com.intellij.codeInspection.dataFlow.inliner (1540-1760)       (CallInliner.java)

 @param expression expression to test @return true if this inliner may add constraints on the precise type of given expression 

----------------------

][PsiCatchSection @NotNull [] getCatchSections()#com.intellij.psi (1544-1788)       (PsiTryStatement.java)

Returns the array of { @code catch} sections in the statement.  @return the array of { @code catch} sections, or an empty array if the statementhas no catch sections. 

----------------------

, PsiCodeBlock @NotNull [] getCatchBlocks()#com.intellij.psi (1051-1307)       (PsiTryStatement.java)

Returns the array of code blocks executed in the { @code catch} sectionsof the statement.  @return the array of code blocks, or an empty array if the statement has no catch sections. 

----------------------

][private int myOldEndLine#com.intellij.openapi.editor.impl (247707-247831)       (bigFile.java)

Holds number of the last logical line affected by the last document change. 

----------------------

, private int myOldEndLine#com.intellij.openapi.editor.impl (246732-246856)       (bigFile.java)

Holds number of the last logical line affected by the last document change. 

----------------------

][@NotNullIElementType getOperationTokenType()#com.intellij.psi (1612-1779)       (PsiAssignmentExpression.java)

Returns the type of the token representing the operation performed.  @return the token type. 

----------------------

, @Override@NotNullIElementType getOperationTokenType()#com.intellij.psi (1926-2105)       (PsiBinaryExpression.java)

Returns the type of the token representing the operation performed.  @return the token type. 

----------------------

, @NotNullIElementType getOperationTokenType()#com.intellij.psi (1282-1449)       (PsiUnaryExpression.java)

Returns the type of the token representing the operation performed.  @return the token type. 

----------------------

][// Package visible for use by Class.static final Map systemClassAssertionStatus= <error descr="Cannot resolve symbol 'VMClassLoader'">VMClassLoader</error>.classAssertionStatus()#java.lang (10262-10615)       (aClassLoader_hl.java)

The command-line state of the class assertion status overrides. Thismap is never modified, so it does not need to be synchronized. 

----------------------

, // Package visible for use by Class.static final Map systemClassAssertionStatus= VMClassLoader.classAssertionStatus()#java.lang (8749-9041)       (aClassLoader.java)

The command-line state of the class assertion status overrides. Thismap is never modified, so it does not need to be synchronized. 

----------------------

][public String toUpperCase()# (50115-50474)       (StressClass.java)

Uppercases this String. This uses Unicode's special case mappings, asapplied to the platform's default Locale, so the resulting string maybe a different length.  @return new uppercased String, or this if no characters were uppercased @see #toUpperCase(Locale) @see #toLowerCase() 

----------------------

, public String toLowerCase()# (47486-47845)       (StressClass.java)

Lowercases this String. This uses Unicode's special case mappings, asapplied to the platform's default Locale, so the resulting string maybe a different length.  @return new lowercased String, or this if no characters were lowercased @see #toLowerCase(Locale) @see #toUpperCase() 

----------------------

][@Override@NotNullString getPackageName()#com.intellij.psi (1076-1341)       (PsiJavaFile.java)

Returns the name of the package to which the file belongs.  @return the name specified in the package statement, or an empty string for a JSP page orfile which has no package statement. 

----------------------

, @NlsSafe String getPackageName()#com.intellij.psi (936-1187)       (PsiClassOwner.java)

Returns the name of the package to which the file belongs.  @return the name specified in the package statement, or an empty string for a JSP page orfile which has no package statement. 

----------------------

][boolean isNotNull(DfaValue value)#com.intellij.codeInspection.dataFlow (4634-4777)       (DfaMemoryState.java)

 @param value to check @return true if given value is not-null within this memory state 

----------------------

, boolean isNull(DfaValue value)#com.intellij.codeInspection.dataFlow (4494-4630)       (DfaMemoryState.java)

 @param value to check @return true if given value is null within this memory state 

----------------------

][class B3 #pkg (260-430)       (See3.java)

 @see #equals(Object) @see B3#equals(Object) @see pkg.B3#equals(Object) @see Object#equals(Object) @see java.lang.Object#equals(Object) 

----------------------

, class A3 #pkg (14-184)       (See3.java)

 @see #equals(Object) @see A3#equals(Object) @see pkg.A3#equals(Object) @see Object#equals(Object) @see java.lang.Object#equals(Object) 

----------------------

][public boolean isRaw() #com.intellij.psi (6727-7008)       (PsiClassType.java)

Checks whether this type is a raw type. <br>Raw type is a class type for a class <i>with type parameters<i> which does not assignany value to them. If a class does not have any type parameters, it cannot generate any raw type. 

----------------------

, public static boolean isRaw(ClassResolveResult resolveResult) #com.intellij.psi (6221-6568)       (PsiClassType.java)

Checks whether the specified resolve result represents a raw type. <br>Raw type is a class type for a class <i>with type parameters<i> which does not assignany value to them. If a class does not have any type parameters, it cannot generate any raw type. 

----------------------

][void setThisType(PsiType psiType)#com.intellij.psi (1097-1293)       (JavaCodeFragment.java)

Sets the type corresponding to the { @code this} keyword in the code fragment.  @param psiType the type of { @code this} in the fragment. 

----------------------

, PsiType getThisType()#com.intellij.psi (913-1093)       (JavaCodeFragment.java)

Returns the type corresponding to the { @code this} keyword in the code fragment.  @return the type of { @code this} in the fragment. 

----------------------

, PsiType getSuperType()#com.intellij.psi (1297-1480)       (JavaCodeFragment.java)

Returns the type corresponding to the { @code super} keyword in the code fragment.  @return the type of { @code super} in the fragment. 

----------------------

][protected abstract boolean invokeImpl(Project project, PsiLocalVariable localVariable, @Nullable Editor editor)#com.intellij.refactoring (3465-3665)       (IntroduceHandlerBase.java)

 @param editor editor to highlight stuff in. Should accept { @code null} 

----------------------

, protected abstract boolean invokeImpl(Project project, PsiExpression tempExpr, @Nullable Editor editor)#com.intellij.refactoring (3269-3461)       (IntroduceHandlerBase.java)

 @param editor editor to highlight stuff in. Should accept { @code null} 

----------------------

][public abstract RefactoringActionHandler createIntroduceFieldHandler()#com.intellij.refactoring (7311-7793)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Introduce Field refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts either 1 { @code PsiExpression}, that will be an initializer for introduced field,or 1 { @code PsiLocalVariable}, that will be replaced with introduced field. 

----------------------

, public abstract RefactoringActionHandler createIntroduceParameterHandler()#com.intellij.refactoring (2549-3047)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Introduce Parameter refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts either 1 { @code PsiExpression}, that will be an initializer for introduced parameter,or 1 { @code PsiLocalVariable}, that will be replaced with introduced parameter. 

----------------------

, public abstract RefactoringActionHandler createIntroduceConstantHandler()#com.intellij.refactoring (8204-8698)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Introduce Constant refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts either 1 { @code PsiExpression}, that will be an initializer for introduced constant,or 1 { @code PsiLocalVariable}, that will be replaced with introduced constant. 

----------------------

][protected ClassLoader(ClassLoader parent)#java.lang (12068-12772)       (aClassLoader_hl.java)

Create a new ClassLoader with the specified parent. The parent willbe consulted when a class or resource is requested through<code>loadClass()<code> or <code>getResource()<code>. Only when theparent classloader cannot provide the requested class or resource the<code>findClass()<code> or <code>findResource()<code> methodof this classloader will be called. There may be a security check for<code>checkCreateClassLoader<code>.  @param parent the classloader's parent, or null for the bootstrap classloader @throws SecurityException if the security check fails @since 1.2 

----------------------

, protected ClassLoader(ClassLoader parent)#java.lang (10368-11072)       (aClassLoader.java)

Create a new ClassLoader with the specified parent. The parent willbe consulted when a class or resource is requested through<code>loadClass()<code> or <code>getResource()<code>. Only when theparent classloader cannot provide the requested class or resource the<code>findClass()<code> or <code>findResource()<code> methodof this classloader will be called. There may be a security check for<code>checkCreateClassLoader<code>.  @param parent the classloader's parent, or null for the bootstrap classloader @throws SecurityException if the security check fails @since 1.2 

----------------------

][public static void addFromMaven(@NotNull ModifiableRootModel model, String mavenCoordinates, boolean includeTransitiveDependencies) #com.intellij.testFramework.fixtures (1392-1901)       (MavenDependencyUtil.java)

Adds a Maven library to given model as { @link DependencyScope#COMPILE} dependency.  @param model root model to add a Maven library to @param mavenCoordinatesmaven coordinates like groupID:artifactID:version @param includeTransitiveDependencies true for include transitive dependencies, false otherwise 

----------------------

, public static void addFromMaven(@NotNull ModifiableRootModel model, String mavenCoordinates,boolean includeTransitiveDependencies, DependencyScope dependencyScope) #com.intellij.testFramework.fixtures (2008-2601)       (MavenDependencyUtil.java)

Adds a Maven library to given model.  @param model root model to add a Maven library to @param mavenCoordinatesmaven coordinates like groupID:artifactID:version @param includeTransitiveDependencies true for include transitive dependencies, false otherwise @param dependencyScope scope of the library 

----------------------

][public int lastIndexOf(String str)# (37045-37302)       (StressClass.java)

Finds the last instance of a String in this String.  @param str String to find @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

, public int indexOf(String str)# (36000-36254)       (StressClass.java)

Finds the first instance of a String in this String.  @param str String to find @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

][@NotNullpublic abstract PsiTypeCodeFragment createTypeCodeFragment(@NotNull String text, @Nullable PsiElement context, boolean isPhysical, @MagicConstant(flags = #com.intellij.psi (3605-4586)       (JavaCodeFragmentFactory.java)

Creates a Java type code fragment from the text of the name of a Java type (the nameof a primitive type, array type or class).<br>{ @code void}, ellipsis and disjunctive types are optionally treated as valid ones.  @param text the text of the Java type to create. @param contextthe context for resolving references from the code fragment. @param isPhysical whether the code fragment is created as a physical element(see { @link PsiElement#isPhysical()}). @param flagstypes allowed to present in text. @return the created code fragment. 

----------------------

, @NotNullpublic abstract PsiTypeCodeFragment createTypeCodeFragment(@NotNull String text, @Nullable PsiElement context, boolean isPhysical)#com.intellij.psi (2911-3601)       (JavaCodeFragmentFactory.java)

Creates a Java type code fragment from the text of the name of a Java type (the nameof a primitive type, array type or class), with { @code void} and ellipsisnot treated as a valid type.  @param text the text of the Java type to create. @param contextthe context for resolving references from the code fragment. @param isPhysical whether the code fragment is created as a physical element(see { @link PsiElement#isPhysical()}). @return the created code fragment. 

----------------------

][public abstract void enqueueMethodUsagesProcessor(RefMethod refMethod, UsagesProcessor p)#com.intellij.codeInspection (2859-3249)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified method outside the current analysisscope be passed to the specified processor.  @param refMethod the reference graph node for the method whose usages should be processed. @param p the processor to pass the usages to. 

----------------------

, public abstract void enqueueDerivedMethodsProcessor(RefMethod refMethod, DerivedMethodsProcessor p)#com.intellij.codeInspection (2030-2468)       (GlobalJavaInspectionContext.java)

Requests that implementing or overriding methods of the specified method outsidethe current analysis scope be passed to the specified processor.  @param refMethod the reference graph node for the method whose derived methods should be processed. @param p the processor to pass the methods to. 

----------------------

][@NotNullPsiExpression createExpressionFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8249-8759)       (PsiJavaParserFacade.java)

Creates a Java expression from the specified text.  @param textthe text of the expression to create. @param context the PSI element used as context for resolving references from the expression. @return the created expression instance. @throws IncorrectOperationException if the text does not specify a valid expression. 

----------------------

, @NotNullPsiComment createCommentFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8763-9252)       (PsiJavaParserFacade.java)

Creates a Java comment from the specified text.  @param textthe text of the comment to create. @param context the PSI element used as context for resolving references from the comment. @return the created comment instance. @throws IncorrectOperationException if the text does not specify a valid comment. 

----------------------

, @NotNullPsiResourceVariable createResourceFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (4964-5473)       (PsiJavaParserFacade.java)

Creates a Java try-resource from the specified text.  @param textthe text of the resource to create. @param context the PSI element used as context for resolving references from the resource. @return the created resource instance. @throws IncorrectOperationException if the text is not a valid resource definition. 

----------------------

, @NotNullPsiMethod createMethodFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (3429-3906)       (PsiJavaParserFacade.java)

Creates a Java method from the specified text.  @param textthe text of the method to create. @param context the PSI element used as context for resolving references from the method. @return the created method instance. @throws IncorrectOperationException if the text is not a valid method body. 

----------------------

, @NotNullPsiField createFieldFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (2324-2794)       (PsiJavaParserFacade.java)

Creates a Java field from the specified text.  @param textthe text of the field to create. @param context the PSI element used as context for resolving references from the field. @return the created field instance. @throws IncorrectOperationException if the text is not a valid field body. 

----------------------

, @NotNullPsiStatement createStatementFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (7742-8245)       (PsiJavaParserFacade.java)

Creates a Java statement from the specified text.  @param textthe text of the statement to create. @param context the PSI element used as context for resolving references from the statement. @return the created statement instance. @throws IncorrectOperationException if the text does not specify a valid statement. 

----------------------

, @NotNullPsiParameter createParameterFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (3910-4415)       (PsiJavaParserFacade.java)

Creates a Java method parameter from the specified text.  @param textthe text of the parameter to create. @param context the PSI element used as context for resolving references from the parameter. @return the created parameter instance. @throws IncorrectOperationException if the text is not a valid parameter body. 

----------------------

][private void setFontSize(final int fontSize, @Nullable Point zoomCenter) #com.intellij.openapi.editor.impl (36340-36655)       (bigFile.java)

Changes editor font size, attempting to keep a given point unmoved. If point is not given, top left screen corner is assumed.  @param fontSize new font size @param zoomCenter zoom point, relative to viewport 

----------------------

, private void setFontSize(final int fontSize, @Nullable Point zoomCenter) #com.intellij.openapi.editor.impl (37380-37693)       (bigFile.java)

Changes editor font size, attempting to keep a given point unmoved. If point is not given, top left screen corner is assumed.  @param fontSize new font size @param zoomCenter zoom point, relative to viewport 

----------------------

][@Override@NotNullPsiSubstitutor createRawSubstitutor(@NotNull PsiTypeParameterListOwner owner)#com.intellij.psi (5456-5696)       (PsiElementFactory.java)

Creates a substitutor for the specified class which replaces all type parameterswith their corresponding raw types. 

----------------------

, @NotNullPsiSubstitutor createRawSubstitutor(@NotNull PsiTypeParameterListOwner owner)#com.intellij.psi (6133-6356)       (JVMElementFactory.java)

Creates a substitutor for the specified class which replaces all type parameters with their corresponding raw types. 

----------------------

][public static void addFromMaven(@NotNull ModifiableRootModel model, String mavenCoordinates) #com.intellij.testFramework.fixtures (957-1335)       (MavenDependencyUtil.java)

Adds a Maven library to given model as { @link DependencyScope#COMPILE} dependency including transitive dependencies.  @param modelroot model to add a Maven library to @param mavenCoordinates maven coordinates like groupID:artifactID:version 

----------------------

, public static void addFromMaven(@NotNull ModifiableRootModel model, String mavenCoordinates, boolean includeTransitiveDependencies) #com.intellij.testFramework.fixtures (1392-1901)       (MavenDependencyUtil.java)

Adds a Maven library to given model as { @link DependencyScope#COMPILE} dependency.  @param model root model to add a Maven library to @param mavenCoordinatesmaven coordinates like groupID:artifactID:version @param includeTransitiveDependencies true for include transitive dependencies, false otherwise 

----------------------

][int VAR_PROBABILITY_THRESHOLD = 1#com.intellij.compiler.chainsSearch (904-1030)       (ChainSearchMagicConstants.java)

Used to know do 2 variables frequently occurred in one file simultaneously 

----------------------

, int METHOD_PROBABILITY_THRESHOLD = 5#com.intellij.compiler.chainsSearch (773-900)       (ChainSearchMagicConstants.java)

Used to know do 2 methods frequently occurred in one file simultaneously 

----------------------

][@NotNullpublic DfType asDfType(@NotNull DfType fieldValue) #com.intellij.codeInspection.dataFlow (14096-14334)       (SpecialField.java)

 @param fieldValue dfType of the special field value @return a dfType that represents a value having this special field restricted to the supplied dfType 

----------------------

, @NotNullpublic DfType asDfType(@NotNull DfType fieldValue, @Nullable PsiType exactResultType) #com.intellij.codeInspection.dataFlow (14738-15068)       (SpecialField.java)

 @param fieldValue dfType of the special field value @param exactResultType exact PSI type of the result @return a dfType that represents a value having this special field restricted to the supplied dfType 

----------------------

][CandidateInfo @NotNull [] getReferencedMethodCandidates(@NotNull PsiCallExpression call, boolean dummyImplicitConstructor)#com.intellij.psi (2589-3059)       (PsiResolveHelper.java)

Resolves a call expression and returns an array of possible resolve results.  @param call the call expression to resolve. @param dummyImplicitConstructor if true, implicit empty constructor which does not actually existcan be returned as a candidate for the resolve. @return the array of resolve results. 

----------------------

, CandidateInfo @NotNull [] getReferencedMethodCandidates(@NotNull PsiCallExpression call, boolean dummyImplicitConstructor, boolean checkVarargs)#com.intellij.psi (3063-3651)       (PsiResolveHelper.java)

Resolves a call expression and returns an array of possible resolve results.  @param call the call expression to resolve. @param dummyImplicitConstructor if true, implicit empty constructor which does not actually existcan be returned as a candidate for the resolve. @param checkVarargs true if varargs method should lead to 2 candidates in the result array @return the array of resolve results. 

----------------------

][@Overridevoid setInitializer(@Nullable PsiExpression initializer) throws IncorrectOperationException#com.intellij.psi (820-1224)       (PsiField.java)

Adds initializer to the field declaration or, if { @code initializer} parameter is null,removes the initializer from the field declaration.  @param initializer the initializer to add. @throws IncorrectOperationException if the modifications fails for some reason. 

----------------------

, @Overridevoid setInitializer(@Nullable PsiExpression initializer) throws IncorrectOperationException#com.intellij.psi (453-853)       (PsiLocalVariable.java)

Adds initializer to the variable declaration statement or, if { @code initializer}parameter is null, removes initializer from variable.  @param initializer the initializer to add. @throws IncorrectOperationException if the modifications fails for some reason. 

----------------------

][private boolean zzEOFDone#com.intellij.lang.java.lexer (29536-29626)       (_JavaLexer.java)

 denotes if the user-EOF-code has already been executed 

----------------------

, private boolean zzEOFDone#com.intellij.lang.java.lexer (15488-15578)       (_JavaDocLexer.java)

 denotes if the user-EOF-code has already been executed 

----------------------

, private boolean zzEOFDone#com.intellij.spi.parsing (14770-14860)       (_SPILexer.java)

 denotes if the user-EOF-code has already been executed 

----------------------

][public Rec(int y, int z, int x) # (105-224)       (RecordCanonicalConstructorReorder_after.java)

Constructor javadoc  @param y y @param z z @param x x 

----------------------

, record Rec(int y, int z, int x) # (0-102)       (RecordCanonicalConstructorReorder_after.java)

Record javadoc  @param y y @param z z @param x x 

----------------------

][@Override@NullablePsiJavaCodeReferenceElement getQualifier()#com.intellij.psi (990-1162)       (PsiSuperExpression.java)

Returns an expression representing a type name qualifying the { @code super} expression. 

----------------------

, @Override@NullablePsiJavaCodeReferenceElement getQualifier()#com.intellij.psi (796-967)       (PsiThisExpression.java)

Returns an expression representing a type name qualifying the { @code this} expression. 

----------------------

][@NotNullpublic abstract List<UsageInfo> createUsageInfosForNewlyCreatedDirs()#com.intellij.refactoring.move.moveClassesOrPackages (1993-2277)       (ModuleInfoUsageDetector.java)

Handling the absent directories which haven't been created yet during find usages operation.Sample: we have a class pack1.A, we want to move it to pack1.pack2 which doesn't exist. 

----------------------

, @Override@NotNullpublic List<UsageInfo> createUsageInfosForNewlyCreatedDirs() #com.intellij.refactoring.move.moveClassesOrPackages (2029-2317)       (ModuleInfoModifyUsageDetector.java)

Handling the absent directories which haven't been created yet during find usages operation.Sample: we have a class pack1.A, we want to move it to pack1.pack2 which doesn't exist. 

----------------------

][PsiMethod @NotNull [] findMethodsByName(@NonNls String name, boolean checkBases)#com.intellij.psi (7922-8346)       (PsiClass.java)

Searches the class (and optionally its superclasses) for the methods with the specified name.  @param name the name of the methods to find. @param checkBases if true, the methods are also searched in the base classes of the class. @return the found methods, or an empty array if no methods are found. 

----------------------

, @NotNullList<Pair<PsiMethod, PsiSubstitutor>> findMethodsAndTheirSubstitutorsByName(@NonNls String name, boolean checkBases)#com.intellij.psi (8350-8902)       (PsiClass.java)

Searches the class (and optionally its superclasses) for the methods with the specified nameand returns the methods along with their substitutors.  @param name the name of the methods to find. @param checkBases if true, the methods are also searched in the base classes of the class. @return the found methods and their substitutors, or an empty list if no methods are found. 

----------------------

][public abstract RefactoringActionHandler createPullUpHandler()#com.intellij.refactoring (814-1326)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Pull Members Up refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts either a { @link com.intellij.psi.PsiClass}, { @link com.intellij.psi.PsiField} or { @link com.intellij.psi.PsiMethod}.In latter two cases, { @code elements[0]} is a member that will be preselected. 

----------------------

, public abstract RefactoringActionHandler createPushDownHandler()#com.intellij.refactoring (1330-1846)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Push Members Down refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts either a { @link com.intellij.psi.PsiClass}, { @link com.intellij.psi.PsiField} or { @link com.intellij.psi.PsiMethod}.In latter two cases, { @code elements[0]} is a member that will be preselected. 

----------------------

][public synchronized void update(int startLine, int newEndLine, int oldEndLine) #com.intellij.openapi.editor.impl (248745-250123)       (bigFile.java)

Notifies current size container about document content change.<p>Every change is assumed to be identified by three characteristics - start, ole end and new end lines.<b>Example:<b><pre><ol><li> Consider that we have the following document initially: <pre> line 1 line 2 line 3 <pre><li><li> Let's assume that the user selected the last two lines and typed 'new line' (that effectively removed selected text). Current document state: <pre> line 1 new line <pre><li><li> Current method is expected to be called with the following parameters: <ul> <li><b>startLine<b> is 1'<li> <li><b>oldEndLine<b> is 2'<li> <li><b>newEndLine<b> is 1'<li> <ul><li><ol><pre>  @param startLinelogical line that contains changed fragment start offset @param newEndLine logical line that contains changed fragment end @param oldEndLine logical line that contained changed fragment end 

----------------------

, public synchronized void update(int startLine, int newEndLine, int oldEndLine) #com.intellij.openapi.editor.impl (247772-249150)       (bigFile.java)

Notifies current size container about document content change.<p>Every change is assumed to be identified by three characteristics - start, ole end and new end lines.<b>Example:<b><pre><ol><li> Consider that we have the following document initially: <pre> line 1 line 2 line 3 <pre><li><li> Let's assume that the user selected the last two lines and typed 'new line' (that effectively removed selected text). Current document state: <pre> line 1 new line <pre><li><li> Current method is expected to be called with the following parameters: <ul> <li><b>startLine<b> is 1'<li> <li><b>oldEndLine<b> is 2'<li> <li><b>newEndLine<b> is 1'<li> <ul><li><ol><pre>  @param startLinelogical line that contains changed fragment start offset @param newEndLine logical line that contains changed fragment end @param oldEndLine logical line that contained changed fragment end 

----------------------

][public void evenMore(int i, int j) # (1376-1545)       (FormatterOnOffTags.java)

This comment must be preserved too. @param i Parameter I. @param j Parameter J. 

----------------------

, public void evenMore(int i, int j) # (1427-1596)       (FormatterOnOffTags_after.java)

This comment must be preserved too. @param i Parameter I. @param j Parameter J. 

----------------------

][public int lastIndexOf(int ch)# (35007-35219)       (StressClass.java)

Finds the last instance of a character in this String.  @param ch character to find @return location (base 0) of the character, or -1 if not found 

----------------------

, public int indexOf(int ch)# (34042-34251)       (StressClass.java)

Finds the first instance of a character in this String.  @param ch character to find @return location (base 0) of the character, or -1 if not found 

----------------------

][public final @InspectionMessage String getMethodCompatibilityProblem(PsiMethod method) #com.intellij.codeInspection.dataFlow (2685-3298)       (ContractReturnValue.java)

Checks whether this return value makes sense for the specified method signature. The method body is not checked.E.g. "true" contract value makes sense for method returning { @code boolean}, but does not make sense for method returning { @code int}.This method can be used to check the contract correctness.  @param method method to check @return null if this contract return value makes sense for the supplied return type.Otherwise the human-readable error message is returned. 

----------------------

, public final boolean isMethodCompatible(PsiMethod method) #com.intellij.codeInspection.dataFlow (3594-4117)       (ContractReturnValue.java)

Checks whether this return value makes sense for the specified method signature. The method body is not checked.E.g. "true" contract value makes sense for method returning { @code boolean}, but does not make sense for method returning { @code int}.This method can be used to check the contract correctness.  @param method method to check @return true if this contract return value makes sense for the supplied return type. 

----------------------

][@NotNullpublic abstract String suggestUniqueVariableName(@NonNls @NotNull String baseName, PsiElement place, boolean lookForward)#com.intellij.psi.codeStyle (7252-7829)       (JavaCodeStyleManager.java)

Suggests a unique name for the variable used at the specified location. The returned name is guaranteed to not shadowthe existing name.  @param baseNamethe base name for the variable. @param place the location where the variable will be used. @param lookForward if true, the existing variables are searched in both directions; if false - only backward @return the generated unique name, 

----------------------

, @NotNullpublic SuggestedNameInfo suggestUniqueVariableName(@NotNull SuggestedNameInfo baseNameInfo, PsiElement place, boolean lookForward) #com.intellij.psi.codeStyle (7833-8546)       (JavaCodeStyleManager.java)

Suggests a unique names for the variable used at the specified location. The resulting name info may contain names whichshadow existing names.  @param baseNameInfo the base name info for the variable. @param placethe location where the variable will be used. @param lookForwardif true, the existing variables are searched in both directions; if false - only backward @return the generated unique name info. 

----------------------

][private volatile boolean myIsDirty#com.intellij.openapi.editor.impl (247566-247701)       (bigFile.java)

Holds value that indicates if line widths recalculation should be performed. 

----------------------

, private volatile boolean myIsDirty#com.intellij.openapi.editor.impl (246591-246726)       (bigFile.java)

Holds value that indicates if line widths recalculation should be performed. 

----------------------

][public static boolean isNullable(@NotNull PsiModifierListOwner owner) #Name),
                                           place) (17371-17612)       (NullableNotNullManager.java)

Returns true if given element is known to be nullable  @param owner element to check @return true if given element is known to be nullable 

----------------------

, public static boolean isNotNull(@NotNull PsiModifierListOwner owner) #Name),
                                           place) (17678-17926)       (NullableNotNullManager.java)

Returns true if given element is known to be non-nullable  @param owner element to check @return true if given element is known to be non-nullable 

----------------------

][public void foo() # (15-119)       (Return1.java)

<warning descr="Tag 'return' is not allowed here"> @return<warning> 

----------------------

, public void foo() # (15-127)       (Return0.java)

<warning descr="Tag 'return' is not allowed here"> @return<warning> returns 

----------------------

][public static PsiType getInferredLowerBoundForSynthetic(@NotNull PsiTypeParameter psiClass) #com.intellij.psi.util (68865-69175)       (TypeConversionUtil.java)

the lower bound for the non-physical (and may be non-denotable) type parameter temporarily created during type inference @see com.intellij.psi.impl.source.resolve.graphInference.InferenceSession 

----------------------

, public static PsiType getInferredUpperBoundForSynthetic(@NotNull PsiTypeParameter psiClass) #com.intellij.psi.util (68501-68811)       (TypeConversionUtil.java)

the upper bound for the non-physical (and may be non-denotable) type parameter temporarily created during type inference @see com.intellij.psi.impl.source.resolve.graphInference.InferenceSession 

----------------------

][private int zzEndRead#com.intellij.spi.parsing (14444-14559)       (_SPILexer.java)

 endRead marks the last character in the buffer, that has been readfrom input 

----------------------

, private int zzEndRead#com.intellij.lang.java.lexer (29210-29325)       (_JavaLexer.java)

 endRead marks the last character in the buffer, that has been readfrom input 

----------------------

, private int zzEndRead#com.intellij.lang.java.lexer (15162-15277)       (_JavaDocLexer.java)

 endRead marks the last character in the buffer, that has been readfrom input 

----------------------

][protected ClassLoader() throws SecurityException#java.lang (10047-10320)       (aClassLoader.java)

Create a new ClassLoader with as parent the system classloader. Theremay be a security check for <code>checkCreateClassLoader<code>.  @throws SecurityException if the security check fails 

----------------------

, protected ClassLoader() throws <error descr="Cannot resolve symbol 'SecurityException'">SecurityException</error>#java.lang (11682-12020)       (aClassLoader_hl.java)

Create a new ClassLoader with as parent the system classloader. Theremay be a security check for <code>checkCreateClassLoader<code>.  @throws SecurityException if the security check fails 

----------------------

][default @NotNull DfType castTo(@NotNull PsiPrimitiveType type) #com.intellij.codeInspection.dataFlow.types (521-711)       (DfPrimitiveType.java)

Cast this type to the specified primitive type  @param type target type @return result of the cast 

----------------------

, default @NotNull DfType castTo(@NotNull PsiPrimitiveType type) #com.intellij.codeInspection.dataFlow.types (1415-1605)       (DfIntegralType.java)

Cast this type to the specified primitive type  @param type target type @return result of the cast 

----------------------

][@NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType) throws IncorrectOperationException#com.intellij.psi (1661-1988)       (JVMElementFactory.java)

Creates an empty method with the specified name and return type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType) throws IncorrectOperationException#com.intellij.psi (3062-3442)       (PsiElementFactory.java)

Creates an empty method with the specified name and return type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, @NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (1992-2370)       (JVMElementFactory.java)

Creates an empty method with the specified name and return type in the given context.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, PsiParameter createParameter(@NotNull String name, PsiType type, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (2905-3261)       (JVMElementFactory.java)

Creates a parameter with the specified name and type in the given context.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

][public @NotNull LongRangeSet eval(@NotNull LongRangeSet left, @NotNull LongRangeSet right, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (667-1139)       (LongRangeBinOp.java)

Performs a binary operation on ranges.  @param left a left-hand operand @param righta right-hand operand @param isLong true if operation should be performed on long types (otherwise int is assumed) @return the resulting LongRangeSet which covers possible results of the operation (probably including some more elements). 

----------------------

, public @NotNull LongRangeSet evalWide(@NotNull LongRangeSet left, @NotNull LongRangeSet right, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (1912-2491)       (LongRangeBinOp.java)

Performs a binary operation on ranges with possible widening, so that if operation is performed repeatedly it will eventually converge.  @param left a left-hand operand @param righta right-hand operand @param isLong true if operation should be performed on long types (otherwise int is assumed) @return the resulting LongRangeSet which covers possible results of the operation (probably including some more elements). 

----------------------

][public class JavaFormatterBracesTest extends AbstractJavaFormatterTest #com.intellij.java.psi.formatter.java (708-970)       (JavaFormatterBracesTest.java)

Is intended to hold specific java formatting tests for 'braces placement' settings ({ @code Project Settings - Code Style - Alignment and Braces}).  @author Denis Zhdanov 

----------------------

, public class JavaFormatterAlignmentTest extends AbstractJavaFormatterTest #com.intellij.java.psi.formatter.java (484-740)       (JavaFormatterAlignmentTest.java)

Is intended to hold specific java formatting tests for alignment settings ({ @code Project Settings - Code Style - Alignment and Braces}).  @author Denis Zhdanov 

----------------------

][public static String valueOf(char[] data)# (52171-52574)       (StressClass.java)

Returns a String representation of a character array. Subsequentchanges to the array do not affect the String.  @param data the character array @return a String containing the same character sequence as data @throws NullPointerException if data is null @see #valueOf(char[], int, int) @see #String(char[]) 

----------------------

, public static String copyValueOf(char[] data)# (54399-54810)       (StressClass.java)

Returns a String representation of a character array. Subsequentchanges to the array do not affect the String.  @param data the character array @return a String containing the same character sequence as data @throws NullPointerException if data is null @see #copyValueOf(char[], int, int) @see #String(char[]) 

----------------------

][public Class loadClass(String name) throws ClassNotFoundException#java.lang (13178-13695)       (aClassLoader_hl.java)

Load a class using this ClassLoader or its parent, without resolvingit. Calls <code>loadClass(name, false)<code>. <p>Subclasses should not override this method but should override<code>findClass()<code> which is called by this method.<p>  @param name the name of the class relative to this ClassLoader @return the loaded class @throws ClassNotFoundException if the class cannot be found 

----------------------

, public Class loadClass(String name) throws ClassNotFoundException#java.lang (11280-11797)       (aClassLoader.java)

Load a class using this ClassLoader or its parent, without resolvingit. Calls <code>loadClass(name, false)<code>. <p>Subclasses should not override this method but should override<code>findClass()<code> which is called by this method.<p>  @param name the name of the class relative to this ClassLoader @return the loaded class @throws ClassNotFoundException if the class cannot be found 

----------------------

][@NotNullPsiExpression createExpressionFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8249-8759)       (PsiJavaParserFacade.java)

Creates a Java expression from the specified text.  @param textthe text of the expression to create. @param context the PSI element used as context for resolving references from the expression. @return the created expression instance. @throws IncorrectOperationException if the text does not specify a valid expression. 

----------------------

, @NotNullPsiComment createCommentFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8763-9252)       (PsiJavaParserFacade.java)

Creates a Java comment from the specified text.  @param textthe text of the comment to create. @param context the PSI element used as context for resolving references from the comment. @return the created comment instance. @throws IncorrectOperationException if the text does not specify a valid comment. 

----------------------

, @NotNullPsiStatement createStatementFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (7742-8245)       (PsiJavaParserFacade.java)

Creates a Java statement from the specified text.  @param textthe text of the statement to create. @param context the PSI element used as context for resolving references from the statement. @return the created statement instance. @throws IncorrectOperationException if the text does not specify a valid statement. 

----------------------

, @NotNullPsiCodeBlock createCodeBlockFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (7235-7738)       (PsiJavaParserFacade.java)

Creates a Java code block from the specified text.  @param textthe text of the code block to create. @param context the PSI element used as context for resolving references from the block. @return the created code block instance. @throws IncorrectOperationException if the text does not specify a valid code block. 

----------------------

][@NotNullpublic abstract PsiClass createClass(@NotNull PsiDirectory dir, @NotNull String name, @NotNull String templateName) throws IncorrectOperationException#com.intellij.psi (1816-2343)       (JavaDirectoryService.java)

Creates a class with the specified name in the directory.  @param name the name of the class to create (not including the file extension). @param templateName custom file template to create class text based on. @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

, @NotNullpublic abstract PsiClass createClass(@NotNull PsiDirectory dir, @NotNull String name) throws IncorrectOperationException#com.intellij.psi (1392-1812)       (JavaDirectoryService.java)

Creates a class with the specified name in the directory.  @param name the name of the class to create (not including the file extension). @return the created class instance. @throws IncorrectOperationException if the operation failed for some reason. 

----------------------

][public CFGBuilder invokeFunction(int argCount, @Nullable PsiExpression functionalExpression) #com.intellij.codeInspection.dataFlow (20777-21285)       (CFGBuilder.java)

Generates instructions to invoke functional expression (inlining it if possible) whichconsumes given amount of stack arguments, assuming that it was previously evaluated(see { @link #evaluateFunction(PsiExpression)}).  @param argCount number of stack arguments to consume @param functionalExpression a functional expression to invoke @return this builder 

----------------------

, public CFGBuilder invokeFunction(int argCount, @Nullable PsiExpression functionalExpression, Nullability resultNullability) #com.intellij.codeInspection.dataFlow (21373-21993)       (CFGBuilder.java)

Generates instructions to invoke functional expression (inlining it if possible) whichconsumes given amount of stack arguments, assuming that it was previously evaluated(see { @link #evaluateFunction(PsiExpression)}).  @param argCount number of stack arguments to consume @param functionalExpression a functional expression to invoke @param resultNullability an expected nullability of the lambda result @return this builder 

----------------------

][\n" + "boolean hasExceptionsPreventingSave(TimeSheetIdentifier timeSheetId) #com.test (31060-31473)       (TreeIsCorrectAfterDiffReparseTest.java)

\n" + "Returns true if the given timesheet contains exceptions that should prevent save.\n" + " @param timeSheetId time sheet ID\n" + " @return true if exceptions exist that should prevent save, false otherwise.\n" + " 

----------------------

, \n" + "boolean hasExceptionsPreventingSubmit(TimeSheetIdentifier timeSheetId) #com.test (32069-32488)       (TreeIsCorrectAfterDiffReparseTest.java)

\n" + "Returns true if the given timesheet contains exceptions that should prevent submit.\n" + " @param timeSheetId time sheet ID\n" + " @return true if exceptions exist that should prevent submit, false otherwise.\n" + " 

----------------------

][default void setInitializer(@Nullable PsiExpression initializer) throws IncorrectOperationException #com.intellij.psi (1488-1938)       (PsiVariable.java)

Adds initializer to the variable declaration statement or, if { @code initializer}parameter is null, removes initializer from variable.  @param initializer the initializer to add. @throws IncorrectOperationException if the modifications fails, or if this variable does not support initializers (e.g. parameters). 

----------------------

, @Overridevoid setInitializer(@Nullable PsiExpression initializer) throws IncorrectOperationException#com.intellij.psi (453-853)       (PsiLocalVariable.java)

Adds initializer to the variable declaration statement or, if { @code initializer}parameter is null, removes initializer from variable.  @param initializer the initializer to add. @throws IncorrectOperationException if the modifications fails for some reason. 

----------------------

][public abstract @NotNull String @NotNull [] getAllFieldNames()#com.intellij.psi.search (5311-5526)       (PsiShortNamesCache.java)

Returns the list of names of all fields in the project and(optionally) libraries.  @return the list of all field names. 

----------------------

, public abstract @NotNull String @NotNull [] getAllClassNames()#com.intellij.psi.search (2348-2564)       (PsiShortNamesCache.java)

Returns the list of names of all classes in the project and(optionally) libraries.  @return the list of all class names. 

----------------------

, public abstract @NotNull String @NotNull [] getAllMethodNames()#com.intellij.psi.search (4711-4929)       (PsiShortNamesCache.java)

Returns the list of names of all methods in the project and(optionally) libraries.  @return the list of all method names. 

----------------------

][private Object getPreviousFocusable(Object component,Object block, boolean start, boolean upward, boolean backward, boolean outgo) #in PBP
                Toolkit toolkit = getToolkit() (767010-767689)       (ThinletBig.java)

For the starting component search its parent direction for a focusable component, and thenits next component (if not search backward from the component).<br>For its parent components check its first component, the current one, and its parent direction(backward search), or its parent, then next component (forward direction).<br>For the rest components check the next, then the first subcomponent direction, and finallycheck whether the component is focusable. 

----------------------

, 	private Object getPreviousFocusable(Object component,			Object block, boolean start, boolean upward, boolean backward, boolean outgo) #in PBP
				Toolkit toolkit = getToolkit() (142786-143422)       (aThinlet.java)

	For the starting component search its parent direction for a focusable component, and then	its next component (if not search backward from the component).<br>	For its parent components check its first component, the current one, and its parent direction	(backward search), or its parent, then next component (forward direction).<br>	For the rest components check the next, then the first subcomponent direction, and finally	check whether the component is focusable.	 

----------------------

, 	private Object getPreviousFocusable(Object component,			Object block, boolean start, boolean upward, boolean backward, boolean outgo) #in PBP
				Toolkit toolkit = getToolkit() (205930-206566)       (aThinlet_hl.java)

	For the starting component search its parent direction for a focusable component, and then	its next component (if not search backward from the component).<br>	For its parent components check its first component, the current one, and its parent direction	(backward search), or its parent, then next component (forward direction).<br>	For the rest components check the next, then the first subcomponent direction, and finally	check whether the component is focusable.	 

----------------------

, private Object getPreviousFocusable(Object component,Object block, boolean start, boolean upward, boolean backward, boolean outgo) #in PBP
                Toolkit toolkit = getToolkit() (165096-165775)       (Thinlet.java)

For the starting component search its parent direction for a focusable component, and thenits next component (if not search backward from the component).<br>For its parent components check its first component, the current one, and its parent direction(backward search), or its parent, then next component (forward direction).<br>For the rest components check the next, then the first subcomponent direction, and finallycheck whether the component is focusable. 

----------------------

][@Contract(pure = true)@NonNlsString getMethodName(PsiVariable variable, PsiExpression expression, PsiType expressionType)#com.intellij.refactoring.chainCall (3163-3655)       (ChainCallExtractor.java)

Returns a name of the method to be extracted  @param variable variable to be used as chain call input @param expression mapping expression @param expressionType target expression type @return chain call. Result is correct only if { @link #canExtractChainCall} was checked beforefor given expression and expressionType 

----------------------

, @Contract(pure = true)default @NonNls String buildChainCall(PsiVariable variable, PsiExpression expression, PsiType expressionType) #com.intellij.refactoring.chainCall (2176-2729)       (ChainCallExtractor.java)

Returns chain call string representation (starting from "." like { @code .map(x -> x.getName())}).  @param variable variable to be used as chain call input @param expression mapping expression @param expressionType target expression type @return chain call. Result is correct only if { @link #canExtractChainCall} was checked beforefor given expression and expressionType 

----------------------

][CompilerMessage @NotNull [] getMessages(@NotNull CompilerMessageCategory category)#com.intellij.openapi.compiler (4264-4587)       (CompileContext.java)

Returns all messages of the specified category added during the current compile session.  @param category the category for which messages are requested. @return all compiler messages of the specified category 

----------------------

, int getMessageCount(@Nullable CompilerMessageCategory category)#com.intellij.openapi.compiler (4591-4905)       (CompileContext.java)

Returns the count of messages of the specified category added during the current compile session.  @param category the category for which messages are requested. @return the number of messages of the specified category 

----------------------

][\n"+"public static void test() #com.intellij.java.psi.formatter.java (762-1451)       (JavaWrapOnTypingTest.java)

\n"+" @return index for the given relative path. Never { @code null}, but returned index may not exist (in which case,\n" +" \n" +"{ @link Index#exists()} returns { @code false}). If the index do not exist, it may or may not be read-only (see <caret>)\n" +" 

----------------------

, \n"+"public static void test() #com.intellij.java.psi.formatter.java (2106-2817)       (JavaWrapOnTypingTest.java)

\n"+" @return index for the given relative path. Never { @code null}, but returned index may not exist (in which case,\n" +" \n" +"{ @link Index#exists()} returns { @code false}). If the index do not exist, it may or may not be read-only (see\n" +"{ @<caret>})\n" +" 

----------------------

][@NotNullPsiExpression createExpressionFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8249-8759)       (PsiJavaParserFacade.java)

Creates a Java expression from the specified text.  @param textthe text of the expression to create. @param context the PSI element used as context for resolving references from the expression. @return the created expression instance. @throws IncorrectOperationException if the text does not specify a valid expression. 

----------------------

, @NotNullPsiMethod createMethodFromText(@NotNull @NonNls String text, @Nullable PsiElement context, LanguageLevel languageLevel) throws IncorrectOperationException#com.intellij.psi (2798-3425)       (PsiJavaParserFacade.java)

Creates a Java method from the specified text with the specified language level.  @param textthe text of the method to create. @param context the PSI element used as context for resolving references from the method. @param languageLevel the language level used for creating the method. @return the created method instance. @throws IncorrectOperationException if the text is not a valid method body. 

----------------------

, @NotNullPsiComment createCommentFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (8763-9252)       (PsiJavaParserFacade.java)

Creates a Java comment from the specified text.  @param textthe text of the comment to create. @param context the PSI element used as context for resolving references from the comment. @return the created comment instance. @throws IncorrectOperationException if the text does not specify a valid comment. 

----------------------

, @NotNullPsiResourceVariable createResourceFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (4964-5473)       (PsiJavaParserFacade.java)

Creates a Java try-resource from the specified text.  @param textthe text of the resource to create. @param context the PSI element used as context for resolving references from the resource. @return the created resource instance. @throws IncorrectOperationException if the text is not a valid resource definition. 

----------------------

, @NotNullPsiMethod createMethodFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (3429-3906)       (PsiJavaParserFacade.java)

Creates a Java method from the specified text.  @param textthe text of the method to create. @param context the PSI element used as context for resolving references from the method. @return the created method instance. @throws IncorrectOperationException if the text is not a valid method body. 

----------------------

, @NotNullPsiField createFieldFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (2324-2794)       (PsiJavaParserFacade.java)

Creates a Java field from the specified text.  @param textthe text of the field to create. @param context the PSI element used as context for resolving references from the field. @return the created field instance. @throws IncorrectOperationException if the text is not a valid field body. 

----------------------

, @NotNullPsiStatement createStatementFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (7742-8245)       (PsiJavaParserFacade.java)

Creates a Java statement from the specified text.  @param textthe text of the statement to create. @param context the PSI element used as context for resolving references from the statement. @return the created statement instance. @throws IncorrectOperationException if the text does not specify a valid statement. 

----------------------

, @NotNullPsiParameter createParameterFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (3910-4415)       (PsiJavaParserFacade.java)

Creates a Java method parameter from the specified text.  @param textthe text of the parameter to create. @param context the PSI element used as context for resolving references from the parameter. @return the created parameter instance. @throws IncorrectOperationException if the text is not a valid parameter body. 

----------------------

][public static PsiField @NotNull [] filterAvailableFields(PsiClass clazz, FilterPattern pattern) #org.jetbrains.java.generate (1326-1775)       (GenerateToStringUtils.java)

Filters the list of fields from the class with the given parameters from the { @link Config config} settings.  @param clazzthe class to filter it's fields @param patternthe filter pattern to filter out unwanted fields @return fields available for this action after the filter process. 

----------------------

, public static PsiField @NotNull [] filterAvailableFields(PsiClass clazz, boolean includeSuperClass, FilterPattern pattern) #org.jetbrains.java.generate (1848-2446)       (GenerateToStringUtils.java)

Filters the list of fields from the class with the given parameters from the { @link Config config} settings.  @param clazzthe class to filter it's fields @param patternthe filter pattern to filter out unwanted fields @return fields available for this action after the filter process. 

----------------------

][public interface JspCodeBlockType #com.intellij.psi.jsp (172-278)       (JspCodeBlockType.java)

Marker interface for the IElementType for a JSP code block. 

----------------------

, public interface JspJavaCodeType #com.intellij.psi.jsp (172-282)       (JspJavaCodeType.java)

Marker interface for the IElementType for a JSP Java code block. 

----------------------

, public interface JspTemplateExpressionType #com.intellij.psi.jsp (172-296)       (JspTemplateExpressionType.java)

Marker interface for the IElementType for a JSP template expression. 

----------------------

][public boolean removeAll(Collection<?> c) # (24871-25718)       (Bar.expected.java)

Removes from this list all of its elements that are contained in thespecified collection.  @param c collection containing elements to be removed from this list @return { @code true} if this list changed as a result of the call @throws ClassCastException if the class of an element of this listis incompatible with the specified collection(<a href="Collection.html#optional-restrictions">optional<a>) @throws NullPointerException if this list contains a null element and thespecified collection does not permit null elements(<a href="Collection.html#optional-restrictions">optional<a>),or if the specified collection is null @see java.util.Collection#contains(Object) 

----------------------

, public boolean retainAll(Collection<?> c) # (25768-26729)       (Bar.expected.java)

Retains only the elements in this list that are contained in thespecified collection.In other words, removes from this list allof its elements that are not contained in the specified collection.  @param c collection containing elements to be retained in this list @return { @code true} if this list changed as a result of the call @throws ClassCastException if the class of an element of this listis incompatible with the specified collection(<a href="Collection.html#optional-restrictions">optional<a>) @throws NullPointerException if this list contains a null element and thespecified collection does not permit null elements(<a href="Collection.html#optional-restrictions">optional<a>),or if the specified collection is null @see java.util.Collection#contains(Object) 

----------------------

][PsiType inferTypeForMethodTypeParameter(@NotNull PsiTypeParameter typeParameter,PsiParameter @NotNull [] parameters,PsiExpression @NotNull [] arguments,@NotNull PsiSubstitutor partialSubstitutor,@Nullable PsiElement parent,@NotNull ParameterTypeInferencePolicy policy)#com.intellij.psi (6190-6823)       (PsiResolveHelper.java)

Returns { @link PsiType#NULL} iff no type could be inferred, { @code null} iff the type inferred is raw, the inferred type otherwise. 

----------------------

, PsiType inferTypeForMethodTypeParameter(@NotNull PsiTypeParameter typeParameter,PsiParameter @NotNull [] parameters,PsiExpression @NotNull [] arguments,@NotNull PsiSubstitutor partialSubstitutor,@Nullable PsiElement parent,@NotNull ParameterTypeInferencePolicy policy)#com.intellij.psi (463-1115)       (PsiInferenceHelper.java)

 @return { @link PsiType#NULL} iff no type could be inferrednull iff the type inferred is rawinferred type otherwise 

----------------------

][public static void addFromMaven(@NotNull ModifiableRootModel model, String mavenCoordinates) #com.intellij.testFramework.fixtures (957-1335)       (MavenDependencyUtil.java)

Adds a Maven library to given model as { @link DependencyScope#COMPILE} dependency including transitive dependencies.  @param modelroot model to add a Maven library to @param mavenCoordinates maven coordinates like groupID:artifactID:version 

----------------------

, public static void addFromMaven(@NotNull ModifiableRootModel model, String mavenCoordinates,boolean includeTransitiveDependencies, DependencyScope dependencyScope) #com.intellij.testFramework.fixtures (2008-2601)       (MavenDependencyUtil.java)

Adds a Maven library to given model.  @param model root model to add a Maven library to @param mavenCoordinatesmaven coordinates like groupID:artifactID:version @param includeTransitiveDependencies true for include transitive dependencies, false otherwise @param dependencyScope scope of the library 

----------------------

, public static void addFromMaven(@NotNull ModifiableRootModel model, String mavenCoordinates, boolean includeTransitiveDependencies) #com.intellij.testFramework.fixtures (1392-1901)       (MavenDependencyUtil.java)

Adds a Maven library to given model as { @link DependencyScope#COMPILE} dependency.  @param model root model to add a Maven library to @param mavenCoordinatesmaven coordinates like groupID:artifactID:version @param includeTransitiveDependencies true for include transitive dependencies, false otherwise 

----------------------

][void setElseBranch(@NotNull PsiStatement statement) throws IncorrectOperationException#com.intellij.psi (1777-2223)       (PsiIfStatement.java)

Sets the statement which is executed when the condition is false to the specified value.Adds the { @code else} keyword if required.  @param statement the statement to use as the else branch. @throws IncorrectOperationException if the modification fails for some reason (for example,the containing file is read-only). 

----------------------

, void setThenBranch(@NotNull PsiStatement statement) throws IncorrectOperationException#com.intellij.psi (2227-2663)       (PsiIfStatement.java)

Sets the statement which is executed when the condition is true to the specified value.Adds the parentheses if required.  @param statement the statement to use as the then branch. @throws IncorrectOperationException if the modification fails for some reason (for example,the containing file is read-only). 

----------------------

][public class JavaFormatterSpaceTest extends AbstractJavaFormatterTest #com.intellij.java.psi.formatter.java (347-532)       (JavaFormatterSpaceTest.java)

Is intended to hold specific java formatting tests for 'spacing' settings.  @author Denis Zhdanov 

----------------------

, public class JavaFormatterBlankLinesTest extends AbstractJavaFormatterTest #com.intellij.java.psi.formatter.java (648-842)       (JavaFormatterBlankLinesTest.java)

Is intended to hold specific java formatting tests for 'blank lines' settings.  @author Denis Zhdanov 

----------------------

][boolean isUsedForWriting()#com.intellij.codeInspection.reference (1258-1416)       (RefField.java)

Checks if the field is used for writing.  @return true if the field has write accesses, false otherwise. 

----------------------

, boolean isUsedForReading()#com.intellij.codeInspection.reference (693-858)       (RefParameter.java)

Checks if the parameter is used for reading.  @return true if the parameter has read accesses, false otherwise. 

----------------------

, boolean isUsedForReading()#com.intellij.codeInspection.reference (1097-1254)       (RefField.java)

Checks if the field is used for reading.  @return true if the field has read accesses, false otherwise. 

----------------------

][@NullablePsiJavaToken getRParenth()#com.intellij.psi (1474-1677)       (PsiForeachStatement.java)

Returns the closing parenthesis enclosing the statement header.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1011-1217)       (PsiWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (2877-3083)       (PsiIfStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (948-1159)       (PsiForStatement.java)

Returns the closing parenthesis enclosing the statement header.  @return the closing parenthesis, or { @code null} if the statement is incomplete. 

----------------------

, @NullablePsiJavaToken getRParenth()#com.intellij.psi (1205-1411)       (PsiDoWhileStatement.java)

Returns the closing parenthesis enclosing the statement condition.  @return the closing parenthesis, or null if the statement is incomplete. 

----------------------

][@NotNullPsiType createTypeFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (5477-6039)       (PsiJavaParserFacade.java)

Creates a Java type from the specified text.  @param textthe text of the type to create (for example, a primitive type keyword, an array declaration or the name of a class). @param context the PSI element used as context for resolving the reference. @return the created type instance. @throws IncorrectOperationException if the text does not specify a valid type. 

----------------------

, @NotNullPsiTypeElement createTypeElementFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (6043-6626)       (PsiJavaParserFacade.java)

Creates a Java type element from the specified text.  @param textthe text of the type to create (for example, a primitive type keyword, an array declaration or the name of a class). @param context the PSI element used as context for resolving the reference. @return the created type element. @throws IncorrectOperationException if the text does not specify a valid type. 

----------------------

, @NotNullPsiJavaCodeReferenceElement createReferenceFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (6630-7231)       (PsiJavaParserFacade.java)

Creates a Java code reference from the specified text.  @param textthe text of the type to create (for example, a primitive type keyword, an array declaration or the name of a class). @param context the PSI element used as context for resolving the reference. @return the created reference element. @throws IncorrectOperationException if the text does not specify a valid type. 

----------------------

][public void doSomethingElse(String z) # (1195-1325)       (FormatterOnOffTags_after.java)

It's OK to format this comment.  @param z Parameter Z. 

----------------------

, public void doSomethingElse(String z) # (1162-1293)       (FormatterOnOffTags.java)

It's OK to format this comment.  @param zParameter Z. 

----------------------

][public String getKey() #com.intellij.uiDesigner.lw (2545-2660)       (StringDescriptor.java)

 @return not { @code null} value if this is non "trivial" StringDescriptor. 

----------------------

, public String getBundleName() #com.intellij.uiDesigner.lw (2272-2394)       (StringDescriptor.java)

 @return not { @code null} value if this is non "trivial" StringDescriptor. 

----------------------

][public abstract RefactoringActionHandler createConvertToInstanceMethodHandler()#com.intellij.refactoring (3400-3760)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Convert To Instance Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createTempWithQueryHandler()#com.intellij.refactoring (2207-2545)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Temp With Query refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createAnonymousToInnerHandler()#com.intellij.refactoring (474-810)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Anonymous To Inner refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createExtractMethodHandler()#com.intellij.refactoring (6547-6876)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

][@Nullable PsiType getExpectedType()#com.intellij.psi (1105-1331)       (PsiExpressionCodeFragment.java)

Returns the expected type of the expression (not used by the expression itself,but can be used by its clients).  @return the expected type of the expression. 

----------------------

, void setExpectedType(PsiType type)#com.intellij.psi (1335-1562)       (PsiExpressionCodeFragment.java)

Sets the expected type of the expression (not used by the expression itself,but can be used by its clients).  @param type the expected type of the expression.

----------------------

][private void paintSelectionOnFirstSoftWrapLineIfNecessary(@NotNull Graphics g,@NotNull Point position,@NotNull Rectangle clip,@NotNull Color defaultBackground,@JdkConstants.FontStyle int fontType) #com.intellij.openapi.editor.impl (101164-102373)       (bigFile.java)

End user is allowed to perform selection by visual coordinates (e.g. by dragging mouse with left button hold). There is a possiblecase that such a move intersects with soft wrap introduced virtual space. We want to draw corresponding selection backgroundthere then.<p>This method encapsulates functionality of drawing selection background on the first soft wrap line (e.g. on a visual line whereit is applied).  @param g graphics to draw on @param positioncurrent position (assumed to be position of soft wrap appliance) @param cliptarget drawing area boundaries @param defaultBackground default background @param fontTypecurrent font type 

----------------------

, private void paintSelectionOnSecondSoftWrapLineIfNecessary(@NotNull Graphics g, @NotNull Point position, @NotNull Rectangle clip, @NotNull Color defaultBackground, @JdkConstants.FontStyle int fontType, @NotNull SoftWrap softWrap) #com.intellij.openapi.editor.impl (102812-104231)       (bigFile.java)

End user is allowed to perform selection by visual coordinates (e.g. by dragging mouse with left button hold). There is a possiblecase that such a move intersects with soft wrap introduced virtual space. We want to draw corresponding selection backgroundthere then.<p>This method encapsulates functionality of drawing selection background on the second soft wrap line (e.g. on a visual line afterthe one where it is applied).  @param g graphics to draw on @param positioncurrent position (assumed to be position of soft wrap appliance) @param cliptarget drawing area boundaries @param defaultBackground default background @param fontTypecurrent font type @param softWraptarget soft wrap which second line virtual space may contain selection 

----------------------

, private void paintSelectionOnSecondSoftWrapLineIfNecessary(@NotNull Graphics g, @NotNull Point position, @NotNull Rectangle clip, @NotNull Color defaultBackground, @JdkConstants.FontStyle int fontType, @NotNull SoftWrap softWrap) #com.intellij.openapi.editor.impl (104377-105796)       (bigFile.java)

End user is allowed to perform selection by visual coordinates (e.g. by dragging mouse with left button hold). There is a possiblecase that such a move intersects with soft wrap introduced virtual space. We want to draw corresponding selection backgroundthere then.<p>This method encapsulates functionality of drawing selection background on the second soft wrap line (e.g. on a visual line afterthe one where it is applied).  @param g graphics to draw on @param positioncurrent position (assumed to be position of soft wrap appliance) @param cliptarget drawing area boundaries @param defaultBackground default background @param fontTypecurrent font type @param softWraptarget soft wrap which second line virtual space may contain selection 

----------------------

, private void paintSelectionOnFirstSoftWrapLineIfNecessary(@NotNull Graphics g,@NotNull Point position,@NotNull Rectangle clip,@NotNull Color defaultBackground,@JdkConstants.FontStyle int fontType) #com.intellij.openapi.editor.impl (99599-100808)       (bigFile.java)

End user is allowed to perform selection by visual coordinates (e.g. by dragging mouse with left button hold). There is a possiblecase that such a move intersects with soft wrap introduced virtual space. We want to draw corresponding selection backgroundthere then.<p>This method encapsulates functionality of drawing selection background on the first soft wrap line (e.g. on a visual line whereit is applied).  @param g graphics to draw on @param positioncurrent position (assumed to be position of soft wrap appliance) @param cliptarget drawing area boundaries @param defaultBackground default background @param fontTypecurrent font type 

----------------------

][@NotNullpublic static Mutability inferMutability(PsiMethodImpl method) #com.intellij.codeInspection.dataFlow.inference (11564-11847)       (JavaSourceInference.java)

Infer method return type mutability  @param method method to analyze @return inferred return type mutability; { @link Mutability#UNKNOWN} if cannot be inferred or non-applicable 

----------------------

, @NotNullpublic static Nullability inferNullability(PsiMethodImpl method) #com.intellij.codeInspection.dataFlow.inference (10218-10506)       (JavaSourceInference.java)

Infer method return type nullability  @param method method to analyze @return inferred return type nullability; { @link Nullability#UNKNOWN} if cannot be inferred or non-applicable 

----------------------

][private void repaintLines(int startLine, int endLine) #com.intellij.openapi.editor.impl (63416-63701)       (bigFile.java)

Asks to repaint all logical lines from the given <code>[start; end]<code> range.  @param startLine start logical line to repaint (inclusive) @param endLine end logical line to repaint (inclusive) 

----------------------

, public void repaintLines(int startLine, int endLine) #com.intellij.openapi.editor.impl (62544-62828)       (bigFile.java)

Asks to repaint all logical lines from the given <code>[start; end]<code> range.  @param startLine start logical line to repaint (inclusive) @param endLine end logical line to repaint (inclusive) 

----------------------

][@Overridevoid setInitializer(@Nullable PsiExpression initializer) throws IncorrectOperationException#com.intellij.psi (820-1224)       (PsiField.java)

Adds initializer to the field declaration or, if { @code initializer} parameter is null,removes the initializer from the field declaration.  @param initializer the initializer to add. @throws IncorrectOperationException if the modifications fails for some reason. 

----------------------

, default void setInitializer(@Nullable PsiExpression initializer) throws IncorrectOperationException #com.intellij.psi (1488-1938)       (PsiVariable.java)

Adds initializer to the variable declaration statement or, if { @code initializer}parameter is null, removes initializer from variable.  @param initializer the initializer to add. @throws IncorrectOperationException if the modifications fails, or if this variable does not support initializers (e.g. parameters). 

----------------------

, @Overridevoid setInitializer(@Nullable PsiExpression initializer) throws IncorrectOperationException#com.intellij.psi (453-853)       (PsiLocalVariable.java)

Adds initializer to the variable declaration statement or, if { @code initializer}parameter is null, removes initializer from variable.  @param initializer the initializer to add. @throws IncorrectOperationException if the modifications fails for some reason. 

----------------------

][@Nullable PsiStatement getBody()#com.intellij.psi (805-964)       (PsiLoopStatement.java)

Returns the body of the statement.  @return the body of the statement, or null if the body is empty 

----------------------

, @NullablePsiCodeBlock getBody()#com.intellij.psi (1032-1205)       (PsiSynchronizedStatement.java)

Returns the body of the statement.  @return the body of the statement, or null if the statement is incomplete.

----------------------

][boolean isInheritorDeep(PsiClass baseClass, @Nullable PsiClass classToByPass)#com.intellij.psi (11274-11999)       (PsiClass.java)

Checks if this class is a deep inheritor of the specified base class possibly bypassing a classwhen checking inheritance chain.Only java inheritance rules are considered.Note that { @link com.intellij.psi.search.searches.ClassInheritorsSearch}may return classes that are inheritors in broader, e.g. in ejb sense, but not in java sense.  @param baseClass the base class to check the inheritance. searched in the entire inheritance chain @param classToByPass class to bypass the inheritance check for @return true if the class is an inheritor, false otherwise 

----------------------

, boolean isInheritor(@NotNull PsiClass baseClass, boolean checkDeep)#com.intellij.psi (10604-11270)       (PsiClass.java)

Checks if this class is an inheritor of the specified base class.Only java inheritance rules are considered.Note that { @link com.intellij.psi.search.searches.ClassInheritorsSearch}may return classes that are inheritors in broader, e.g. in ejb sense, but not in java sense.  @param baseClass the base class to check the inheritance. @param checkDeep if false, only direct inheritance is checked; if true, the base class is searched in the entire inheritance chain @return true if the class is an inheritor, false otherwise 

----------------------

][public final ClassLoader getParent()#java.lang (22424-22859)       (aClassLoader_hl.java)

Returns the parent of this classloader. If the parent of thisclassloader is the bootstrap classloader then this method returns<code>null<code>. A security check may be performed on<code>RuntimePermission("getClassLoader")<code>.  @return the parent <code>ClassLoader<code> @throws SecurityException if the security check fails @since 1.2 

----------------------

, public final ClassLoader getParent()#java.lang (20022-20457)       (aClassLoader.java)

Returns the parent of this classloader. If the parent of thisclassloader is the bootstrap classloader then this method returns<code>null<code>. A security check may be performed on<code>RuntimePermission("getClassLoader")<code>.  @return the parent <code>ClassLoader<code> @throws SecurityException if the security check fails @since 1.2 

----------------------

][public abstract RefactoringActionHandler createReplaceConstructorWithFactoryHandler()#com.intellij.refactoring (3764-4234)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Constructor With Factory Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts either a { @code PsiMethod} that is a constructor, or a { @code PsiClass}with implicit default constructor. 

----------------------

, public abstract RefactoringActionHandler createEncapsulateFieldsHandler()#com.intellij.refactoring (4239-4647)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Constructor With Factory Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts either a { @code PsiClass} or any number of { @code PsiField}s. 

----------------------

][public int indexOf(Object o) # (11173-11552)       (Bar.expected.java)

Returns the index of the first occurrence of the specified elementin this list, or -1 if this list does not contain the element.More formally, returns the lowest index <tt>i<tt> such that<tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))<tt>,or -1 if there is no such index. 

----------------------

, public int lastIndexOf(Object o) # (11869-12252)       (Bar.expected.java)

Returns the index of the last occurrence of the specified elementin this list, or -1 if this list does not contain the element.More formally, returns the highest index <tt>i<tt> such that<tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))<tt>,or -1 if there is no such index. 

----------------------

][@NotNullPsiMethod createMethodFromText(@NotNull @NonNls String text, @Nullable PsiElement context, LanguageLevel languageLevel) throws IncorrectOperationException#com.intellij.psi (2798-3425)       (PsiJavaParserFacade.java)

Creates a Java method from the specified text with the specified language level.  @param textthe text of the method to create. @param context the PSI element used as context for resolving references from the method. @param languageLevel the language level used for creating the method. @return the created method instance. @throws IncorrectOperationException if the text is not a valid method body. 

----------------------

, @NotNullPsiMethod createMethodFromText(@NotNull @NonNls String text, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (3429-3906)       (PsiJavaParserFacade.java)

Creates a Java method from the specified text.  @param textthe text of the method to create. @param context the PSI element used as context for resolving references from the method. @return the created method instance. @throws IncorrectOperationException if the text is not a valid method body. 

----------------------

][protected <error descr="Cannot resolve symbol 'Package'">Package</error>[] getPackages()#java.lang (35999-36248)       (aClassLoader_hl.java)

Returns all Package objects defined by this classloader and its parents.  @return an array of all defined packages @since 1.2 

----------------------

, protected Package[] getPackages()#java.lang (32065-32259)       (aClassLoader.java)

Returns all Package objects defined by this classloader and its parents.  @return an array of all defined packages @since 1.2 

----------------------

][@NotNullPsiDocComment createDocCommentFromText(@NotNull @NonNls String text) throws IncorrectOperationException#com.intellij.psi (902-1256)       (PsiJavaParserFacade.java)

Creates a JavaDoc comment from the specified text.  @param text the text of the JavaDoc comment. @return the created comment. @throws IncorrectOperationException if the text of the comment is not valid. 

----------------------

, @NotNullPsiDocTag createDocTagFromText(@NotNull @NonNls String text) throws IncorrectOperationException#com.intellij.psi (568-898)       (PsiJavaParserFacade.java)

Creates a JavaDoc tag from the specified text.  @param text the text of the JavaDoc tag. @return the created tag. @throws IncorrectOperationException if the text of the tag is not valid. 

----------------------

][@NotNullpublic abstract LongRangeSet plus(LongRangeSet other, boolean isLong)#com.intellij.codeInspection.dataFlow.rangeSet (8892-9368)       (LongRangeSet.java)

Returns a range which represents all the possible values after performing an addition between any value from this rangeand any value from other range. The resulting range may contain some more values which cannot be produced by addition.Guaranteed to be commutative.  @param isLong whether result should be truncated to { @code int} @return a new range 

----------------------

, @NotNullpublic LongRangeSet minus(LongRangeSet other, boolean isLong) #com.intellij.codeInspection.dataFlow.rangeSet (9372-9806)       (LongRangeSet.java)

Returns a range which represents all the possible values after performing an addition between any value from this rangeand any value from other range. The resulting range may contain some more values which cannot be produced by addition.  @param isLong whether result should be truncated to { @code int} @return a new range 

----------------------

][public class PullDAOJdbcTemplate implements PullDAO#br.com.vivo.torpedeiro.pull.impl (218-446)       (SCR11799_after.java)

Implementa? padr?de { @link PullDAO} que realiza todas as opera?s utilizando SQL atrav?de um { @linkJdbcTemplate} do Spring Framework.  @author Marcus Brito 

----------------------

, public class PullDAOJdbcTemplate implements PullDAO#br.com.vivo.torpedeiro.pull.impl (218-446)       (SCR11799.java)

Implementa? padr?de { @link PullDAO} que realiza todas as opera?s utilizando SQL atrav?de um { @linkJdbcTemplate} do Spring Framework.  @author Marcus Brito 

----------------------

][public int lastIndexOf(String str, int fromIndex)# (37358-37888)       (StressClass.java)

Finds the last instance of a String in this String, starting ata given index.If starting index is greater than the maximum validindex, then the search begins at the end of this String.If thestarting index is less than zero, -1 is returned.  @param str String to find @param fromIndex index to start the search @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

, public int indexOf(String str, int fromIndex)# (36290-36817)       (StressClass.java)

Finds the first instance of a String in this String, starting ata given index.If starting index is less than 0, the searchstarts at the beginning of this String.If the starting indexis greater than the length of this String, -1 is returned.  @param str String to find @param fromIndex index to start the search @return location (base 0) of the String, or -1 if not found @throws NullPointerException if str is null 

----------------------

, public int indexOf(int ch, int fromIndex)# (34286-34768)       (StressClass.java)

Finds the first instance of a character in this String, starting ata given index.If starting index is less than 0, the searchstarts at the beginning of this String.If the starting indexis greater than the length of this String, -1 is returned.  @param ch character to find @param fromIndex index to start the search @return location (base 0) of the character, or -1 if not found 

----------------------

][@NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType) throws IncorrectOperationException#com.intellij.psi (1661-1988)       (JVMElementFactory.java)

Creates an empty method with the specified name and return type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType) throws IncorrectOperationException#com.intellij.psi (3062-3442)       (PsiElementFactory.java)

Creates an empty method with the specified name and return type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, @NotNullPsiParameter createParameter(@NotNull String name, PsiType type) throws IncorrectOperationException#com.intellij.psi (2585-2901)       (JVMElementFactory.java)

Creates a parameter with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @NotNullPsiField createField(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (1344-1657)       (JVMElementFactory.java)

Creates a field with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiParameter createParameter(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (3934-4312)       (PsiElementFactory.java)

Creates a parameter with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

, @NotNullPsiMethod createMethod(@NotNull String name, PsiType returnType, @Nullable PsiElement context) throws IncorrectOperationException#com.intellij.psi (1992-2370)       (JVMElementFactory.java)

Creates an empty method with the specified name and return type in the given context.  @throws IncorrectOperationException { @code name} is not a valid Java identifier or { @code type} represents an invalid type. 

----------------------

, @Override@NotNullPsiField createField(@NotNull String name, @NotNull PsiType type) throws IncorrectOperationException#com.intellij.psi (2692-3058)       (PsiElementFactory.java)

Creates a field with the specified name and type.  @throws IncorrectOperationException { @code name} is not a valid Java identifieror { @code type} represents an invalid type. 

----------------------

][public abstract RefactoringActionHandler createConvertToInstanceMethodHandler()#com.intellij.refactoring (3400-3760)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Convert To Instance Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createTurnRefsToSuperHandler()#com.intellij.refactoring (1850-2203)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Use Interface Where Possible refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createInvertBooleanHandler()#com.intellij.refactoring (8702-9062)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Invert Boolean refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}, that will be inverted 

----------------------

, public abstract RefactoringActionHandler createTempWithQueryHandler()#com.intellij.refactoring (2207-2545)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Temp With Query refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createMethodDuplicatesHandler()#com.intellij.refactoring (4651-5010)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Method Code Duplicates refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts one { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createAnonymousToInnerHandler()#com.intellij.refactoring (474-810)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Anonymous To Inner refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createExtractMethodHandler()#com.intellij.refactoring (6547-6876)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

][\n" +"public static void main(String[] args) #org.example.sandbox (35345-35602)       (JavaFormatterWrapTest.java)

\n" +"{ @link #authenticationCompleted(android.app.Activity,\n" +"int, int, android.content.Intent)}\n" +" \n" +" @param args\n" +" 

----------------------

, \n" +"public static void main(String[] args) #org.example.sandbox (35015-35253)       (JavaFormatterWrapTest.java)

\n" +"{ @link #authenticationCompleted(android.app.Activity, int, int, android.content.Intent)}\n" +" \n" +" @param args\n" +" 

----------------------

][protected Class findClass(String name) throws ClassNotFoundException#java.lang (15462-17360)       (aClassLoader_hl.java)

Called for every class name that is needed but has not yet beendefined by this classloader or one of its parents. It is called by<code>loadClass()<code> after both <code>findLoadedClass()<code> and<code>parent.loadClass()<code> couldn't provide the requested class. <p>The default implementation throws a<code>ClassNotFoundException<code>. Subclasses should override thismethod. An implementation of this method in a subclass should get theclass bytes of the class (if it can find them), if the package of therequested class doesn't exist it should define the package and finallyit should call define the actual class. It does not have to resolve theclass. It should look something like the following:<br> <pre> Get the bytes that describe the requested classbyte[] classBytes = classLoaderSpecificWayToFindClassBytes(name); Get the package nameint lastDot = name.lastIndexOf('.');if (lastDot != -1){String packageName = name.substring(0, lastDot); Look if the package already existsif (getPackage(packageName) == null){ define the packagedefinePackage(packageName, ...);}} Define and return the class return defineClass(name, classBytes, 0, classBytes.length);<pre> <p><code>loadClass()<code> makes sure that the <code>Class<code>returned by <code>findClass()<code> will later be returned by<code>findLoadedClass()<code> when the same class name is requested.  @param name class name to find (including the package name) @return the requested Class @throws ClassNotFoundException when the class can not be found @since 1.2 

----------------------

, protected Class findClass(String name) throws ClassNotFoundException#java.lang (13503-15401)       (aClassLoader.java)

Called for every class name that is needed but has not yet beendefined by this classloader or one of its parents. It is called by<code>loadClass()<code> after both <code>findLoadedClass()<code> and<code>parent.loadClass()<code> couldn't provide the requested class. <p>The default implementation throws a<code>ClassNotFoundException<code>. Subclasses should override thismethod. An implementation of this method in a subclass should get theclass bytes of the class (if it can find them), if the package of therequested class doesn't exist it should define the package and finallyit should call define the actual class. It does not have to resolve theclass. It should look something like the following:<br> <pre> Get the bytes that describe the requested classbyte[] classBytes = classLoaderSpecificWayToFindClassBytes(name); Get the package nameint lastDot = name.lastIndexOf('.');if (lastDot != -1){String packageName = name.substring(0, lastDot); Look if the package already existsif (getPackage(packageName) == null){ define the packagedefinePackage(packageName, ...);}} Define and return the class return defineClass(name, classBytes, 0, classBytes.length);<pre> <p><code>loadClass()<code> makes sure that the <code>Class<code>returned by <code>findClass()<code> will later be returned by<code>findLoadedClass()<code> when the same class name is requested.  @param name class name to find (including the package name) @return the requested Class @throws ClassNotFoundException when the class can not be found @since 1.2 

----------------------

][JavaResolveResult @NotNull [] multiResolveConstructor(@NotNull PsiClassType type, @NotNull PsiExpressionList argumentList, @NotNull PsiElement place)#com.intellij.psi (1873-2585)       (PsiResolveHelper.java)

Resolves a constructor and returns all variants for the resolve.The resolved constructors are not necessarily accessible from the point of the call,but accessible constructors have a priority.  @param typethe class containing the constructor @param argumentListlist of arguments of the call or new expression @param place place where constructor is invoked (used for checking access) @return the result of the resolve, or { @link JavaResolveResult#EMPTY} if the resolve failed. 

----------------------

, @NotNullJavaResolveResult resolveConstructor(PsiClassType type, @NotNull PsiExpressionList argumentList, PsiElement place)#com.intellij.psi (1224-1869)       (PsiResolveHelper.java)

Resolves a constructor.The resolved constructor is not necessarily accessible from the point of the call,but accessible constructors have a priority.  @param typethe class containing the constructor @param argumentListlist of arguments of the call or new expression @param place place where constructor is invoked (used for checking access) @return the result of the resolve, or { @link JavaResolveResult#EMPTY} if the resolve failed. 

----------------------

][@Nlspublic @NotNull String object() #"),
  PARAMETER("element.parameter"),
  PATTERN_VARIABLE("element.pattern_variable"),
  RECORD("element.record"),
  RECORD_COMPONENT("element.record_component"),
  STATEMENT("element.statement"),
  UNKNOWN("element.unknown"),
  VARIABLE("element.variable"),
  THROWS_LIST("element.throws.list"),
  EXTENDS_LIST("element.extends.list"),
  RECEIVER_PARAMETER("element.receiver.parameter"),
  METHOD_CALL("element.method.call") (1980-2134)       (JavaElementKind.java)

 @return human-readable name of the item having the object role in the sentence (accusative case) 

----------------------

, @Nlspublic @NotNull String subject() #"),
  PARAMETER("element.parameter"),
  PATTERN_VARIABLE("element.pattern_variable"),
  RECORD("element.record"),
  RECORD_COMPONENT("element.record_component"),
  STATEMENT("element.statement"),
  UNKNOWN("element.unknown"),
  VARIABLE("element.variable"),
  THROWS_LIST("element.throws.list"),
  EXTENDS_LIST("element.extends.list"),
  RECEIVER_PARAMETER("element.receiver.parameter"),
  METHOD_CALL("element.method.call") (1766-1922)       (JavaElementKind.java)

 @return human-readable name of the item having the subject role in the sentence (nominative case) 

----------------------

][public abstract void enqueueClassUsagesProcessor(RefClass refClass, UsagesProcessor p)#com.intellij.codeInspection (1226-1609)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified class outside the current analysisscope be passed to the specified processor.  @param refClass the reference graph node for the class whose usages should be processed. @param pthe processor to pass the usages to. 

----------------------

, public abstract void enqueueMethodUsagesProcessor(RefMethod refMethod, UsagesProcessor p)#com.intellij.codeInspection (2859-3249)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified method outside the current analysisscope be passed to the specified processor.  @param refMethod the reference graph node for the method whose usages should be processed. @param p the processor to pass the usages to. 

----------------------

, public abstract void enqueueFieldUsagesProcessor(RefField refField, UsagesProcessor p)#com.intellij.codeInspection (2472-2855)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified field outside the current analysisscope be passed to the specified processor.  @param refField the reference graph node for the field whose usages should be processed. @param pthe processor to pass the usages to. 

----------------------

][protected Package definePackage(String name, String specTitle,String specVendor, String specVersion,String implTitle, String implVendor,String implVersion, URL sealed)#java.lang (29373-31061)       (aClassLoader.java)

Defines a new package and creates a Package object. The package shouldbe defined before any class in the package is defined with<code>defineClass()<code>. The package should not yet be definedbefore in this classloader or in one of its parents (which means that<code>getPackage()<code> should return <code>null<code>). Allparameters except the <code>name<code> of the package may be<code>null<code>. <p>Subclasses should call this method from their <code>findClass()<code>implementation before calling <code>defineClass()<code> on a Classin a not yet defined Package (which can be checked by calling<code>getPackage()<code>).  @param name the name of the Package @param specTitle the name of the specification @param specVendor the name of the specification designer @param specVersion the version of this specification @param implTitle the name of the implementation @param implVendor the vendor that wrote this implementation @param implVersion the version of this implementation @param sealed if sealed the origin of the package classes @return the Package object for the specified package @throws IllegalArgumentException if the package name is null or itwas already defined by this classloader or one of its parents @see Package @since 1.2 

----------------------

, protected <error descr="Cannot resolve symbol 'Package'">Package</error> definePackage(String name, String specTitle,String specVendor, String specVersion,String implTitle, String implVendor,String implVersion, URL sealed)#java.lang (32777-34520)       (aClassLoader_hl.java)

Defines a new package and creates a Package object. The package shouldbe defined before any class in the package is defined with<code>defineClass()<code>. The package should not yet be definedbefore in this classloader or in one of its parents (which means that<code>getPackage()<code> should return <code>null<code>). Allparameters except the <code>name<code> of the package may be<code>null<code>. <p>Subclasses should call this method from their <code>findClass()<code>implementation before calling <code>defineClass()<code> on a Classin a not yet defined Package (which can be checked by calling<code>getPackage()<code>).  @param name the name of the Package @param specTitle the name of the specification @param specVendor the name of the specification designer @param specVersion the version of this specification @param implTitle the name of the implementation @param implVendor the vendor that wrote this implementation @param implVersion the version of this implementation @param sealed if sealed the origin of the package classes @return the Package object for the specified package @throws IllegalArgumentException if the package name is null or itwas already defined by this classloader or one of its parents @see Package @since 1.2 

----------------------

][protected void doTextTest(String fileName, String textBefore, String textAfter) throws IOException #com.intellij.testFramework (1152-1725)       (EditorActionTestCase.java)

Perform action test using text before and after action perform. Useas &lt;caret&gt; marker where caret should beplaced when file is loaded in editor and &lt;selection&gt;&lt;selection&gt; denoting selection bounds. @param fileName name of the file. Mostly used to create proper instance of the PsiFile @param textBefore text with markers before action @param textAfter expected text with markers after action @throws IOException 

----------------------

, protected void doTextTest(String fileName, String textBefore, String textAfter, boolean ignoreTrailingSpaces) throws IOException #com.intellij.testFramework (1789-2471)       (EditorActionTestCase.java)

Perform action test using text before and after action perform. Uses &lt;caret&gt; marker where caret should beplaced when file is loaded in editor and &lt;selection&gt;&lt;selection&gt; denoting selection bounds. @param fileNamename of the file. Mostly used to create proper instance of the PsiFile @param textBeforetext with markers before action @param textAfterexpected text with markers after action @param ignoreTrailingSpacestrue if trailing spaces should be ignored. @throws IOException 

----------------------

][public void ensureCapacity(int minCapacity) # (7848-8173)       (Bar.expected.java)

Increases the capacity of this <tt>ArrayList<tt> instance, ifnecessary, to ensure that it can hold at least the number of elementsspecified by the minimum capacity argument.  @param minCapacity the desired minimum capacity 

----------------------

, private void grow(int minCapacity) # (9295-9549)       (Bar.expected.java)

Increases the capacity to ensure that it can hold at least thenumber of elements specified by the minimum capacity argument.  @param minCapacity the desired minimum capacity 

----------------------

][@OverridePsiField @NotNull [] getFields()#com.intellij.psi (4940-5081)       (PsiClass.java)

Returns the list of fields in the class.  @return the list of fields. 

----------------------

, @OverridePsiMethod @NotNull [] getMethods()#com.intellij.psi (5085-5230)       (PsiClass.java)

Returns the list of methods in the class.  @return the list of methods. 

----------------------

][boolean isUsedForWriting()#com.intellij.codeInspection.reference (1258-1416)       (RefField.java)

Checks if the field is used for writing.  @return true if the field has write accesses, false otherwise. 

----------------------

, boolean isUsedForWriting()#com.intellij.codeInspection.reference (862-1028)       (RefParameter.java)

Checks if the parameter is used for writing.  @return true if the parameter has write accesses, false otherwise. 

----------------------

, boolean isUsedForReading()#com.intellij.codeInspection.reference (1097-1254)       (RefField.java)

Checks if the field is used for reading.  @return true if the field has read accesses, false otherwise. 

----------------------

][@Overridepublic boolean execute(@NotNull PsiElement pe, @NotNull ResolveState state)#com.intellij.psi.scope.processor (1469-1622)       (VariablesProcessor.java)

 Always return true since we wanna get all vars in scope 

----------------------

, @Overridepublic boolean execute(@NotNull PsiElement pe, @NotNull ResolveState state)#com.intellij.codeInsight.completion.proc (1287-1440)       (VariablesProcessor.java)

 Always return true since we wanna get all vars in scope 

----------------------

][public CFGBuilder isAssignableFrom(PsiMethodCallExpression anchor) #com.intellij.codeInspection.dataFlow (8560-8892)       (CFGBuilder.java)

Generate instructions to perform an Class.isAssignableFrom operation<p>Stack before: ... super_class sub_class<p>Stack after: ... result  @param anchor element to bind this instruction to @return this builder 

----------------------

, public CFGBuilder isInstance(PsiMethodCallExpression anchor) #com.intellij.codeInspection.dataFlow (8183-8501)       (CFGBuilder.java)

Generate instructions to perform an Class.isInstance operation<p>Stack before: ... object class_object<p>Stack after: ... result  @param anchor element to bind this instruction to @return this builder 

----------------------

][public abstract RefactoringActionHandler createConvertToInstanceMethodHandler()#com.intellij.refactoring (3400-3760)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Convert To Instance Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createTurnRefsToSuperHandler()#com.intellij.refactoring (1850-2203)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Use Interface Where Possible refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createInvertBooleanHandler()#com.intellij.refactoring (8702-9062)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Invert Boolean refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}, that will be inverted 

----------------------

, public abstract RefactoringActionHandler createMethodDuplicatesHandler()#com.intellij.refactoring (4651-5010)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Method Code Duplicates refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts one { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createIntroduceVariableHandler()#com.intellij.refactoring (7797-8200)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Introduce Variable refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiExpression}, that will be an initializer for introduced variable. 

----------------------

][public interface JspCodeBlockType #com.intellij.psi.jsp (172-278)       (JspCodeBlockType.java)

Marker interface for the IElementType for a JSP code block. 

----------------------

, public interface JspTemplateExpressionType #com.intellij.psi.jsp (172-296)       (JspTemplateExpressionType.java)

Marker interface for the IElementType for a JSP template expression. 

----------------------

][public abstract void enqueueClassUsagesProcessor(RefClass refClass, UsagesProcessor p)#com.intellij.codeInspection (1226-1609)       (GlobalJavaInspectionContext.java)

Requests that usages of the specified class outside the current analysisscope be passed to the specified processor.  @param refClass the reference graph node for the class whose usages should be processed. @param pthe processor to pass the usages to. 

----------------------

, public abstract void enqueueDerivedClassesProcessor(RefClass refClass, DerivedClassesProcessor p)#com.intellij.codeInspection (1613-2026)       (GlobalJavaInspectionContext.java)

Requests that derived classes of the specified class outside the current analysisscope be passed to the specified processor.  @param refClass the reference graph node for the class whose derived classes should be processed. @param pthe processor to pass the classes to. 

----------------------

][public abstract RefactoringActionHandler createConvertToInstanceMethodHandler()#com.intellij.refactoring (3400-3760)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Convert To Instance Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createTurnRefsToSuperHandler()#com.intellij.refactoring (1850-2203)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Use Interface Where Possible refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createInvertBooleanHandler()#com.intellij.refactoring (8702-9062)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Invert Boolean refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}, that will be inverted 

----------------------

, public abstract RefactoringActionHandler createTempWithQueryHandler()#com.intellij.refactoring (2207-2545)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Temp With Query refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

, public abstract RefactoringActionHandler createMethodDuplicatesHandler()#com.intellij.refactoring (4651-5010)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Method Code Duplicates refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts one { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

][public abstract RefactoringActionHandler createConvertToInstanceMethodHandler()#com.intellij.refactoring (3400-3760)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Convert To Instance Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createTurnRefsToSuperHandler()#com.intellij.refactoring (1850-2203)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Use Interface Where Possible refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractSuperclassHandler()#com.intellij.refactoring (5401-5746)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Superclass refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createExtractInterfaceHandler()#com.intellij.refactoring (6964-7307)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Interface refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiClass}. 

----------------------

, public abstract RefactoringActionHandler createInvertBooleanHandler()#com.intellij.refactoring (8702-9062)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Invert Boolean refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}, that will be inverted 

----------------------

, public abstract RefactoringActionHandler createMethodDuplicatesHandler()#com.intellij.refactoring (4651-5010)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Replace Method Code Duplicates refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts one { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createMakeMethodStaticHandler()#com.intellij.refactoring (3051-3396)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Make Method Static refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}accepts 1 { @code PsiMethod}. 

----------------------

, public abstract RefactoringActionHandler createExtractMethodHandler()#com.intellij.refactoring (6547-6876)       (JavaRefactoringActionHandlerFactory.java)

Creates handler for Extract Method refactoring.<p> { @link RefactoringActionHandler#invoke(com.intellij.openapi.project.Project, com.intellij.psi.PsiElement[], com.intellij.openapi.actionSystem.DataContext)}is not implemented. 

----------------------

][public CFGBuilder assignTo(PsiVariable var) #com.intellij.codeInspection.dataFlow (18606-18851)       (CFGBuilder.java)

Generate instructions to assign top stack value to the specified variable<p>Stack before: ... value<p>Stack after: ... variable  @return this builder 

----------------------

, public CFGBuilder assignTo(DfaVariableValue var) #com.intellij.codeInspection.dataFlow (18955-19205)       (CFGBuilder.java)

Generate instructions to assign top stack value to the specified variable<p>Stack before: ... value<p>Stack after: ... variable  @return this builder 

----------------------

][@NullablePsiElement getRBrace()#com.intellij.psi (9845-10061)       (PsiClass.java)

Returns the token representing the closing curly brace of the class.  @return the token instance, or null if the token is missing in the source code file. 

----------------------

, @NullablePsiElement getLBrace()#com.intellij.psi (9625-9841)       (PsiClass.java)

Returns the token representing the opening curly brace of the class.  @return the token instance, or null if the token is missing in the source code file. 

----------------------

][void setSuperType(PsiType superType)#com.intellij.psi (1484-1687)       (JavaCodeFragment.java)

Sets the type corresponding to the { @code super} keyword in the code fragment.  @param superType the type of { @code super} in the fragment. 

----------------------

, PsiType getThisType()#com.intellij.psi (913-1093)       (JavaCodeFragment.java)

Returns the type corresponding to the { @code this} keyword in the code fragment.  @return the type of { @code this} in the fragment. 

----------------------

, PsiType getSuperType()#com.intellij.psi (1297-1480)       (JavaCodeFragment.java)

Returns the type corresponding to the { @code super} keyword in the code fragment.  @return the type of { @code super} in the fragment. 

----------------------

][@NotNullpublic SuggestedNameInfo suggestUniqueVariableName(@NotNull SuggestedNameInfo baseNameInfo, PsiElement place, boolean lookForward) #com.intellij.psi.codeStyle (7833-8546)       (JavaCodeStyleManager.java)

Suggests a unique names for the variable used at the specified location. The resulting name info may contain names whichshadow existing names.  @param baseNameInfo the base name info for the variable. @param placethe location where the variable will be used. @param lookForwardif true, the existing variables are searched in both directions; if false - only backward @return the generated unique name info. 

----------------------

, @NotNullpublic abstract SuggestedNameInfo suggestUniqueVariableName(@NotNull SuggestedNameInfo baseNameInfo,PsiElement place,boolean ignorePlaceName,boolean lookForward)#com.intellij.psi.codeStyle (9281-10154)       (JavaCodeStyleManager.java)

Suggests a unique name for the variable used at the specified location.  @param baseNameInfothe base name info for the variable. @param place the location where the variable will be used. @param ignorePlaceName if true and place is PsiNamedElement, place.getName() would be still treated as unique name @param lookForward if true, the existing variables are searched in both directions; if false - only backward @return the generated unique name 

----------------------

, @NotNullpublic abstract String suggestUniqueVariableName(@NonNls @NotNull String baseName, PsiElement place, boolean lookForward)#com.intellij.psi.codeStyle (7252-7829)       (JavaCodeStyleManager.java)

Suggests a unique name for the variable used at the specified location. The returned name is guaranteed to not shadowthe existing name.  @param baseNamethe base name for the variable. @param place the location where the variable will be used. @param lookForward if true, the existing variables are searched in both directions; if false - only backward @return the generated unique name, 

----------------------

][boolean isUsedForReading()#com.intellij.codeInspection.reference (693-858)       (RefParameter.java)

Checks if the parameter is used for reading.  @return true if the parameter has read accesses, false otherwise. 

----------------------

, boolean isUsedForWriting()#com.intellij.codeInspection.reference (862-1028)       (RefParameter.java)

Checks if the parameter is used for writing.  @return true if the parameter has write accesses, false otherwise. 

----------------------

, boolean isUsedForReading()#com.intellij.codeInspection.reference (1097-1254)       (RefField.java)

Checks if the field is used for reading.  @return true if the field has read accesses, false otherwise. 

----------------------

]
